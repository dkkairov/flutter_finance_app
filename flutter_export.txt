===== pubspec.yaml =====

name: flutter_app_1
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: ^3.7.2

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons:
  flutter_riverpod: ^2.6.1
  riverpod: ^2.6.1
  riverpod_annotation: ^2.6.1
  fl_chart: ^0.70.2
#  flutter_localizations:
#    sdk: flutter
  flutter_secure_storage: ^9.2.4
  http: ^1.3.0
  smooth_page_indicator: ^1.2.1
  dio: ^5.8.0+1
  drift: ^2.26.0
  connectivity_plus: ^6.1.3
  drift_dev: ^2.26.0
  sqlite3_flutter_libs: ^0.5.32
  freezed_annotation: ^3.0.0
  json_annotation: ^4.9.0
  vibration: ^3.1.3
  intl: ^0.19.0
  easy_localization: ^3.0.7+1

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^5.0.0
  build_runner:
  custom_lint:
  riverpod_generator: ^2.6.5
  riverpod_lint: ^2.6.5
  freezed: ^3.0.4
  json_serializable: ^6.9.4


flutter:
  uses-material-design: true
  assets:
    - lib/core/localization/languages/
    - lib/features/projects/data/domain/project.freezed.dart

  # To main assets to your application, main an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To main custom fonts to your application, main a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
#easy_localization:
#  path: lib/core/localization/languages/
#  output: lib/generated/lib/l10n
#  filename: locale_keys.g.dart
#  codegen_format: keys
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\main.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/transactions/presentation/screens/transaction_create_screen.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'common/providers/theme_provider.dart';
import 'core/network/network_status_notifier.dart';
import 'core/routing/main_router.dart';
import 'core/theme/theme_manager.dart';
import 'features/transactions/presentation/providers/transaction_provider.dart';
import 'generated/codegen_loader.g.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await EasyLocalization.ensureInitialized();

  const storage = FlutterSecureStorage();

  // рџџЎ в†ђ РІСЃС‚Р°РІСЊ СЃРІРѕР№ СЂР°Р±РѕС‡РёР№ С‚РѕРєРµРЅ Р·РґРµСЃСЊ:
  const token = '1|SxInNroV15HXdmVfercVMBTCvdJgLGnyOPiTDytP9cf82459';
  await storage.write(key: 'token', value: token);

  final check = await storage.read(key: 'token');
  debugPrint('рџ“¦ РўРѕРєРµРЅ СЃРѕС…СЂР°РЅС‘РЅ: $check'); // в†ђ РІРѕС‚ СЌС‚Рѕ РґРѕР±Р°РІСЊ

  runApp(EasyLocalization(
    supportedLocales: [
      Locale('en', 'US'),
      Locale('ru', 'RU'),
      // Locale('kk', 'KZ'),
    ],
    path: 'lib/core/localization/languages',
    fallbackLocale: Locale('en', 'US'),
    assetLoader: CodegenLoader(),
    child: ProviderScope(child: MyApp()),
  ));
}

final bottomNavProvider = StateProvider<int>((ref) => 2);
final transactionTypeProvider = StateProvider<TransactionType>((ref) => TransactionType.expense);

class MyApp extends ConsumerStatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends ConsumerState<MyApp> {

  @override
  void initState() {
    super.initState();

    final syncService = ref.read(offlineSyncServiceProvider);
    final network = ref.read(networkStatusProvider);

    network.isConnected().then((connected) {
      if (connected) syncService.syncPendingRequests();
    });

    network.onStatusChange.listen((isOnline) {
      if (isOnline) syncService.syncPendingRequests();
    });
  }

  @override
  Widget build(BuildContext context) {
    final themeModeAsync = ref.watch(themeModeProvider);
    final themeMode = themeModeAsync.value ?? ThemeMode.system;

    return MaterialApp(
      title: 'Fin16',
      theme: ThemeManager.lightTheme,
      darkTheme: ThemeManager.darkTheme,
      themeMode: themeMode,
      initialRoute: MainRouter.initialRoute,
      onGenerateRoute: MainRouter.generateRoute,
      localizationsDelegates: context.localizationDelegates,
      supportedLocales: context.supportedLocales,
      locale: context.locale,
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\providers\theme_provider.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/services/user_settings_service.dart';

/// РџСЂРѕРІР°Р№РґРµСЂ, СЃС‚СЂРёРјРёС‚ С‚РµРєСѓС‰РёР№ СЂРµР¶РёРј С‚РµРјС‹ РёР· Р±Р°Р·С‹ Drift
final themeModeProvider = StreamProvider<ThemeMode>((ref) {
  final service = ref.watch(userSettingsServiceProvider);
  return service.watchThemeMode();
});

/// РџСЂРѕРІР°Р№РґРµСЂ РєРѕРЅС‚СЂРѕР»Р»РµСЂР°, РєРѕС‚РѕСЂС‹Р№ СѓРїСЂР°РІР»СЏРµС‚ СѓСЃС‚Р°РЅРѕРІРєРѕР№ С‚РµРјС‹
final themeModeControllerProvider = Provider<ThemeModeController>((ref) {
  final service = ref.watch(userSettingsServiceProvider);
  return ThemeModeController(service);
});

class ThemeModeController {
  final UserSettingsService _service;

  ThemeModeController(this._service);

  Future<void> setTheme(ThemeMode mode) => _service.saveThemeMode(mode);
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_amount_text.dart =====

import 'package:flutter/material.dart';
import 'package:intl/intl.dart'; // Р”Р»СЏ С„РѕСЂРјР°С‚РёСЂРѕРІР°РЅРёСЏ С‡РёСЃРµР»

import '../../core/theme/custom_colors.dart';
import '../../core/theme/custom_text_styles.dart';

class CustomAmountText extends StatelessWidget {
  final double amount;
  final String currencySymbol; // Р”РѕР±Р°РІР»СЏРµРј РїР°СЂР°РјРµС‚СЂ РґР»СЏ СЃРёРјРІРѕР»Р° РІР°Р»СЋС‚С‹

  const CustomAmountText({
    super.key,
    required this.amount,
    this.currencySymbol = 'в‚ё', // Р—РЅР°С‡РµРЅРёРµ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ - С‚РµРЅРіРµ
  });

  @override
  Widget build(BuildContext context) {
    final formattedAmount = NumberFormat('#,###', 'ru_RU').format(amount.abs());
    final sign = amount > 0 ? '+' : '';
    final color = amount < 0 ? CustomColors.error : CustomColors.primary;

    return Text(
      '$sign$formattedAmount $currencySymbol', // РСЃРїРѕР»СЊР·СѓРµРј РїРµСЂРµРґР°РЅРЅС‹Р№ СЃРёРјРІРѕР» РІР°Р»СЋС‚С‹
      style: CustomTextStyles.normalMedium.copyWith(
        fontWeight: FontWeight.bold,
        color: color,
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_divider.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';

class CustomDivider extends StatelessWidget {
  const CustomDivider({super.key});

  @override
  Widget build(BuildContext context) {
    return Divider(
      color: CustomColors.mainLightGrey,
      thickness: 1,
      height: 3,
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_draggable_scrollable_sheet.dart =====

import 'package:flutter/material.dart';

import '../../core/theme/custom_text_styles.dart';
import 'custom_divider.dart';

class CustomDraggableScrollableSheet extends StatelessWidget {
  const CustomDraggableScrollableSheet({
    super.key,
    required this.fields,
    required this.title,
  });

  final List<Widget> fields;
  final String title; // Р—Р°РіРѕР»РѕРІРѕРє РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      expand: false, // РќРµ Р·Р°РЅРёРјР°РµС‚ РІСЃСЋ РІС‹СЃРѕС‚Сѓ РёР·РЅР°С‡Р°Р»СЊРЅРѕ
      initialChildSize: 0.5, // РќР°С‡Р°Р»СЊРЅР°СЏ РІС‹СЃРѕС‚Р° (50% РѕС‚ РґРѕСЃС‚СѓРїРЅРѕР№)
      minChildSize: 0.2, // РњРёРЅРёРјР°Р»СЊРЅР°СЏ РІС‹СЃРѕС‚Р°
      maxChildSize: 0.8, // РњР°РєСЃРёРјР°Р»СЊРЅР°СЏ РІС‹СЃРѕС‚Р°
      builder: (context, scrollController) {
        return Container(
          // Р”РѕР±Р°РІР»СЏРµРј СЃРєСЂСѓРіР»РµРЅРЅС‹Рµ СѓРіР»С‹ СЃРІРµСЂС…Сѓ Рё С„РѕРЅ
          decoration: const BoxDecoration(
            color: Colors.white, // РР»Рё С†РІРµС‚ С„РѕРЅР° РІР°С€РµРіРѕ РїСЂРёР»РѕР¶РµРЅРёСЏ
            borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
          ),
          child: Column(
            children: [
              // РЁР°РїРєР° Р»РёСЃС‚Р°: Р—Р°РіРѕР»РѕРІРѕРє Рё РєРЅРѕРїРєР° Р·Р°РєСЂС‹С‚РёСЏ
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      title, // Р—Р°РіРѕР»РѕРІРѕРє Р»РёСЃС‚Р° СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ
                      style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
                    ),
                    // РљРЅРѕРїРєР° Р·Р°РєСЂС‹С‚РёСЏ Р»РёСЃС‚Р°
                    IconButton(
                      icon: const Icon(Icons.close),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ),
              // Р Р°Р·РґРµР»РёС‚РµР»СЊ РїРѕРґ С€Р°РїРєРѕР№
              CustomDivider(),
              // РџРѕР»СЏ РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ
              Expanded( // Expanded РЅСѓР¶РµРЅ, С‡С‚РѕР±С‹ СЃРµРєС†РёСЏ СЃ РїРѕР»СЏРјРё РјРѕРіР»Р° СЃРєСЂРѕР»Р»РёС‚СЊСЃСЏ
                child: ListView( // РСЃРїРѕР»СЊР·СѓРµРј ListView РґР»СЏ РїСЂРѕРєСЂСѓС‡РёРІР°РµРјС‹С… РїРѕР»РµР№ С„РѕСЂРјС‹
                  controller: scrollController, // РџСЂРёРІСЏР·С‹РІР°РµРј РєРѕРЅС‚СЂРѕР»Р»РµСЂ СЃРєСЂРѕР»Р»Р° Р»РёСЃС‚Р°
                  padding: const EdgeInsets.all(16.0), // РћС‚СЃС‚СѓРїС‹ РІРѕРєСЂСѓРі РїРѕР»РµР№ С„РѕСЂРјС‹
                  children: fields
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_floating_action_button.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';

class CustomFloatingActionButton extends StatelessWidget {
  const CustomFloatingActionButton({
    super.key,
    required this.onPressed,
  });

  final void Function() onPressed;

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      backgroundColor: CustomColors.primary,
      foregroundColor: CustomColors.onPrimary,
      shape: const CircleBorder(),
      elevation: 4.0,
      onPressed: onPressed,
      child: const Icon(Icons.add),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_show_modal_bottom_sheet.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_list_view/custom_list_view_separated.dart';
import 'custom_picker_fields/picker_item.dart';
import 'custom_list_view/custom_list_item.dart';

Future<PickerItem<T>?> customShowModalBottomSheet<T>({
  required BuildContext context,
  required String title,
  required String type,
  required List<PickerItem<T>> items,
}) async {
  return showModalBottomSheet<PickerItem<T>>(
    context: context,
    isScrollControlled: true,
    backgroundColor: Colors.white,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
    ),
    builder: (context) {
      return SafeArea(
        child: _BottomSheetContent<T>(
          title: title,
          items: items,
          type: type,
        ),
      );
    },
  );
}

class _BottomSheetContent<T> extends StatefulWidget {
  final String title;
  final String type;
  final List<PickerItem<T>> items;

  const _BottomSheetContent({
    required this.title,
    required this.items,
    required this.type,
  });

  @override
  State<_BottomSheetContent<T>> createState() => _BottomSheetContentState<T>();
}

class _BottomSheetContentState<T> extends State<_BottomSheetContent<T>> {
  late List<PickerItem<T>> filteredItems;
  final TextEditingController _searchController = TextEditingController();
  final PageController _pageController = PageController();

  // !!! РР—РњР•РќР•РќРћ: РЈРІРµР»РёС‡РµРЅРѕ РєРѕР»РёС‡РµСЃС‚РІРѕ СЌР»РµРјРµРЅС‚РѕРІ РЅР° СЃС‚СЂР°РЅРёС†Рµ РґР»СЏ 4 СЃС‚СЂРѕРє
  static const int itemsPerPage = 16; // РР·РјРµРЅРµРЅРѕ СЃ 12 РЅР° 16 РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ 4 СЃС‚СЂРѕРє (4 * 4 = 16)

  @override
  void initState() {
    super.initState();
    filteredItems = widget.items;
    _searchController.addListener(_onSearchChanged);
  }

  @override
  void dispose() {
    _searchController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  void _onSearchChanged() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      filteredItems = widget.items
          .where((item) => item.displayValue.toLowerCase().contains(query))
          .toList();
    });

    final pageCount = (filteredItems.length / itemsPerPage).ceil();
    if (_pageController.hasClients) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (_pageController.hasClients) {
          // РџСЂРѕРІРµСЂСЏРµРј, РЅСѓР¶РЅРѕ Р»Рё РїРµСЂРµРєР»СЋС‡РёС‚СЊСЃСЏ РЅР° РїРµСЂРІСѓСЋ СЃС‚СЂР°РЅРёС†Сѓ
          if (_pageController.page != null && _pageController.page! >= pageCount && pageCount > 0) {
            _pageController.jumpToPage(0);
          } else if (pageCount == 0 && _pageController.page != 0) {
            // Р•СЃР»Рё РїРѕСЃР»Рµ С„РёР»СЊС‚СЂР°С†РёРё РЅРµС‚ СЌР»РµРјРµРЅС‚РѕРІ, РїРµСЂРµС…РѕРґРёРј РЅР° 0 СЃС‚СЂР°РЅРёС†Сѓ
            _pageController.jumpToPage(0);
          }
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final int pageCount = (filteredItems.length / itemsPerPage).ceil();

    return DraggableScrollableSheet(
      expand: false,
      initialChildSize: 0.7,
      minChildSize: 0.4,
      maxChildSize: 0.95,
      builder: (context, scrollController) {
        return ListView(
          controller: scrollController,
          padding: const EdgeInsets.all(16),
          children: [
            // РЁР°РїРєР°
            Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.of(context).pop(),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    widget.title,
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),

            // РџРѕР»Рµ РїРѕРёСЃРєР°
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                hintText: 'РџРѕРёСЃРє...',
                prefixIcon: const Icon(Icons.search),
                filled: true,
                fillColor: Colors.grey[200],
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                  borderSide: BorderSide.none,
                ),
              ),
            ),
            const SizedBox(height: 16),

            // РћСЃРЅРѕРІРЅРѕР№ РєРѕРЅС‚РµРЅС‚
            if (filteredItems.isEmpty)
              const Padding(
                padding: EdgeInsets.only(top: 50),
                child: Center(child: Text('РќРёС‡РµРіРѕ РЅРµ РЅР°Р№РґРµРЅРѕ')),
              )
            else
              SizedBox(
                // !!! РР—РњР•РќР•РќРћ: РЈРІРµР»РёС‡РµРЅР° РІС‹СЃРѕС‚Р° РґР»СЏ СЂР°Р·РјРµС‰РµРЅРёСЏ 4 СЃС‚СЂРѕРє
                height: 400, // РЈРІРµР»РёС‡РµРЅРѕ СЃ 300 РґР»СЏ СЂР°Р·РјРµС‰РµРЅРёСЏ 4 СЃС‚СЂРѕРє
                child: widget.type == 'icon' ? PageView.builder(
                  key: ValueKey(filteredItems.length),
                  controller: _pageController,
                  itemCount: pageCount,
                  itemBuilder: (context, pageIndex) {
                    final start = pageIndex * itemsPerPage;
                    final end = (start + itemsPerPage).clamp(0, filteredItems.length);
                    final pageItems = filteredItems.sublist(start, end);

                    return GridView.count(
                      crossAxisCount: 4,
                      crossAxisSpacing: 16,
                      mainAxisSpacing: 8,
                      padding: EdgeInsets.zero,
                      physics: const NeverScrollableScrollPhysics(),
                      childAspectRatio: 0.9, // РћСЃС‚Р°РІР»СЏРµРј РґР»СЏ РґРѕСЃС‚Р°С‚РѕС‡РЅРѕР№ РІС‹СЃРѕС‚С‹ СЌР»РµРјРµРЅС‚Р°
                      children: pageItems.map((item) {
                        return _IconWithTextPickerItem<T>(
                              item: item,
                              onTap: () => Navigator.pop(context, item),
                        );
                      }).toList(),
                    );
                  },
                ) : CustomListViewSeparated( //
                  items: filteredItems, // РџРµСЂРµРґР°РµРј СЃРїРёСЃРѕРє РѕР±СЉРµРєС‚РѕРІ Account
                  itemBuilder: (context, item) { // item Р·РґРµСЃСЊ РёРјРµРµС‚ С‚РёРї Account
                    return CustomListItem(
                      titleText: item.displayValue, // РСЃРїРѕР»СЊР·СѓРµРј name РёР· РјРѕРґРµР»Рё Account
                      onTap: () => Navigator.pop(context, item),
                    );
                  },
                ) ,
              ),
            const SizedBox(height: 12),

            if (pageCount > 1)
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(
                  pageCount,
                      (index) => AnimatedBuilder(
                    animation: _pageController,
                    builder: (context, child) {
                      double selected = 0;
                      if (_pageController.hasClients && _pageController.page != null) {
                        selected = (_pageController.page! - index).abs();
                      }
                      return Container(
                        margin: const EdgeInsets.symmetric(horizontal: 4),
                        width: selected < 0.5 ? 10 : 6,
                        height: 6,
                        decoration: BoxDecoration(
                          color: selected < 0.5 ? Colors.red : Colors.grey,
                          borderRadius: BorderRadius.circular(3),
                        ),
                      );
                    },
                  ),
                ),
              ),
          ],
        );
      },
    );
  }
}

class _IconWithTextPickerItem<T> extends StatelessWidget {
  final PickerItem<T> item;
  final VoidCallback onTap;

  const _IconWithTextPickerItem({required this.item, required this.onTap, super.key});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        children: [
          CircleAvatar(
            radius: 30,
            backgroundColor: Colors.grey[300],
            child: item.imageUrl != null
                ? ClipOval(child: Image.network(item.imageUrl!, fit: BoxFit.cover, width: 50, height: 50))
                : const Icon(Icons.folder, size: 30),
          ),
          const SizedBox(height: 8),
          Text(
            item.displayValue,
            style: const TextStyle(fontSize: 12),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }
}

class _LinePickerItem<T> extends StatelessWidget {
  final PickerItem<T> item;
  final VoidCallback onTap;

  const _LinePickerItem({required this.item, required this.onTap, super.key});

  @override
  Widget build(BuildContext context) {
    return CustomListItem(
      onTap: onTap,
      titleText: item.displayValue,
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_text_field.dart =====

import 'package:flutter/material.dart';

class CustomTextField extends StatelessWidget {
  final TextEditingController controller;
  final String hintText;
  final TextInputType? keyboardType;

  const CustomTextField({
    super.key,
    required this.controller,
    required this.hintText,
    this.keyboardType,
  });

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: controller,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        hintText: hintText,
        border: const OutlineInputBorder(),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_text_form_field.dart =====

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../../core/theme/custom_colors.dart';

class CustomTextFormField extends StatelessWidget {
  final String labelText;
  final String? initialValue;
  final Function(String)? onChanged;
  final TextInputType keyboardType;
  final List<TextInputFormatter> inputFormatters;
  final dynamic controller;
  final String? Function(String?)? validator; // Р”РѕР±Р°РІР»СЏРµРј РїР°СЂР°РјРµС‚СЂ validator
  final dynamic suffixText;

  const CustomTextFormField({
    super.key,
    required this.labelText,
    this.initialValue,
    this.onChanged,
    this.keyboardType = TextInputType.text,
    this.inputFormatters = const [],
    this.controller,
    this.validator, // РџСЂРёРЅРёРјР°РµРј validator РІ РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂРµ
    this.suffixText,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      initialValue: initialValue,
      onChanged: onChanged,
      controller: controller,
      inputFormatters: inputFormatters,
      keyboardType: keyboardType,
      validator: validator, // РџРµСЂРµРґР°РµРј validator РІРѕ РІРЅСѓС‚СЂРµРЅРЅРёР№ TextFormField
      decoration: InputDecoration(
        labelText: labelText,
        filled: true,
        fillColor: CustomColors.mainLightGrey,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide.none,
        ),
        suffixText: suffixText,
        labelStyle: TextStyle(color: CustomColors.mainDarkGrey),
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
      ),
      // TODO: Р”РѕР±Р°РІРёС‚СЊ onChanged РёР»Рё controller РґР»СЏ РѕР±СЂР°Р±РѕС‚РєРё РІРІРѕРґР°
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_buttons\custom_primary_button.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';

// Basic button widget for primary actions
class CustomPrimaryButton extends StatelessWidget {
  final String text;
  final VoidCallback onPressed;

  const CustomPrimaryButton({
    required this.text,
    required this.onPressed,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: CustomColors.mainBlue,
          foregroundColor: CustomColors.mainWhite,
          padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        ),
        onPressed: onPressed,
        child: Text(text, style: const TextStyle(fontSize: 16)),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_list_view\custom_list_item.dart =====

import 'package:flutter/material.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє СЃС‚РёР»СЏРј Рё С†РІРµС‚Р°Рј РїСЂР°РІРёР»СЊРЅС‹Рµ
import '../../../core/theme/custom_text_styles.dart';
import '../../../core/theme/custom_colors.dart';

/// A reusable widget for displaying a standard list item with consistent styling.
///
/// It provides a structure similar to ListTile. It accepts raw text for
/// title and subtitle to facilitate unified styling.
class CustomListItem extends StatelessWidget {
  /// Widget to display at the start of the item (e.g., an Icon or Avatar).
  final Widget? leading;

  // !!! РР—РњР•РќР•РќРћ: РџСЂРёРЅРёРјР°РµРј String РґР»СЏ С‚РµРєСЃС‚Р° Р·Р°РіРѕР»РѕРІРєР°
  /// Text for the main title.
  final String titleText; // РР·РјРµРЅРµРЅРѕ СЃ Widget РЅР° String

  // !!! РР—РњР•РќР•РќРћ: РџСЂРёРЅРёРјР°РµРј String? РґР»СЏ С‚РµРєСЃС‚Р° РїРѕРґР·Р°РіРѕР»РѕРІРєР°
  /// Text for the subtitle (optional).
  final String? subtitleText; // РР·РјРµРЅРµРЅРѕ СЃ String? (РєРѕС‚РѕСЂС‹Р№ РїРµСЂРµРґР°РІР°Р»СЃСЏ РІ Text) РЅР° String? (СЃР°Рј С‚РµРєСЃС‚)


  /// Widget to display at the end of the item (e.g., balance, icon).
  final Widget? trailing;

  /// Callback function when the item is tapped.
  final VoidCallback? onTap;

  /// Optional padding for the item content.
  final EdgeInsetsGeometry? contentPadding;

  const CustomListItem({
    super.key,
    this.leading,
    required this.titleText, // РўРµРїРµСЂСЊ РѕР±СЏР·Р°С‚РµР»СЊРЅС‹Р№ String
    this.subtitleText, // РўРµРїРµСЂСЊ РѕРїС†РёРѕРЅР°Р»СЊРЅС‹Р№ String
    this.trailing,
    this.onTap,
    this.contentPadding,
  });

  @override
  Widget build(BuildContext context) {
    // РСЃРїРѕР»СЊР·СѓРµРј ListTile РєР°Рє РѕСЃРЅРѕРІСѓ
    return ListTile(
      leading: leading, // Leading РѕСЃС‚Р°РµС‚СЃСЏ РІРёРґР¶РµС‚РѕРј (РѕРїС†РёРѕРЅР°Р»СЊРЅС‹Рј)
      // !!! РРЎРџРћР›Р¬Р—РЈР•Рњ Text() Рё РїСЂРёРјРµРЅСЏРµРј РµРґРёРЅС‹Р№ СЃС‚РёР»СЊ Рє titleText
      title: Text(
        titleText,
        // РџСЂРёРјРµРЅСЏРµРј СЃС‚Р°РЅРґР°СЂС‚РЅС‹Р№ СЃС‚РёР»СЊ РґР»СЏ Р·Р°РіРѕР»РѕРІРєР° РёР· AppTextStyles
        // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ: normalMedium, Р¶РёСЂРЅРѕСЃС‚СЊ 500
        style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.w500),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
      // !!! РРЎРџРћР›Р¬Р—РЈР•Рњ Text() Рё РїСЂРёРјРµРЅСЏРµРј РµРґРёРЅС‹Р№ СЃС‚РёР»СЊ Рє subtitleText (РµСЃР»Рё РѕРЅ РµСЃС‚СЊ)
      subtitle: subtitleText != null && subtitleText!.isNotEmpty // РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ С‚РµРєСЃС‚ РїРѕРґР·Р°РіРѕР»РѕРІРєР° РЅРµ null Рё РЅРµ РїСѓСЃС‚РѕР№
          ? Text(
        subtitleText!,
        // РџСЂРёРјРµРЅСЏРµРј СЃС‚Р°РЅРґР°СЂС‚РЅС‹Р№ СЃС‚РёР»СЊ РґР»СЏ РїРѕРґР·Р°РіРѕР»РѕРІРєР°
        // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ: normalSmall, СЃРµСЂС‹Р№ С†РІРµС‚
        style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey),
        maxLines: 2,
        overflow: TextOverflow.ellipsis,
      )
          : null, // Р•СЃР»Рё С‚РµРєСЃС‚Р° РЅРµС‚, РїРµСЂРµРґР°РµРј null РІ subtitle ListTile
      trailing: trailing, // Trailing РѕСЃС‚Р°РµС‚СЃСЏ РІРёРґР¶РµС‚РѕРј (РѕРїС†РёРѕРЅР°Р»СЊРЅС‹Рј)
      onTap: onTap,

      // РџСЂРёРјРµРЅСЏРµРј СЃС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РѕС‚СЃС‚СѓРї СЃРѕРґРµСЂР¶РёРјРѕРіРѕ РёР»Рё РґСЂСѓРіРѕР№ СЃС‚РёР»СЊ ListTile
      contentPadding: contentPadding ?? const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      // dense: true, // РџСЂРёРјРµСЂ Р±РѕР»РµРµ РєРѕРјРїР°РєС‚РЅРѕРіРѕ РІРёРґР°
      // tileColor: Colors.white, // РџСЂРёРјРµСЂ С†РІРµС‚Р° С„РѕРЅР° СЌР»РµРјРµРЅС‚Р°
      // visualDensity: VisualDensity.compact, // РџСЂРёРјРµСЂ РІРёР·СѓР°Р»СЊРЅРѕР№ РїР»РѕС‚РЅРѕСЃС‚Рё
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_list_view\custom_list_view_separated.dart =====

import 'package:flutter/material.dart';
import '../custom_divider.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№

/// A reusable ListView.separated widget with a custom separator and padding.
///
/// It requires a list of [items] (any type T) and an [itemBuilder] function
/// to build the widget for each item. It does not include an [Expanded] wrapper.
class CustomListViewSeparated<T> extends StatelessWidget {
  /// The list of data items to display.
  final List<T> items;

  /// A builder function that creates a widget for each item.
  /// The builder receives the context and the item data (type T).
  final Widget Function(BuildContext context, T item) itemBuilder;

  /// Optional padding for the ListView itself.
  final EdgeInsetsGeometry padding;


  const CustomListViewSeparated({
    super.key,
    required this.items,
    required this.itemBuilder,
    this.padding = const EdgeInsets.all(0), // РћС‚СЃС‚СѓРї РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
  });

  @override
  Widget build(BuildContext context) {
    // РќРµ РѕР±РѕСЂР°С‡РёРІР°РµРј РІ Expanded Р·РґРµСЃСЊ
    return ListView.separated(
      padding: padding, // РСЃРїРѕР»СЊР·СѓРµРј РїРµСЂРµРґР°РЅРЅС‹Р№ РѕС‚СЃС‚СѓРї
      itemCount: items.length, // РљРѕР»РёС‡РµСЃС‚РІРѕ СЌР»РµРјРµРЅС‚РѕРІ
      separatorBuilder: (_, __) => const CustomDivider(), // Р Р°Р·РґРµР»РёС‚РµР»СЊ
      itemBuilder: (context, index) {
        final item = items[index];
        // РСЃРїРѕР»СЊР·СѓРµРј РїРµСЂРµРґР°РЅРЅСѓСЋ С„СѓРЅРєС†РёСЋ itemBuilder РґР»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РІРёРґР¶РµС‚Р°
        return itemBuilder(context, item);
      },
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_picker_fields\custom_primary_picker_field.dart =====

import 'package:flutter/material.dart';
import '../../../core/theme/custom_colors.dart';
import '../../../core/theme/custom_text_styles.dart';

class CustomPrimaryPickerField extends StatelessWidget {
  final BuildContext context;
  final IconData icon;
  final String currentValueDisplay;
  final VoidCallback onTap;
  final double? width;

  const CustomPrimaryPickerField({super.key,
    required this.currentValueDisplay,
    required this.onTap,
    this.width,
    required this.context,
    required this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Container(
        width: width,
        constraints: const BoxConstraints(minHeight: 64),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
        alignment: Alignment.centerLeft,
        decoration: BoxDecoration(
          color: CustomColors.mainLightGrey,
          borderRadius: BorderRadius.circular(8),
        ),
        child:
        Text(
          currentValueDisplay,
          style: CustomTextStyles.normalMedium,
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_picker_fields\custom_secondary_picker_field.dart =====

import 'package:flutter/material.dart';
import '../../../core/theme/custom_colors.dart';
import '../../../core/theme/custom_text_styles.dart';

class CustomSecondaryPickerField extends StatelessWidget {
  final BuildContext context;
  final IconData icon;
  final String currentValueDisplay;
  final VoidCallback onTap;
  final double? width;

  const CustomSecondaryPickerField({super.key,
    required this.currentValueDisplay,
    required this.onTap,
    this.width,
    required this.context,
    required this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Container(
        width: width,
        constraints: const BoxConstraints(minHeight: 48),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: CustomColors.mainLightGrey,
          borderRadius: BorderRadius.circular(8),
        ),
        child:
        Text(
          currentValueDisplay,
          style: CustomTextStyles.normalMedium,
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\common\widgets\custom_picker_fields\picker_item.dart =====

class PickerItem<T> {
  final T id;
  final String displayValue;
  final String? imageUrl;

  PickerItem({
    required this.id,
    required this.displayValue,
    this.imageUrl,
  });
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\api\api_service.dart =====

// lib/core/services/api_service.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:dio/dio.dart';
import '../api/dio_provider.dart';

final apiServiceProvider = Provider<ApiService>((ref) {
  final dio = ref.watch(dioProvider);
  return ApiService(dio);
});

class ApiService {
  final Dio _dio;

  ApiService(this._dio);

  Future<Response> get(String endpoint) async {
    return await _dio.get(endpoint);
  }

  Future<Response> post(String endpoint, Map<String, dynamic> data) async {
    return await _dio.post(endpoint, data: data);
  }

  Future<Response> put(String endpoint, Map<String, dynamic> data) async {
    return await _dio.put(endpoint, data: data);
  }

  Future<Response> delete(String endpoint) async {
    return await _dio.delete(endpoint);
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\api\dio_provider.dart =====

import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart'; // Import РґР»СЏ kDebugMode Рё LogInterceptor

import '../services/secure_storage_provider.dart';

final dioProvider = Provider<Dio>((ref) {
  final dio = Dio(BaseOptions(
    baseUrl: 'http://10.0.2.2:8000',
    headers: {'Accept': 'application/json'},
  ));

  dio.interceptors.add(InterceptorsWrapper(
    onRequest: (options, handler) async {
      final storage = ref.read(secureStorageProvider); // рџџў РІРѕС‚ РєР»СЋС‡
      final token = await storage.read(key: 'token');

      debugPrint('рџЄЄ Dio Token: $token');

      if (token != null && token.isNotEmpty) {
        options.headers['Authorization'] = 'Bearer $token';
      }

      return handler.next(options);
    },
  ));

  if (kDebugMode) {
    dio.interceptors.add(LogInterceptor());
  }

  return dio;
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\db\app_database.dart =====

import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:flutter/foundation.dart'; // С‚РѕР»СЊРєРѕ РґР»СЏ debugPrint
import 'package:flutter_app_1/core/db/pending_requests_table.dart';
import 'package:flutter_app_1/core/db/transactions_table.dart';
import 'package:flutter_app_1/core/db/user_settings_table.dart';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
import '../../features/transactions/domain/models/transaction_entity.dart';
import '../../features/transactions/utils/transaction_mapper.dart';

part 'app_database.g.dart';

@DriftDatabase(
  tables: [TransactionsTable, PendingRequests, UserSettings],
)
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1; // рџљЁ

  @override
  MigrationStrategy get migration => MigrationStrategy(
      onCreate: (Migrator m) async {
        await m.createAll();
      },
      // onUpgrade: (Migrator m, int from, int to) async {
      //   if (from < 4) {
      //     await m.addColumn(transactionsTable, transactionsTable.serverId);
      //   }
      //   if (from == 1) {
      //     await m.createTable(userSettings); // РґРѕР±Р°РІРёР»Рё РЅРѕРІСѓСЋ С‚Р°Р±Р»РёС†Сѓ
      //   }
      // },
      beforeOpen: (details) async {
        debugPrint('рџ“‚ Р‘Р°Р·Р° РѕС‚РєСЂС‹С‚Р°. Version: ${details.versionBefore} в†’ ${details.versionNow}');
      }
  );

  // в–ё Transactions
  Future<void> insertTransaction(TransactionEntity entity, {required int userId}) async {
    final companion = TransactionMapper.toDb(entity, userId: userId);
    debugPrint('рџ’ѕ РЎРѕС…СЂР°РЅСЏСЋ РІ Р»РѕРєР°Р»СЊРЅСѓСЋ Р‘Р” С‚СЂР°РЅР·Р°РєС†РёСЋ: ${entity.id}');
    await into(transactionsTable).insertOnConflictUpdate(companion);
  }

  Future<void> printAllTransactions() async {
    final allTransactions = await select(transactionsTable).get();
    for (var txn in allTransactions) {
      debugPrint('рџ“ќ РўСЂР°РЅР·Р°РєС†РёСЏ РІ Р±Р°Р·Рµ: ${txn.toString()}');
    }
  }



  Future<List<TransactionsTableData>> getAllTransactions() =>
      select(transactionsTable).get();

  Stream<List<TransactionsTableData>> watchAllTransactions() =>
      select(transactionsTable).watch();

  Future<bool> updateTransaction(TransactionsTableData txn, {required int userId}) =>
      update(transactionsTable).replace(txn);

  Future<int> deleteTransactionById(int id) =>
      (delete(transactionsTable)..where((t) => t.id.equals(id))).go();

  // в–ё Pending Requests
  Future<int> insertPendingRequest(PendingRequestsCompanion req) =>
      into(pendingRequests).insert(req);

  Future<List<PendingRequest>> getAllPendingRequests() =>
      select(pendingRequests).get();

  Future<void> deletePendingRequestById(int id) =>
      (delete(pendingRequests)..where((r) => r.id.equals(id))).go();

  Future<void> clearPendingRequests() =>
      delete(pendingRequests).go();

  // в–ё User Settings
  Future<void> saveUserSetting(String key, String value) =>
      into(userSettings).insertOnConflictUpdate(UserSetting(key: key, value: value));

  Stream<String?> watchUserSetting(String key) =>
      (select(userSettings)..where((tbl) => tbl.key.equals(key)))
          .watchSingleOrNull()
          .map((row) => row?.value);
}


LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dir = await getApplicationDocumentsDirectory();
    final dbPath = p.join(dir.path, 'app.db');
    return NativeDatabase(File(dbPath));
  });
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\db\app_database.g.dart =====

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_database.dart';

// ignore_for_file: type=lint
class $TransactionsTableTable extends TransactionsTable
    with TableInfo<$TransactionsTableTable, TransactionsTableData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TransactionsTableTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    false,
    hasAutoIncrement: true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'PRIMARY KEY AUTOINCREMENT',
    ),
  );
  static const VerificationMeta _serverIdMeta = const VerificationMeta(
    'serverId',
  );
  @override
  late final GeneratedColumn<int> serverId = GeneratedColumn<int>(
    'server_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _userIdMeta = const VerificationMeta('userId');
  @override
  late final GeneratedColumn<int> userId = GeneratedColumn<int>(
    'user_id',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _transactionTypeMeta = const VerificationMeta(
    'transactionType',
  );
  @override
  late final GeneratedColumn<String> transactionType = GeneratedColumn<String>(
    'transaction_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _transactionCategoryIdMeta =
      const VerificationMeta('transactionCategoryId');
  @override
  late final GeneratedColumn<int> transactionCategoryId = GeneratedColumn<int>(
    'transaction_category_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _amountMeta = const VerificationMeta('amount');
  @override
  late final GeneratedColumn<double> amount = GeneratedColumn<double>(
    'amount',
    aliasedName,
    false,
    type: DriftSqlType.double,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _accountIdMeta = const VerificationMeta(
    'accountId',
  );
  @override
  late final GeneratedColumn<int> accountId = GeneratedColumn<int>(
    'account_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _projectIdMeta = const VerificationMeta(
    'projectId',
  );
  @override
  late final GeneratedColumn<int> projectId = GeneratedColumn<int>(
    'project_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dateMeta = const VerificationMeta('date');
  @override
  late final GeneratedColumn<DateTime> date = GeneratedColumn<DateTime>(
    'date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _fromAccountIdMeta = const VerificationMeta(
    'fromAccountId',
  );
  @override
  late final GeneratedColumn<int> fromAccountId = GeneratedColumn<int>(
    'from_account_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _toAccountIdMeta = const VerificationMeta(
    'toAccountId',
  );
  @override
  late final GeneratedColumn<int> toAccountId = GeneratedColumn<int>(
    'to_account_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    serverId,
    userId,
    transactionType,
    transactionCategoryId,
    amount,
    accountId,
    projectId,
    description,
    date,
    isActive,
    fromAccountId,
    toAccountId,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'transactions_table';
  @override
  VerificationContext validateIntegrity(
    Insertable<TransactionsTableData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('server_id')) {
      context.handle(
        _serverIdMeta,
        serverId.isAcceptableOrUnknown(data['server_id']!, _serverIdMeta),
      );
    }
    if (data.containsKey('user_id')) {
      context.handle(
        _userIdMeta,
        userId.isAcceptableOrUnknown(data['user_id']!, _userIdMeta),
      );
    } else if (isInserting) {
      context.missing(_userIdMeta);
    }
    if (data.containsKey('transaction_type')) {
      context.handle(
        _transactionTypeMeta,
        transactionType.isAcceptableOrUnknown(
          data['transaction_type']!,
          _transactionTypeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_transactionTypeMeta);
    }
    if (data.containsKey('transaction_category_id')) {
      context.handle(
        _transactionCategoryIdMeta,
        transactionCategoryId.isAcceptableOrUnknown(
          data['transaction_category_id']!,
          _transactionCategoryIdMeta,
        ),
      );
    }
    if (data.containsKey('amount')) {
      context.handle(
        _amountMeta,
        amount.isAcceptableOrUnknown(data['amount']!, _amountMeta),
      );
    } else if (isInserting) {
      context.missing(_amountMeta);
    }
    if (data.containsKey('account_id')) {
      context.handle(
        _accountIdMeta,
        accountId.isAcceptableOrUnknown(data['account_id']!, _accountIdMeta),
      );
    }
    if (data.containsKey('project_id')) {
      context.handle(
        _projectIdMeta,
        projectId.isAcceptableOrUnknown(data['project_id']!, _projectIdMeta),
      );
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('date')) {
      context.handle(
        _dateMeta,
        date.isAcceptableOrUnknown(data['date']!, _dateMeta),
      );
    } else if (isInserting) {
      context.missing(_dateMeta);
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('from_account_id')) {
      context.handle(
        _fromAccountIdMeta,
        fromAccountId.isAcceptableOrUnknown(
          data['from_account_id']!,
          _fromAccountIdMeta,
        ),
      );
    }
    if (data.containsKey('to_account_id')) {
      context.handle(
        _toAccountIdMeta,
        toAccountId.isAcceptableOrUnknown(
          data['to_account_id']!,
          _toAccountIdMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TransactionsTableData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return TransactionsTableData(
      id:
          attachedDatabase.typeMapping.read(
            DriftSqlType.int,
            data['${effectivePrefix}id'],
          )!,
      serverId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}server_id'],
      ),
      userId:
          attachedDatabase.typeMapping.read(
            DriftSqlType.int,
            data['${effectivePrefix}user_id'],
          )!,
      transactionType:
          attachedDatabase.typeMapping.read(
            DriftSqlType.string,
            data['${effectivePrefix}transaction_type'],
          )!,
      transactionCategoryId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}transaction_category_id'],
      ),
      amount:
          attachedDatabase.typeMapping.read(
            DriftSqlType.double,
            data['${effectivePrefix}amount'],
          )!,
      accountId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}account_id'],
      ),
      projectId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}project_id'],
      ),
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      date:
          attachedDatabase.typeMapping.read(
            DriftSqlType.dateTime,
            data['${effectivePrefix}date'],
          )!,
      isActive:
          attachedDatabase.typeMapping.read(
            DriftSqlType.bool,
            data['${effectivePrefix}is_active'],
          )!,
      fromAccountId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}from_account_id'],
      ),
      toAccountId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}to_account_id'],
      ),
    );
  }

  @override
  $TransactionsTableTable createAlias(String alias) {
    return $TransactionsTableTable(attachedDatabase, alias);
  }
}

class TransactionsTableData extends DataClass
    implements Insertable<TransactionsTableData> {
  final int id;
  final int? serverId;
  final int userId;
  final String transactionType;
  final int? transactionCategoryId;
  final double amount;
  final int? accountId;
  final int? projectId;
  final String? description;
  final DateTime date;
  final bool isActive;
  final int? fromAccountId;
  final int? toAccountId;
  const TransactionsTableData({
    required this.id,
    this.serverId,
    required this.userId,
    required this.transactionType,
    this.transactionCategoryId,
    required this.amount,
    this.accountId,
    this.projectId,
    this.description,
    required this.date,
    required this.isActive,
    this.fromAccountId,
    this.toAccountId,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    if (!nullToAbsent || serverId != null) {
      map['server_id'] = Variable<int>(serverId);
    }
    map['user_id'] = Variable<int>(userId);
    map['transaction_type'] = Variable<String>(transactionType);
    if (!nullToAbsent || transactionCategoryId != null) {
      map['transaction_category_id'] = Variable<int>(transactionCategoryId);
    }
    map['amount'] = Variable<double>(amount);
    if (!nullToAbsent || accountId != null) {
      map['account_id'] = Variable<int>(accountId);
    }
    if (!nullToAbsent || projectId != null) {
      map['project_id'] = Variable<int>(projectId);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['date'] = Variable<DateTime>(date);
    map['is_active'] = Variable<bool>(isActive);
    if (!nullToAbsent || fromAccountId != null) {
      map['from_account_id'] = Variable<int>(fromAccountId);
    }
    if (!nullToAbsent || toAccountId != null) {
      map['to_account_id'] = Variable<int>(toAccountId);
    }
    return map;
  }

  TransactionsTableCompanion toCompanion(bool nullToAbsent) {
    return TransactionsTableCompanion(
      id: Value(id),
      serverId:
          serverId == null && nullToAbsent
              ? const Value.absent()
              : Value(serverId),
      userId: Value(userId),
      transactionType: Value(transactionType),
      transactionCategoryId:
          transactionCategoryId == null && nullToAbsent
              ? const Value.absent()
              : Value(transactionCategoryId),
      amount: Value(amount),
      accountId:
          accountId == null && nullToAbsent
              ? const Value.absent()
              : Value(accountId),
      projectId:
          projectId == null && nullToAbsent
              ? const Value.absent()
              : Value(projectId),
      description:
          description == null && nullToAbsent
              ? const Value.absent()
              : Value(description),
      date: Value(date),
      isActive: Value(isActive),
      fromAccountId:
          fromAccountId == null && nullToAbsent
              ? const Value.absent()
              : Value(fromAccountId),
      toAccountId:
          toAccountId == null && nullToAbsent
              ? const Value.absent()
              : Value(toAccountId),
    );
  }

  factory TransactionsTableData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TransactionsTableData(
      id: serializer.fromJson<int>(json['id']),
      serverId: serializer.fromJson<int?>(json['serverId']),
      userId: serializer.fromJson<int>(json['userId']),
      transactionType: serializer.fromJson<String>(json['transactionType']),
      transactionCategoryId: serializer.fromJson<int?>(
        json['transactionCategoryId'],
      ),
      amount: serializer.fromJson<double>(json['amount']),
      accountId: serializer.fromJson<int?>(json['accountId']),
      projectId: serializer.fromJson<int?>(json['projectId']),
      description: serializer.fromJson<String?>(json['description']),
      date: serializer.fromJson<DateTime>(json['date']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      fromAccountId: serializer.fromJson<int?>(json['fromAccountId']),
      toAccountId: serializer.fromJson<int?>(json['toAccountId']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'serverId': serializer.toJson<int?>(serverId),
      'userId': serializer.toJson<int>(userId),
      'transactionType': serializer.toJson<String>(transactionType),
      'transactionCategoryId': serializer.toJson<int?>(transactionCategoryId),
      'amount': serializer.toJson<double>(amount),
      'accountId': serializer.toJson<int?>(accountId),
      'projectId': serializer.toJson<int?>(projectId),
      'description': serializer.toJson<String?>(description),
      'date': serializer.toJson<DateTime>(date),
      'isActive': serializer.toJson<bool>(isActive),
      'fromAccountId': serializer.toJson<int?>(fromAccountId),
      'toAccountId': serializer.toJson<int?>(toAccountId),
    };
  }

  TransactionsTableData copyWith({
    int? id,
    Value<int?> serverId = const Value.absent(),
    int? userId,
    String? transactionType,
    Value<int?> transactionCategoryId = const Value.absent(),
    double? amount,
    Value<int?> accountId = const Value.absent(),
    Value<int?> projectId = const Value.absent(),
    Value<String?> description = const Value.absent(),
    DateTime? date,
    bool? isActive,
    Value<int?> fromAccountId = const Value.absent(),
    Value<int?> toAccountId = const Value.absent(),
  }) => TransactionsTableData(
    id: id ?? this.id,
    serverId: serverId.present ? serverId.value : this.serverId,
    userId: userId ?? this.userId,
    transactionType: transactionType ?? this.transactionType,
    transactionCategoryId:
        transactionCategoryId.present
            ? transactionCategoryId.value
            : this.transactionCategoryId,
    amount: amount ?? this.amount,
    accountId: accountId.present ? accountId.value : this.accountId,
    projectId: projectId.present ? projectId.value : this.projectId,
    description: description.present ? description.value : this.description,
    date: date ?? this.date,
    isActive: isActive ?? this.isActive,
    fromAccountId:
        fromAccountId.present ? fromAccountId.value : this.fromAccountId,
    toAccountId: toAccountId.present ? toAccountId.value : this.toAccountId,
  );
  TransactionsTableData copyWithCompanion(TransactionsTableCompanion data) {
    return TransactionsTableData(
      id: data.id.present ? data.id.value : this.id,
      serverId: data.serverId.present ? data.serverId.value : this.serverId,
      userId: data.userId.present ? data.userId.value : this.userId,
      transactionType:
          data.transactionType.present
              ? data.transactionType.value
              : this.transactionType,
      transactionCategoryId:
          data.transactionCategoryId.present
              ? data.transactionCategoryId.value
              : this.transactionCategoryId,
      amount: data.amount.present ? data.amount.value : this.amount,
      accountId: data.accountId.present ? data.accountId.value : this.accountId,
      projectId: data.projectId.present ? data.projectId.value : this.projectId,
      description:
          data.description.present ? data.description.value : this.description,
      date: data.date.present ? data.date.value : this.date,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      fromAccountId:
          data.fromAccountId.present
              ? data.fromAccountId.value
              : this.fromAccountId,
      toAccountId:
          data.toAccountId.present ? data.toAccountId.value : this.toAccountId,
    );
  }

  @override
  String toString() {
    return (StringBuffer('TransactionsTableData(')
          ..write('id: $id, ')
          ..write('serverId: $serverId, ')
          ..write('userId: $userId, ')
          ..write('transactionType: $transactionType, ')
          ..write('transactionCategoryId: $transactionCategoryId, ')
          ..write('amount: $amount, ')
          ..write('accountId: $accountId, ')
          ..write('projectId: $projectId, ')
          ..write('description: $description, ')
          ..write('date: $date, ')
          ..write('isActive: $isActive, ')
          ..write('fromAccountId: $fromAccountId, ')
          ..write('toAccountId: $toAccountId')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    serverId,
    userId,
    transactionType,
    transactionCategoryId,
    amount,
    accountId,
    projectId,
    description,
    date,
    isActive,
    fromAccountId,
    toAccountId,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TransactionsTableData &&
          other.id == this.id &&
          other.serverId == this.serverId &&
          other.userId == this.userId &&
          other.transactionType == this.transactionType &&
          other.transactionCategoryId == this.transactionCategoryId &&
          other.amount == this.amount &&
          other.accountId == this.accountId &&
          other.projectId == this.projectId &&
          other.description == this.description &&
          other.date == this.date &&
          other.isActive == this.isActive &&
          other.fromAccountId == this.fromAccountId &&
          other.toAccountId == this.toAccountId);
}

class TransactionsTableCompanion
    extends UpdateCompanion<TransactionsTableData> {
  final Value<int> id;
  final Value<int?> serverId;
  final Value<int> userId;
  final Value<String> transactionType;
  final Value<int?> transactionCategoryId;
  final Value<double> amount;
  final Value<int?> accountId;
  final Value<int?> projectId;
  final Value<String?> description;
  final Value<DateTime> date;
  final Value<bool> isActive;
  final Value<int?> fromAccountId;
  final Value<int?> toAccountId;
  const TransactionsTableCompanion({
    this.id = const Value.absent(),
    this.serverId = const Value.absent(),
    this.userId = const Value.absent(),
    this.transactionType = const Value.absent(),
    this.transactionCategoryId = const Value.absent(),
    this.amount = const Value.absent(),
    this.accountId = const Value.absent(),
    this.projectId = const Value.absent(),
    this.description = const Value.absent(),
    this.date = const Value.absent(),
    this.isActive = const Value.absent(),
    this.fromAccountId = const Value.absent(),
    this.toAccountId = const Value.absent(),
  });
  TransactionsTableCompanion.insert({
    this.id = const Value.absent(),
    this.serverId = const Value.absent(),
    required int userId,
    required String transactionType,
    this.transactionCategoryId = const Value.absent(),
    required double amount,
    this.accountId = const Value.absent(),
    this.projectId = const Value.absent(),
    this.description = const Value.absent(),
    required DateTime date,
    this.isActive = const Value.absent(),
    this.fromAccountId = const Value.absent(),
    this.toAccountId = const Value.absent(),
  }) : userId = Value(userId),
       transactionType = Value(transactionType),
       amount = Value(amount),
       date = Value(date);
  static Insertable<TransactionsTableData> custom({
    Expression<int>? id,
    Expression<int>? serverId,
    Expression<int>? userId,
    Expression<String>? transactionType,
    Expression<int>? transactionCategoryId,
    Expression<double>? amount,
    Expression<int>? accountId,
    Expression<int>? projectId,
    Expression<String>? description,
    Expression<DateTime>? date,
    Expression<bool>? isActive,
    Expression<int>? fromAccountId,
    Expression<int>? toAccountId,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (serverId != null) 'server_id': serverId,
      if (userId != null) 'user_id': userId,
      if (transactionType != null) 'transaction_type': transactionType,
      if (transactionCategoryId != null)
        'transaction_category_id': transactionCategoryId,
      if (amount != null) 'amount': amount,
      if (accountId != null) 'account_id': accountId,
      if (projectId != null) 'project_id': projectId,
      if (description != null) 'description': description,
      if (date != null) 'date': date,
      if (isActive != null) 'is_active': isActive,
      if (fromAccountId != null) 'from_account_id': fromAccountId,
      if (toAccountId != null) 'to_account_id': toAccountId,
    });
  }

  TransactionsTableCompanion copyWith({
    Value<int>? id,
    Value<int?>? serverId,
    Value<int>? userId,
    Value<String>? transactionType,
    Value<int?>? transactionCategoryId,
    Value<double>? amount,
    Value<int?>? accountId,
    Value<int?>? projectId,
    Value<String?>? description,
    Value<DateTime>? date,
    Value<bool>? isActive,
    Value<int?>? fromAccountId,
    Value<int?>? toAccountId,
  }) {
    return TransactionsTableCompanion(
      id: id ?? this.id,
      serverId: serverId ?? this.serverId,
      userId: userId ?? this.userId,
      transactionType: transactionType ?? this.transactionType,
      transactionCategoryId:
          transactionCategoryId ?? this.transactionCategoryId,
      amount: amount ?? this.amount,
      accountId: accountId ?? this.accountId,
      projectId: projectId ?? this.projectId,
      description: description ?? this.description,
      date: date ?? this.date,
      isActive: isActive ?? this.isActive,
      fromAccountId: fromAccountId ?? this.fromAccountId,
      toAccountId: toAccountId ?? this.toAccountId,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (serverId.present) {
      map['server_id'] = Variable<int>(serverId.value);
    }
    if (userId.present) {
      map['user_id'] = Variable<int>(userId.value);
    }
    if (transactionType.present) {
      map['transaction_type'] = Variable<String>(transactionType.value);
    }
    if (transactionCategoryId.present) {
      map['transaction_category_id'] = Variable<int>(
        transactionCategoryId.value,
      );
    }
    if (amount.present) {
      map['amount'] = Variable<double>(amount.value);
    }
    if (accountId.present) {
      map['account_id'] = Variable<int>(accountId.value);
    }
    if (projectId.present) {
      map['project_id'] = Variable<int>(projectId.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (date.present) {
      map['date'] = Variable<DateTime>(date.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (fromAccountId.present) {
      map['from_account_id'] = Variable<int>(fromAccountId.value);
    }
    if (toAccountId.present) {
      map['to_account_id'] = Variable<int>(toAccountId.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TransactionsTableCompanion(')
          ..write('id: $id, ')
          ..write('serverId: $serverId, ')
          ..write('userId: $userId, ')
          ..write('transactionType: $transactionType, ')
          ..write('transactionCategoryId: $transactionCategoryId, ')
          ..write('amount: $amount, ')
          ..write('accountId: $accountId, ')
          ..write('projectId: $projectId, ')
          ..write('description: $description, ')
          ..write('date: $date, ')
          ..write('isActive: $isActive, ')
          ..write('fromAccountId: $fromAccountId, ')
          ..write('toAccountId: $toAccountId')
          ..write(')'))
        .toString();
  }
}

class $PendingRequestsTable extends PendingRequests
    with TableInfo<$PendingRequestsTable, PendingRequest> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PendingRequestsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    false,
    hasAutoIncrement: true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'PRIMARY KEY AUTOINCREMENT',
    ),
  );
  static const VerificationMeta _methodMeta = const VerificationMeta('method');
  @override
  late final GeneratedColumn<String> method = GeneratedColumn<String>(
    'method',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _endpointMeta = const VerificationMeta(
    'endpoint',
  );
  @override
  late final GeneratedColumn<String> endpoint = GeneratedColumn<String>(
    'endpoint',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _bodyMeta = const VerificationMeta('body');
  @override
  late final GeneratedColumn<String> body = GeneratedColumn<String>(
    'body',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  @override
  List<GeneratedColumn> get $columns => [id, method, endpoint, body, createdAt];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'pending_requests';
  @override
  VerificationContext validateIntegrity(
    Insertable<PendingRequest> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('method')) {
      context.handle(
        _methodMeta,
        method.isAcceptableOrUnknown(data['method']!, _methodMeta),
      );
    } else if (isInserting) {
      context.missing(_methodMeta);
    }
    if (data.containsKey('endpoint')) {
      context.handle(
        _endpointMeta,
        endpoint.isAcceptableOrUnknown(data['endpoint']!, _endpointMeta),
      );
    } else if (isInserting) {
      context.missing(_endpointMeta);
    }
    if (data.containsKey('body')) {
      context.handle(
        _bodyMeta,
        body.isAcceptableOrUnknown(data['body']!, _bodyMeta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PendingRequest map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return PendingRequest(
      id:
          attachedDatabase.typeMapping.read(
            DriftSqlType.int,
            data['${effectivePrefix}id'],
          )!,
      method:
          attachedDatabase.typeMapping.read(
            DriftSqlType.string,
            data['${effectivePrefix}method'],
          )!,
      endpoint:
          attachedDatabase.typeMapping.read(
            DriftSqlType.string,
            data['${effectivePrefix}endpoint'],
          )!,
      body: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}body'],
      ),
      createdAt:
          attachedDatabase.typeMapping.read(
            DriftSqlType.dateTime,
            data['${effectivePrefix}created_at'],
          )!,
    );
  }

  @override
  $PendingRequestsTable createAlias(String alias) {
    return $PendingRequestsTable(attachedDatabase, alias);
  }
}

class PendingRequest extends DataClass implements Insertable<PendingRequest> {
  final int id;
  final String method;
  final String endpoint;
  final String? body;
  final DateTime createdAt;
  const PendingRequest({
    required this.id,
    required this.method,
    required this.endpoint,
    this.body,
    required this.createdAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<int>(id);
    map['method'] = Variable<String>(method);
    map['endpoint'] = Variable<String>(endpoint);
    if (!nullToAbsent || body != null) {
      map['body'] = Variable<String>(body);
    }
    map['created_at'] = Variable<DateTime>(createdAt);
    return map;
  }

  PendingRequestsCompanion toCompanion(bool nullToAbsent) {
    return PendingRequestsCompanion(
      id: Value(id),
      method: Value(method),
      endpoint: Value(endpoint),
      body: body == null && nullToAbsent ? const Value.absent() : Value(body),
      createdAt: Value(createdAt),
    );
  }

  factory PendingRequest.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PendingRequest(
      id: serializer.fromJson<int>(json['id']),
      method: serializer.fromJson<String>(json['method']),
      endpoint: serializer.fromJson<String>(json['endpoint']),
      body: serializer.fromJson<String?>(json['body']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'method': serializer.toJson<String>(method),
      'endpoint': serializer.toJson<String>(endpoint),
      'body': serializer.toJson<String?>(body),
      'createdAt': serializer.toJson<DateTime>(createdAt),
    };
  }

  PendingRequest copyWith({
    int? id,
    String? method,
    String? endpoint,
    Value<String?> body = const Value.absent(),
    DateTime? createdAt,
  }) => PendingRequest(
    id: id ?? this.id,
    method: method ?? this.method,
    endpoint: endpoint ?? this.endpoint,
    body: body.present ? body.value : this.body,
    createdAt: createdAt ?? this.createdAt,
  );
  PendingRequest copyWithCompanion(PendingRequestsCompanion data) {
    return PendingRequest(
      id: data.id.present ? data.id.value : this.id,
      method: data.method.present ? data.method.value : this.method,
      endpoint: data.endpoint.present ? data.endpoint.value : this.endpoint,
      body: data.body.present ? data.body.value : this.body,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('PendingRequest(')
          ..write('id: $id, ')
          ..write('method: $method, ')
          ..write('endpoint: $endpoint, ')
          ..write('body: $body, ')
          ..write('createdAt: $createdAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, method, endpoint, body, createdAt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PendingRequest &&
          other.id == this.id &&
          other.method == this.method &&
          other.endpoint == this.endpoint &&
          other.body == this.body &&
          other.createdAt == this.createdAt);
}

class PendingRequestsCompanion extends UpdateCompanion<PendingRequest> {
  final Value<int> id;
  final Value<String> method;
  final Value<String> endpoint;
  final Value<String?> body;
  final Value<DateTime> createdAt;
  const PendingRequestsCompanion({
    this.id = const Value.absent(),
    this.method = const Value.absent(),
    this.endpoint = const Value.absent(),
    this.body = const Value.absent(),
    this.createdAt = const Value.absent(),
  });
  PendingRequestsCompanion.insert({
    this.id = const Value.absent(),
    required String method,
    required String endpoint,
    this.body = const Value.absent(),
    this.createdAt = const Value.absent(),
  }) : method = Value(method),
       endpoint = Value(endpoint);
  static Insertable<PendingRequest> custom({
    Expression<int>? id,
    Expression<String>? method,
    Expression<String>? endpoint,
    Expression<String>? body,
    Expression<DateTime>? createdAt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (method != null) 'method': method,
      if (endpoint != null) 'endpoint': endpoint,
      if (body != null) 'body': body,
      if (createdAt != null) 'created_at': createdAt,
    });
  }

  PendingRequestsCompanion copyWith({
    Value<int>? id,
    Value<String>? method,
    Value<String>? endpoint,
    Value<String?>? body,
    Value<DateTime>? createdAt,
  }) {
    return PendingRequestsCompanion(
      id: id ?? this.id,
      method: method ?? this.method,
      endpoint: endpoint ?? this.endpoint,
      body: body ?? this.body,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (method.present) {
      map['method'] = Variable<String>(method.value);
    }
    if (endpoint.present) {
      map['endpoint'] = Variable<String>(endpoint.value);
    }
    if (body.present) {
      map['body'] = Variable<String>(body.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PendingRequestsCompanion(')
          ..write('id: $id, ')
          ..write('method: $method, ')
          ..write('endpoint: $endpoint, ')
          ..write('body: $body, ')
          ..write('createdAt: $createdAt')
          ..write(')'))
        .toString();
  }
}

class $UserSettingsTable extends UserSettings
    with TableInfo<$UserSettingsTable, UserSetting> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $UserSettingsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _keyMeta = const VerificationMeta('key');
  @override
  late final GeneratedColumn<String> key = GeneratedColumn<String>(
    'key',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _valueMeta = const VerificationMeta('value');
  @override
  late final GeneratedColumn<String> value = GeneratedColumn<String>(
    'value',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  @override
  List<GeneratedColumn> get $columns => [key, value];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'user_settings';
  @override
  VerificationContext validateIntegrity(
    Insertable<UserSetting> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('key')) {
      context.handle(
        _keyMeta,
        key.isAcceptableOrUnknown(data['key']!, _keyMeta),
      );
    } else if (isInserting) {
      context.missing(_keyMeta);
    }
    if (data.containsKey('value')) {
      context.handle(
        _valueMeta,
        value.isAcceptableOrUnknown(data['value']!, _valueMeta),
      );
    } else if (isInserting) {
      context.missing(_valueMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {key};
  @override
  UserSetting map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return UserSetting(
      key:
          attachedDatabase.typeMapping.read(
            DriftSqlType.string,
            data['${effectivePrefix}key'],
          )!,
      value:
          attachedDatabase.typeMapping.read(
            DriftSqlType.string,
            data['${effectivePrefix}value'],
          )!,
    );
  }

  @override
  $UserSettingsTable createAlias(String alias) {
    return $UserSettingsTable(attachedDatabase, alias);
  }
}

class UserSetting extends DataClass implements Insertable<UserSetting> {
  final String key;
  final String value;
  const UserSetting({required this.key, required this.value});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['key'] = Variable<String>(key);
    map['value'] = Variable<String>(value);
    return map;
  }

  UserSettingsCompanion toCompanion(bool nullToAbsent) {
    return UserSettingsCompanion(key: Value(key), value: Value(value));
  }

  factory UserSetting.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return UserSetting(
      key: serializer.fromJson<String>(json['key']),
      value: serializer.fromJson<String>(json['value']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'key': serializer.toJson<String>(key),
      'value': serializer.toJson<String>(value),
    };
  }

  UserSetting copyWith({String? key, String? value}) =>
      UserSetting(key: key ?? this.key, value: value ?? this.value);
  UserSetting copyWithCompanion(UserSettingsCompanion data) {
    return UserSetting(
      key: data.key.present ? data.key.value : this.key,
      value: data.value.present ? data.value.value : this.value,
    );
  }

  @override
  String toString() {
    return (StringBuffer('UserSetting(')
          ..write('key: $key, ')
          ..write('value: $value')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(key, value);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UserSetting &&
          other.key == this.key &&
          other.value == this.value);
}

class UserSettingsCompanion extends UpdateCompanion<UserSetting> {
  final Value<String> key;
  final Value<String> value;
  final Value<int> rowid;
  const UserSettingsCompanion({
    this.key = const Value.absent(),
    this.value = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  UserSettingsCompanion.insert({
    required String key,
    required String value,
    this.rowid = const Value.absent(),
  }) : key = Value(key),
       value = Value(value);
  static Insertable<UserSetting> custom({
    Expression<String>? key,
    Expression<String>? value,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (key != null) 'key': key,
      if (value != null) 'value': value,
      if (rowid != null) 'rowid': rowid,
    });
  }

  UserSettingsCompanion copyWith({
    Value<String>? key,
    Value<String>? value,
    Value<int>? rowid,
  }) {
    return UserSettingsCompanion(
      key: key ?? this.key,
      value: value ?? this.value,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (key.present) {
      map['key'] = Variable<String>(key.value);
    }
    if (value.present) {
      map['value'] = Variable<String>(value.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UserSettingsCompanion(')
          ..write('key: $key, ')
          ..write('value: $value, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(e);
  $AppDatabaseManager get managers => $AppDatabaseManager(this);
  late final $TransactionsTableTable transactionsTable =
      $TransactionsTableTable(this);
  late final $PendingRequestsTable pendingRequests = $PendingRequestsTable(
    this,
  );
  late final $UserSettingsTable userSettings = $UserSettingsTable(this);
  @override
  Iterable<TableInfo<Table, Object?>> get allTables =>
      allSchemaEntities.whereType<TableInfo<Table, Object?>>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
    transactionsTable,
    pendingRequests,
    userSettings,
  ];
}

typedef $$TransactionsTableTableCreateCompanionBuilder =
    TransactionsTableCompanion Function({
      Value<int> id,
      Value<int?> serverId,
      required int userId,
      required String transactionType,
      Value<int?> transactionCategoryId,
      required double amount,
      Value<int?> accountId,
      Value<int?> projectId,
      Value<String?> description,
      required DateTime date,
      Value<bool> isActive,
      Value<int?> fromAccountId,
      Value<int?> toAccountId,
    });
typedef $$TransactionsTableTableUpdateCompanionBuilder =
    TransactionsTableCompanion Function({
      Value<int> id,
      Value<int?> serverId,
      Value<int> userId,
      Value<String> transactionType,
      Value<int?> transactionCategoryId,
      Value<double> amount,
      Value<int?> accountId,
      Value<int?> projectId,
      Value<String?> description,
      Value<DateTime> date,
      Value<bool> isActive,
      Value<int?> fromAccountId,
      Value<int?> toAccountId,
    });

class $$TransactionsTableTableFilterComposer
    extends Composer<_$AppDatabase, $TransactionsTableTable> {
  $$TransactionsTableTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get serverId => $composableBuilder(
    column: $table.serverId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get userId => $composableBuilder(
    column: $table.userId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get transactionType => $composableBuilder(
    column: $table.transactionType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get transactionCategoryId => $composableBuilder(
    column: $table.transactionCategoryId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get amount => $composableBuilder(
    column: $table.amount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get accountId => $composableBuilder(
    column: $table.accountId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get projectId => $composableBuilder(
    column: $table.projectId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get date => $composableBuilder(
    column: $table.date,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get fromAccountId => $composableBuilder(
    column: $table.fromAccountId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get toAccountId => $composableBuilder(
    column: $table.toAccountId,
    builder: (column) => ColumnFilters(column),
  );
}

class $$TransactionsTableTableOrderingComposer
    extends Composer<_$AppDatabase, $TransactionsTableTable> {
  $$TransactionsTableTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get serverId => $composableBuilder(
    column: $table.serverId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get userId => $composableBuilder(
    column: $table.userId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get transactionType => $composableBuilder(
    column: $table.transactionType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get transactionCategoryId => $composableBuilder(
    column: $table.transactionCategoryId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get amount => $composableBuilder(
    column: $table.amount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get accountId => $composableBuilder(
    column: $table.accountId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get projectId => $composableBuilder(
    column: $table.projectId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get date => $composableBuilder(
    column: $table.date,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get fromAccountId => $composableBuilder(
    column: $table.fromAccountId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get toAccountId => $composableBuilder(
    column: $table.toAccountId,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$TransactionsTableTableAnnotationComposer
    extends Composer<_$AppDatabase, $TransactionsTableTable> {
  $$TransactionsTableTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get serverId =>
      $composableBuilder(column: $table.serverId, builder: (column) => column);

  GeneratedColumn<int> get userId =>
      $composableBuilder(column: $table.userId, builder: (column) => column);

  GeneratedColumn<String> get transactionType => $composableBuilder(
    column: $table.transactionType,
    builder: (column) => column,
  );

  GeneratedColumn<int> get transactionCategoryId => $composableBuilder(
    column: $table.transactionCategoryId,
    builder: (column) => column,
  );

  GeneratedColumn<double> get amount =>
      $composableBuilder(column: $table.amount, builder: (column) => column);

  GeneratedColumn<int> get accountId =>
      $composableBuilder(column: $table.accountId, builder: (column) => column);

  GeneratedColumn<int> get projectId =>
      $composableBuilder(column: $table.projectId, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get date =>
      $composableBuilder(column: $table.date, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<int> get fromAccountId => $composableBuilder(
    column: $table.fromAccountId,
    builder: (column) => column,
  );

  GeneratedColumn<int> get toAccountId => $composableBuilder(
    column: $table.toAccountId,
    builder: (column) => column,
  );
}

class $$TransactionsTableTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $TransactionsTableTable,
          TransactionsTableData,
          $$TransactionsTableTableFilterComposer,
          $$TransactionsTableTableOrderingComposer,
          $$TransactionsTableTableAnnotationComposer,
          $$TransactionsTableTableCreateCompanionBuilder,
          $$TransactionsTableTableUpdateCompanionBuilder,
          (
            TransactionsTableData,
            BaseReferences<
              _$AppDatabase,
              $TransactionsTableTable,
              TransactionsTableData
            >,
          ),
          TransactionsTableData,
          PrefetchHooks Function()
        > {
  $$TransactionsTableTableTableManager(
    _$AppDatabase db,
    $TransactionsTableTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$TransactionsTableTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$TransactionsTableTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$TransactionsTableTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<int?> serverId = const Value.absent(),
                Value<int> userId = const Value.absent(),
                Value<String> transactionType = const Value.absent(),
                Value<int?> transactionCategoryId = const Value.absent(),
                Value<double> amount = const Value.absent(),
                Value<int?> accountId = const Value.absent(),
                Value<int?> projectId = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> date = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int?> fromAccountId = const Value.absent(),
                Value<int?> toAccountId = const Value.absent(),
              }) => TransactionsTableCompanion(
                id: id,
                serverId: serverId,
                userId: userId,
                transactionType: transactionType,
                transactionCategoryId: transactionCategoryId,
                amount: amount,
                accountId: accountId,
                projectId: projectId,
                description: description,
                date: date,
                isActive: isActive,
                fromAccountId: fromAccountId,
                toAccountId: toAccountId,
              ),
          createCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<int?> serverId = const Value.absent(),
                required int userId,
                required String transactionType,
                Value<int?> transactionCategoryId = const Value.absent(),
                required double amount,
                Value<int?> accountId = const Value.absent(),
                Value<int?> projectId = const Value.absent(),
                Value<String?> description = const Value.absent(),
                required DateTime date,
                Value<bool> isActive = const Value.absent(),
                Value<int?> fromAccountId = const Value.absent(),
                Value<int?> toAccountId = const Value.absent(),
              }) => TransactionsTableCompanion.insert(
                id: id,
                serverId: serverId,
                userId: userId,
                transactionType: transactionType,
                transactionCategoryId: transactionCategoryId,
                amount: amount,
                accountId: accountId,
                projectId: projectId,
                description: description,
                date: date,
                isActive: isActive,
                fromAccountId: fromAccountId,
                toAccountId: toAccountId,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$TransactionsTableTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $TransactionsTableTable,
      TransactionsTableData,
      $$TransactionsTableTableFilterComposer,
      $$TransactionsTableTableOrderingComposer,
      $$TransactionsTableTableAnnotationComposer,
      $$TransactionsTableTableCreateCompanionBuilder,
      $$TransactionsTableTableUpdateCompanionBuilder,
      (
        TransactionsTableData,
        BaseReferences<
          _$AppDatabase,
          $TransactionsTableTable,
          TransactionsTableData
        >,
      ),
      TransactionsTableData,
      PrefetchHooks Function()
    >;
typedef $$PendingRequestsTableCreateCompanionBuilder =
    PendingRequestsCompanion Function({
      Value<int> id,
      required String method,
      required String endpoint,
      Value<String?> body,
      Value<DateTime> createdAt,
    });
typedef $$PendingRequestsTableUpdateCompanionBuilder =
    PendingRequestsCompanion Function({
      Value<int> id,
      Value<String> method,
      Value<String> endpoint,
      Value<String?> body,
      Value<DateTime> createdAt,
    });

class $$PendingRequestsTableFilterComposer
    extends Composer<_$AppDatabase, $PendingRequestsTable> {
  $$PendingRequestsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get method => $composableBuilder(
    column: $table.method,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get endpoint => $composableBuilder(
    column: $table.endpoint,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get body => $composableBuilder(
    column: $table.body,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $$PendingRequestsTableOrderingComposer
    extends Composer<_$AppDatabase, $PendingRequestsTable> {
  $$PendingRequestsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get method => $composableBuilder(
    column: $table.method,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get endpoint => $composableBuilder(
    column: $table.endpoint,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get body => $composableBuilder(
    column: $table.body,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$PendingRequestsTableAnnotationComposer
    extends Composer<_$AppDatabase, $PendingRequestsTable> {
  $$PendingRequestsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get method =>
      $composableBuilder(column: $table.method, builder: (column) => column);

  GeneratedColumn<String> get endpoint =>
      $composableBuilder(column: $table.endpoint, builder: (column) => column);

  GeneratedColumn<String> get body =>
      $composableBuilder(column: $table.body, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);
}

class $$PendingRequestsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $PendingRequestsTable,
          PendingRequest,
          $$PendingRequestsTableFilterComposer,
          $$PendingRequestsTableOrderingComposer,
          $$PendingRequestsTableAnnotationComposer,
          $$PendingRequestsTableCreateCompanionBuilder,
          $$PendingRequestsTableUpdateCompanionBuilder,
          (
            PendingRequest,
            BaseReferences<
              _$AppDatabase,
              $PendingRequestsTable,
              PendingRequest
            >,
          ),
          PendingRequest,
          PrefetchHooks Function()
        > {
  $$PendingRequestsTableTableManager(
    _$AppDatabase db,
    $PendingRequestsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$PendingRequestsTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$PendingRequestsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$PendingRequestsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<String> method = const Value.absent(),
                Value<String> endpoint = const Value.absent(),
                Value<String?> body = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
              }) => PendingRequestsCompanion(
                id: id,
                method: method,
                endpoint: endpoint,
                body: body,
                createdAt: createdAt,
              ),
          createCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                required String method,
                required String endpoint,
                Value<String?> body = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
              }) => PendingRequestsCompanion.insert(
                id: id,
                method: method,
                endpoint: endpoint,
                body: body,
                createdAt: createdAt,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$PendingRequestsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $PendingRequestsTable,
      PendingRequest,
      $$PendingRequestsTableFilterComposer,
      $$PendingRequestsTableOrderingComposer,
      $$PendingRequestsTableAnnotationComposer,
      $$PendingRequestsTableCreateCompanionBuilder,
      $$PendingRequestsTableUpdateCompanionBuilder,
      (
        PendingRequest,
        BaseReferences<_$AppDatabase, $PendingRequestsTable, PendingRequest>,
      ),
      PendingRequest,
      PrefetchHooks Function()
    >;
typedef $$UserSettingsTableCreateCompanionBuilder =
    UserSettingsCompanion Function({
      required String key,
      required String value,
      Value<int> rowid,
    });
typedef $$UserSettingsTableUpdateCompanionBuilder =
    UserSettingsCompanion Function({
      Value<String> key,
      Value<String> value,
      Value<int> rowid,
    });

class $$UserSettingsTableFilterComposer
    extends Composer<_$AppDatabase, $UserSettingsTable> {
  $$UserSettingsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get key => $composableBuilder(
    column: $table.key,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get value => $composableBuilder(
    column: $table.value,
    builder: (column) => ColumnFilters(column),
  );
}

class $$UserSettingsTableOrderingComposer
    extends Composer<_$AppDatabase, $UserSettingsTable> {
  $$UserSettingsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get key => $composableBuilder(
    column: $table.key,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get value => $composableBuilder(
    column: $table.value,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$UserSettingsTableAnnotationComposer
    extends Composer<_$AppDatabase, $UserSettingsTable> {
  $$UserSettingsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get key =>
      $composableBuilder(column: $table.key, builder: (column) => column);

  GeneratedColumn<String> get value =>
      $composableBuilder(column: $table.value, builder: (column) => column);
}

class $$UserSettingsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $UserSettingsTable,
          UserSetting,
          $$UserSettingsTableFilterComposer,
          $$UserSettingsTableOrderingComposer,
          $$UserSettingsTableAnnotationComposer,
          $$UserSettingsTableCreateCompanionBuilder,
          $$UserSettingsTableUpdateCompanionBuilder,
          (
            UserSetting,
            BaseReferences<_$AppDatabase, $UserSettingsTable, UserSetting>,
          ),
          UserSetting,
          PrefetchHooks Function()
        > {
  $$UserSettingsTableTableManager(_$AppDatabase db, $UserSettingsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$UserSettingsTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$UserSettingsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () =>
                  $$UserSettingsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> key = const Value.absent(),
                Value<String> value = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => UserSettingsCompanion(key: key, value: value, rowid: rowid),
          createCompanionCallback:
              ({
                required String key,
                required String value,
                Value<int> rowid = const Value.absent(),
              }) => UserSettingsCompanion.insert(
                key: key,
                value: value,
                rowid: rowid,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$UserSettingsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $UserSettingsTable,
      UserSetting,
      $$UserSettingsTableFilterComposer,
      $$UserSettingsTableOrderingComposer,
      $$UserSettingsTableAnnotationComposer,
      $$UserSettingsTableCreateCompanionBuilder,
      $$UserSettingsTableUpdateCompanionBuilder,
      (
        UserSetting,
        BaseReferences<_$AppDatabase, $UserSettingsTable, UserSetting>,
      ),
      UserSetting,
      PrefetchHooks Function()
    >;

class $AppDatabaseManager {
  final _$AppDatabase _db;
  $AppDatabaseManager(this._db);
  $$TransactionsTableTableTableManager get transactionsTable =>
      $$TransactionsTableTableTableManager(_db, _db.transactionsTable);
  $$PendingRequestsTableTableManager get pendingRequests =>
      $$PendingRequestsTableTableManager(_db, _db.pendingRequests);
  $$UserSettingsTableTableManager get userSettings =>
      $$UserSettingsTableTableManager(_db, _db.userSettings);
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\db\pending_request.dart =====

import 'package:drift/drift.dart';

class PendingRequests extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get method => text()(); // 'POST', 'PUT', 'DELETE'
  TextColumn get endpoint => text()(); // API-СЌРЅРґРїРѕРёРЅС‚
  TextColumn get data => text()(); // JSON-РґР°РЅРЅС‹Рµ Р·Р°РїСЂРѕСЃР°
  DateTimeColumn get createdAt => dateTime().withDefault(currentDateAndTime)();
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\db\pending_requests_table.dart =====

import 'package:drift/drift.dart';

class PendingRequests extends Table {
  IntColumn get id => integer().autoIncrement()();

  TextColumn get method => text()(); // 'POST', 'PUT', 'DELETE'
  TextColumn get endpoint => text()(); // РЅР°РїСЂРёРјРµСЂ: '/api/transactions'
  TextColumn get body => text().nullable()(); // JSON РєР°Рє СЃС‚СЂРѕРєР°
  DateTimeColumn get createdAt =>
      dateTime().withDefault(currentDateAndTime)(); // РґР»СЏ РѕС‡РµСЂРµРґРЅРѕСЃС‚Рё
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\db\transactions_table.dart =====

import 'package:drift/drift.dart';

class TransactionsTable extends Table {
  IntColumn get id => integer().autoIncrement()(); // Р»РѕРєР°Р»СЊРЅС‹Р№ ID
  IntColumn get serverId => integer().nullable()(); // ID РЅР° СЃРµСЂРІРµСЂРµ
  IntColumn get userId => integer()();
  TextColumn get transactionType => text()(); // income | expense | transfer
  IntColumn get transactionCategoryId => integer().nullable()();
  RealColumn get amount => real()();
  IntColumn get accountId => integer().nullable()();
  IntColumn get projectId => integer().nullable()();
  TextColumn get description => text().nullable()();
  DateTimeColumn get date => dateTime()();
  BoolColumn get isActive => boolean().withDefault(const Constant(true))();
  IntColumn get fromAccountId => integer().nullable()(); // РґР»СЏ РїРµСЂРµРІРѕРґРѕРІ
  IntColumn get toAccountId => integer().nullable()();

  // рџ”Ѕ Р”Р»СЏ СЃРёРЅС…СЂРѕРЅРёР·Р°С†РёРё
  DateTimeColumn get updatedAt => dateTime().nullable()(); // Р»РѕРєР°Р»СЊРЅРѕРµ РІСЂРµРјСЏ РёР·РјРµРЅРµРЅРёСЏ
  BoolColumn get isDirty => boolean().withDefault(const Constant(false))(); // С‚СЂРµР±СѓРµС‚ РѕС‚РїСЂР°РІРєРё
  BoolColumn get isDeleted => boolean().withDefault(const Constant(false))(); // СѓРґР°Р»РµРЅР° Р»РѕРєР°Р»СЊРЅРѕ, РЅРѕ РµС‰С‘ РЅРµ РЅР° СЃРµСЂРІРµСЂРµ
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\db\user_settings_table.dart =====

import 'package:drift/drift.dart';

class UserSettings extends Table {
  TextColumn get key => text()();      // РџСЂРёРјРµСЂ: "theme_mode"
  TextColumn get value => text()();    // РџСЂРёРјРµСЂ: "light", "dark", "system"

  @override
  Set<Column> get primaryKey => {key};
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\models\user.dart =====

import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class User with _$User {
  const User._(); // <- РїСЂРёРІР°С‚РЅС‹Р№ РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ

  const factory User({
    required int id,
    required String name,
    required String email,
    String? token,
  }) = _User;

  // РљР°СЃС‚РѕРјРЅС‹Р№ РіРµС‚С‚РµСЂ:
  String get domain => email.split('@').last;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  @override
  // TODO: implement email
  String get email => throw UnimplementedError();

  @override
  // TODO: implement id
  int get id => throw UnimplementedError();

  @override
  // TODO: implement name
  String get name => throw UnimplementedError();

  @override
  Map<String, dynamic> toJson() {
    // TODO: implement toJson
    throw UnimplementedError();
  }

  @override
  // TODO: implement token
  String? get token => throw UnimplementedError();
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\models\user.freezed.dart =====

// dart format width=80
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'user.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

// dart format off
T _$identity<T>(T value) => value;

/// @nodoc
mixin _$User {

 int get id; String get name; String get email; String? get token;
/// Create a copy of User
/// with the given fields replaced by the non-null parameter values.
@JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
$UserCopyWith<User> get copyWith => _$UserCopyWithImpl<User>(this as User, _$identity);

  /// Serializes this User to a JSON map.
  Map<String, dynamic> toJson();


@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is User&&(identical(other.id, id) || other.id == id)&&(identical(other.name, name) || other.name == name)&&(identical(other.email, email) || other.email == email)&&(identical(other.token, token) || other.token == token));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,name,email,token);

@override
String toString() {
  return 'User(id: $id, name: $name, email: $email, token: $token)';
}


}

/// @nodoc
abstract mixin class $UserCopyWith<$Res>  {
  factory $UserCopyWith(User value, $Res Function(User) _then) = _$UserCopyWithImpl;
@useResult
$Res call({
 int id, String name, String email, String? token
});




}
/// @nodoc
class _$UserCopyWithImpl<$Res>
    implements $UserCopyWith<$Res> {
  _$UserCopyWithImpl(this._self, this._then);

  final User _self;
  final $Res Function(User) _then;

/// Create a copy of User
/// with the given fields replaced by the non-null parameter values.
@pragma('vm:prefer-inline') @override $Res call({Object? id = null,Object? name = null,Object? email = null,Object? token = freezed,}) {
  return _then(_self.copyWith(
id: null == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int,name: null == name ? _self.name : name // ignore: cast_nullable_to_non_nullable
as String,email: null == email ? _self.email : email // ignore: cast_nullable_to_non_nullable
as String,token: freezed == token ? _self.token : token // ignore: cast_nullable_to_non_nullable
as String?,
  ));
}

}


/// @nodoc
@JsonSerializable()

class _User extends User {
  const _User({required this.id, required this.name, required this.email, this.token}): super._();
  factory _User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

@override final  int id;
@override final  String name;
@override final  String email;
@override final  String? token;

/// Create a copy of User
/// with the given fields replaced by the non-null parameter values.
@override @JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
_$UserCopyWith<_User> get copyWith => __$UserCopyWithImpl<_User>(this, _$identity);

@override
Map<String, dynamic> toJson() {
  return _$UserToJson(this, );
}

@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is _User&&(identical(other.id, id) || other.id == id)&&(identical(other.name, name) || other.name == name)&&(identical(other.email, email) || other.email == email)&&(identical(other.token, token) || other.token == token));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,name,email,token);

@override
String toString() {
  return 'User(id: $id, name: $name, email: $email, token: $token)';
}


}

/// @nodoc
abstract mixin class _$UserCopyWith<$Res> implements $UserCopyWith<$Res> {
  factory _$UserCopyWith(_User value, $Res Function(_User) _then) = __$UserCopyWithImpl;
@override @useResult
$Res call({
 int id, String name, String email, String? token
});




}
/// @nodoc
class __$UserCopyWithImpl<$Res>
    implements _$UserCopyWith<$Res> {
  __$UserCopyWithImpl(this._self, this._then);

  final _User _self;
  final $Res Function(_User) _then;

/// Create a copy of User
/// with the given fields replaced by the non-null parameter values.
@override @pragma('vm:prefer-inline') $Res call({Object? id = null,Object? name = null,Object? email = null,Object? token = freezed,}) {
  return _then(_User(
id: null == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int,name: null == name ? _self.name : name // ignore: cast_nullable_to_non_nullable
as String,email: null == email ? _self.email : email // ignore: cast_nullable_to_non_nullable
as String,token: freezed == token ? _self.token : token // ignore: cast_nullable_to_non_nullable
as String?,
  ));
}


}

// dart format on
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\models\user.g.dart =====

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'user.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_User _$UserFromJson(Map<String, dynamic> json) => _User(
  id: (json['id'] as num).toInt(),
  name: json['name'] as String,
  email: json['email'] as String,
  token: json['token'] as String?,
);

Map<String, dynamic> _$UserToJson(_User instance) => <String, dynamic>{
  'id': instance.id,
  'name': instance.name,
  'email': instance.email,
  'token': instance.token,
};
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\network\network_status_notifier.dart =====

import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final networkStatusProvider = Provider<NetworkStatus>((ref) {
  return NetworkStatus();
});

class NetworkStatus {
  final Connectivity _connectivity = Connectivity();
  final StreamController<bool> _controller = StreamController<bool>.broadcast();

  NetworkStatus() {
    _connectivity.onConnectivityChanged.listen((result) {
      _controller.add(result != ConnectivityResult.none);
    });
  }

  Future<bool> isConnected() async {
    final result = await _connectivity.checkConnectivity();
    return result != ConnectivityResult.none;
  }

  Stream<bool> get onStatusChange => _controller.stream;
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\providers\database_provider.dart =====

// lib/core/providers/database_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../db/app_database.dart';

final databaseProvider = Provider<AppDatabase>((ref) {
  return AppDatabase();
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\providers\network_status_provider.dart =====

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final networkStatusProvider = StreamProvider<ConnectivityResult>((ref) {
  return Connectivity().onConnectivityChanged.map((results) {
    // РџСЂРµРѕР±СЂР°Р·СѓРµРј Stream<List<ConnectivityResult>> РІ Stream<ConnectivityResult>
    if (results.isNotEmpty) {
      return results.first;
    } else {
      return ConnectivityResult.none;
    }
  });
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\repository\auth_repository.dart =====

// import 'package:flutter_riverpod/flutter_riverpod.dart';
//
// final authRepositoryProvider = Provider<AuthRepository>((ref) {
//   return AuthRepository();
// });
//
// class AuthRepository {
//   String? getAuthToken() {
//     // Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р»РѕРіРёРєР° РїРѕР»СѓС‡РµРЅРёСЏ С‚РѕРєРµРЅР° (РЅР°РїСЂРёРјРµСЂ, РёР· С…СЂР°РЅРёР»РёС‰Р°)
//     return "your_bearer_token"; // Р—Р°РјРµРЅРёС‚Рµ РЅР° СЂРµР°Р»СЊРЅС‹Р№ С‚РѕРєРµРЅ
//   }
// }
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\routing\main_router.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/accounts/presentation/accounts_screen.dart';
import 'package:flutter_app_1/features/transactions/presentation/screens/transaction_create_screen.dart';
import '../../features/main/presentation/main_screen.dart';
import '../../features/auth/presentation/login_screen.dart';
import '../../features/auth/presentation/register_screen.dart';
import '../../features/transaction_categories/presentation/transaction_categories_screen.dart';

class MainRouter {
  static const String initialRoute = '/';

  static Route<dynamic>? generateRoute(RouteSettings settings) {
    switch (settings.name) {
      case '/login':
        return MaterialPageRoute(builder: (_) => LoginScreen());
      case '/register':
        return MaterialPageRoute(builder: (_) => RegisterScreen());
      case '/':
        return MaterialPageRoute(builder: (_) => MainScreen());
      // case '/transactions':
      //   return MaterialPageRoute(builder: (_) => TransactionsScreen());
      case '/transactions/create':
        return MaterialPageRoute(builder: (_) => TransactionCreateScreen());
      case '/transaction_categories':
        return MaterialPageRoute(builder: (_) => TransactionCategoriesScreen());
      case '/accounts':
        return FadeRoute(page: AccountsScreen());
      default:
        return MaterialPageRoute(
          builder: (_) => Scaffold(
            body: Center(child: Text('Route not found: ${settings.name}')),
          ),
        );
    }
  }
}

class FadeRoute extends PageRouteBuilder {
  final Widget page;
  FadeRoute({required this.page})
      : super(
    pageBuilder: (context, animation, secondaryAnimation) => page,
    transitionsBuilder: (context, animation, secondaryAnimation, child) {
      return FadeTransition(
        opacity: animation,
        child: child,
      );
    },
  );
}

Route<dynamic>? generateRoute(RouteSettings settings) {
  switch (settings.name) {
    case '/login':
      return FadeRoute(page: LoginScreen());
    case '/register':
      return FadeRoute(page: RegisterScreen());
    case '/':
      return FadeRoute(page: MainScreen());
    // case '/transactions':
    //   return FadeRoute(page: TransactionsScreen());
    case '/transactions/create':
      return MaterialPageRoute(builder: (_) => TransactionCreateScreen());
    case '/transaction_categories':
      return FadeRoute(page: TransactionCategoriesScreen());
    case '/accounts':
      return FadeRoute(page: AccountsScreen());
    default:
      return MaterialPageRoute(
        builder: (_) => Scaffold(
          body: Center(child: Text('Route not found: ${settings.name}')),
        ),
      );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\services\offline_sync_service.dart =====

// lib/core/services/offline_sync_service.dart

import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:drift/drift.dart';
import 'package:flutter_app_1/core/db/app_database.dart';
import '../network/network_status_notifier.dart';

class OfflineSyncService {
  final Dio dio;
  final AppDatabase db;
  final NetworkStatus networkStatusProvider;

  OfflineSyncService({
    required this.dio,
    required this.db,
    required this.networkStatusProvider,
  });

  Future<void> enqueueRequest({
    required String method,
    required String endpoint,
    Map<String, dynamic>? body,
  }) async {
    final request = PendingRequestsCompanion.insert(
      method: method,
      endpoint: endpoint,
      body: Value(body != null ? jsonEncode(body) : null),
    );

    await db.insertPendingRequest(request);
  }

  Future<void> syncPendingRequests() async {
    final isOnline = await networkStatusProvider.isConnected();
    if (!isOnline) return;

    final pending = await db.getAllPendingRequests();

    for (final req in pending) {
      try {
        final data = req.body != null ? jsonDecode(req.body!) : null;

        switch (req.method.toUpperCase()) {
          case 'POST':
            await dio.post(req.endpoint, data: data);
            break;
          case 'PUT':
            await dio.put(req.endpoint, data: data);
            break;
          case 'DELETE':
            await dio.delete(req.endpoint);
            break;
          default:
            continue;
        }

        await db.deletePendingRequestById(req.id);
      } catch (e) {
        continue;
      }
    }
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\services\secure_storage_provider.dart =====

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

final secureStorageProvider = Provider<FlutterSecureStorage>((ref) {
  return const FlutterSecureStorage();
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\services\user_settings_service.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../features/transactions/presentation/providers/transaction_provider.dart';
import '../db/app_database.dart';

final userSettingsServiceProvider = Provider<UserSettingsService>((ref) {
  final db = ref.watch(appDatabaseProvider);
  return UserSettingsService(db);
});

class UserSettingsService {
  final AppDatabase _db;

  static const _themeKey = 'theme_mode';

  UserSettingsService(this._db);

  Future<void> saveThemeMode(ThemeMode mode) async {
    await _db.into(_db.userSettings).insertOnConflictUpdate(
      UserSetting(
        key: _themeKey,
        value: mode.name,
      ),
    );
  }

  Stream<ThemeMode> watchThemeMode() {
    return (_db.select(_db.userSettings)
      ..where((tbl) => tbl.key.equals(_themeKey)))
        .watchSingleOrNull()
        .map((row) {
      if (row == null) return ThemeMode.system;
      return ThemeMode.values.byName(row.value);
    });
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\theme\custom_colors.dart =====

import 'package:flutter/material.dart';

class CustomColors {
  static const Color mainWhite = Color(0xFFFFFFFF);
  static const Color mainRed = Color(0xFFF14635);
  static const Color mainLightRed = Color(0xFFFF8275);
  static const Color mainDarkRed = Color(0xFFC0382A);
  static const Color mainYellow = Color(0xFFFFD300);
  static const Color mainGold = Color(0xFFD5AE6C);
  static const Color mainGreen = Color(0xFFA3DB5A);
  static const Color mainBlue = Color(0xFF0089D0);
  static const Color mainDarkBlue = Color(0xFF006EA6);
  static const Color mainGrey = Color(0xFFA9A9A9);
  static const Color mainLightGrey = Color(0xFFF5F5F5);
  static const Color mainDarkGrey = Color(0xFF4A4A4A);
  static const Color mainBlack = Color(0xFF000000);

  static const Color primary = mainRed;
  static const Color primaryVariant = mainDarkRed;
  static const Color secondary = mainBlue;
  static const Color secondaryVariant = mainDarkBlue;
  static const Color surface = mainWhite;
  static const Color background = mainWhite;
  static const Color error = mainRed;

  static const Color onPrimary = mainWhite;
  static const Color onSecondary = mainBlack;
  static const Color onSurface = mainBlack;
  static const Color onBackground = mainBlack;
  static const Color onError = mainWhite;

}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\theme\custom_text_styles.dart =====

import 'package:flutter/material.dart';
import 'custom_colors.dart';

class CustomTextStyles {
  // рџЊћ РЎРІРµС‚Р»Р°СЏ С‚РµРјР°
  static const TextStyle normalLarge = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: CustomColors.onBackground
  );

  static const TextStyle normalMedium = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
      color: CustomColors.onBackground
  );

  static const TextStyle normalSmall = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
      color: CustomColors.onBackground
  );

  static const TextStyle onColorNormalLarge = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: CustomColors.onPrimary,
  );

  static const TextStyle onColorNormalMedium = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: CustomColors.onPrimary,
  );

  static const TextStyle onColorNormalSmall = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: CustomColors.onPrimary,
  );

  static const TextStyle successText = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: CustomColors.mainGreen,
  );

  static const TextStyle errorText = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: CustomColors.error,
  );



  // рџЊљ РўС‘РјРЅР°СЏ С‚РµРјР°
  static const TextStyle darkNormalLarge = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.normal,
    color: CustomColors.onPrimary,
  );

  static const TextStyle darkNormalMedium = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.normal,
    color: CustomColors.onPrimary,
  );

  static const TextStyle darkNormalSmall = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: CustomColors.onPrimary
  );
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\core\theme\theme_manager.dart =====

import 'package:flutter/material.dart';

import 'custom_colors.dart';
import 'custom_text_styles.dart';


class ThemeManager {
  static final lightTheme = ThemeData(
    brightness: Brightness.light,
    scaffoldBackgroundColor: CustomColors.background,
    appBarTheme: AppBarTheme(
      backgroundColor: CustomColors.mainRed,
      foregroundColor: CustomColors.mainWhite,
      elevation: 0,
    ),
    colorScheme: const ColorScheme(
      brightness: Brightness.light,
      primary: CustomColors.primary,
      onPrimary: CustomColors.onPrimary,
      primaryContainer: CustomColors.primaryVariant,
      secondary: CustomColors.secondary,
      onSecondary: CustomColors.onSecondary,
      secondaryContainer: CustomColors.secondaryVariant,
      surface: CustomColors.surface,
      onSurface: CustomColors.onSurface,
      error: CustomColors.error,
      onError: CustomColors.onError,
    ),
    useMaterial3: true,
    textTheme: const TextTheme(
      headlineLarge: CustomTextStyles.normalLarge,
      headlineMedium: CustomTextStyles.normalMedium,
      bodyLarge: CustomTextStyles.normalLarge,
      bodyMedium: CustomTextStyles.normalMedium,
      labelLarge: CustomTextStyles.normalLarge,
    ),
  );

  static final darkTheme = ThemeData(
    brightness: Brightness.dark,
    colorScheme: const ColorScheme(
      brightness: Brightness.dark,
      primary: CustomColors.primary,
      onPrimary: CustomColors.onPrimary,
      primaryContainer: CustomColors.primaryVariant,
      secondary: CustomColors.secondary,
      onSecondary: CustomColors.onSecondary,
      secondaryContainer: CustomColors.secondaryVariant,
      surface: Color(0xFF1E1E1E),
      onSurface: Colors.white,
      error: CustomColors.error,
      onError: CustomColors.onError,
    ),
    textTheme: const TextTheme(
      bodyLarge: CustomTextStyles.darkNormalLarge,
      bodyMedium: CustomTextStyles.darkNormalMedium,
      bodySmall: CustomTextStyles.darkNormalSmall,
      // РњРѕР¶РЅРѕ РґРѕРїРѕР»РЅРёС‚СЊ РґСЂСѓРіРёРјРё СЃС‚РёР»СЏРјРё, РµСЃР»Рё РЅСѓР¶РЅРѕ
    ),
    useMaterial3: true,
  );
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\accounts\domain\models\account.dart =====

// lib/features/transactions/domain/entities/account.dart

/// Represents an account in the application.
class Account {
  /// The unique identifier of the account.
  final int id;

  /// The name of the account.
  final String name;
  final double? balance;

  // Р’С‹ РјРѕР¶РµС‚Рµ РґРѕР±Р°РІРёС‚СЊ РґСЂСѓРіРёРµ РїРѕР»СЏ РёР· РІР°С€РµР№ Р±СЌРєРµРЅРґ-РјРѕРґРµР»Рё, РµСЃР»Рё РѕРЅРё РЅРµРѕР±С…РѕРґРёРјС‹ РґР»СЏ UI:
  // final int? currencyId;
  // final bool? isActive;


  Account({
    required this.id,
    required this.name,
    this.balance,
    // Р”РѕР±Р°РІСЊС‚Рµ СЃСЋРґР° РґСЂСѓРіРёРµ РїРѕР»СЏ, РµСЃР»Рё РІС‹ СЂРµС€РёР»Рё РёС… РІРєР»СЋС‡РёС‚СЊ
    // this.currencyId,
    // this.isActive,
  });

  // Р”Р»СЏ СЂР°Р±РѕС‚С‹ СЃ РґР°РЅРЅС‹РјРё РёР· Р±СЌРєРµРЅРґР° РІР°Рј, РІРµСЂРѕСЏС‚РЅРѕ, РїРѕС‚СЂРµР±СѓРµС‚СЃСЏ factory РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ
  // РґР»СЏ СЃРѕР·РґР°РЅРёСЏ СЌРєР·РµРјРїР»СЏСЂР° Account РёР· Map (JSON).
  // factory Account.fromJson(Map<String, dynamic> json) {
  //   return Account(
  //     id: json['id'] as int,
  //     name: json['name'] as String,
  //     // РџСЂРёРјРµСЂ РјР°РїРїРёРЅРіР° РґСЂСѓРіРёС… РїРѕР»РµР№ (СѓР±РµРґРёС‚РµСЃСЊ РІ РїСЂР°РІРёР»СЊРЅРѕСЃС‚Рё С‚РёРїРѕРІ)
  //     // balance: (json['balance'] as num?)?.toDouble(),
  //     // currencyId: json['currency_id'] as int?,
  //     // isActive: json['is_active'] as bool?,
  //   );
  // }

  // РўР°РєР¶Рµ РїРѕР»РµР·РЅРѕ РїРµСЂРµРѕРїСЂРµРґРµР»РёС‚СЊ equals Рё hashCode РґР»СЏ СЃСЂР°РІРЅРµРЅРёСЏ РѕР±СЉРµРєС‚РѕРІ Account
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is Account &&
              runtimeType == other.runtimeType &&
              id == other.id;

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() {
    return 'Account{id: $id, name: $name}';
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\accounts\presentation\accounts_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_divider.dart';
import 'package:flutter_app_1/common/widgets/custom_list_view/custom_list_view_separated.dart';
import 'package:flutter_app_1/common/widgets/custom_list_view/custom_list_item.dart';
// !!! РРњРџРћР РўРР РЈР•Рњ РћР‘Р©РЈР® РњРћР”Р•Р›Р¬ Account РёР· РґРѕРјРµРЅРЅРѕРіРѕ СЃР»РѕСЏ
// !!! РРјРїРѕСЂС‚РёСЂСѓРµРј AccountScreen
import '../../../common/widgets/custom_floating_action_button.dart';
import '../domain/models/account.dart';
import '../../../core/theme/custom_colors.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№
import '../../../core/theme/custom_text_styles.dart';
import 'account_screen.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№
import '../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys


// !!! РЈР”РђР›Р•РќРћ: РњРѕРґРµР»СЊ РґР°РЅРЅС‹С… _Account Р±РѕР»СЊС€Рµ РЅРµ РѕРїСЂРµРґРµР»СЏРµС‚СЃСЏ Р·РґРµСЃСЊ.
// РњС‹ РёСЃРїРѕР»СЊР·СѓРµРј РѕР±С‰СѓСЋ РјРѕРґРµР»СЊ Account РёР· domain/models.
// class _Account { ... }


// AccountsScreen
class AccountsScreen extends StatelessWidget {
  const AccountsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: SafeArea(
          child: Column(
            children: [
              // РћС‚РѕР±СЂР°Р¶РµРЅРёРµ РѕР±С‰РµРіРѕ Р±Р°Р»Р°РЅСЃР°
              Padding(
                padding: const EdgeInsets.all(20.0),
                child: Center(
                  child: Text('${LocaleKeys.balance_total.tr()}: 800 000 \$'), // TODO: Р”РёРЅР°РјРёС‡РµСЃРєРёР№ Р±Р°Р»Р°РЅСЃ
                ),
              ),
              const CustomDivider(), // Р Р°Р·РґРµР»РёС‚РµР»СЊ РїРѕСЃР»Рµ Р±Р°Р»Р°РЅСЃР°

              // РЎРµРєС†РёСЏ СЃРїРёСЃРєР° СЃС‡РµС‚РѕРІ
              Expanded( // РЎРїРёСЃРѕРє Р·Р°РЅРёРјР°РµС‚ РІСЃРµ РґРѕСЃС‚СѓРїРЅРѕРµ РїСЂРѕСЃС‚СЂР°РЅСЃС‚РІРѕ
                child: AccountListContentWidget(), // Р’РёРґР¶РµС‚, РєРѕС‚РѕСЂС‹Р№ СЃС‚СЂРѕРёС‚ СЃРїРёСЃРѕРє СЃС‡РµС‚РѕРІ
              ),

              const CustomDivider(), // Р Р°Р·РґРµР»РёС‚РµР»СЊ РїРѕСЃР»Рµ СЃРїРёСЃРєР°
            ],
          ),
        ),
        // FloatingActionButton РґР»СЏ РґРѕР±Р°РІР»РµРЅРёСЏ РЅРѕРІРѕРіРѕ СЃС‡РµС‚Р°
        floatingActionButton: CustomFloatingActionButton(
          onPressed: () {
            // TODO: Р›РѕРіРёРєР° РѕС‚РєСЂС‹С‚РёСЏ С„РѕСЂРјС‹ РґРѕР±Р°РІР»РµРЅРёСЏ РЅРѕРІРѕРіРѕ СЃС‡РµС‚Р°
            print('РќР°Р¶Р°С‚Р° РєРЅРѕРїРєР° "РЅРѕРІС‹Р№ СЃС‡РµС‚"');
          },
        )
    );
  }
}

// РљР»Р°СЃСЃ, РєРѕС‚РѕСЂС‹Р№ РїСЂРµРґРѕСЃС‚Р°РІР»СЏРµС‚ СЃРѕРґРµСЂР¶РёРјРѕРµ СЃРїРёСЃРєР° СЃС‡РµС‚РѕРІ
class AccountListContentWidget extends StatelessWidget {
  AccountListContentWidget({super.key});

  // !!! Р—РђР“Р›РЈРЁРљРђ: РЎРїРёСЃРѕРє СЃС‡РµС‚РѕРІ. РСЃРїРѕР»СЊР·СѓРµРј РћР‘Р©РЈР® РјРѕРґРµР»СЊ Account РёР· РґРѕРјРµРЅРЅРѕРіРѕ СЃР»РѕСЏ.
  // !!! РЎРѕР·РґР°РµРј СЌРєР·РµРјРїР»СЏСЂС‹ Account Р±РµР· РїРѕР»РµР№ icon Рё subtitle, РєР°Рє РІ РјРѕРґРµР»Рё
  // Р”РѕР±Р°РІР»СЏРµРј id, teamId, currencyId, isActive РґР»СЏ СЃРѕРѕС‚РІРµС‚СЃС‚РІРёСЏ РјРѕРґРµР»Рё СЃ Р±СЌРєРµРЅРґР°
  final List<Account> items = [ // РСЃРїРѕР»СЊР·СѓРµРј РћР‘Р©РР™ С‚РёРї Account
    Account(id: 1, name: 'РћСЃРЅРѕРІРЅРѕР№ СЃС‡РµС‚', balance: 100000, ),
    Account(id: 2, name: 'РљСЂРµРґРёС‚РЅР°СЏ РєР°СЂС‚Р°', balance: -15000, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 3, name: 'РЎР±РµСЂРµРіР°С‚РµР»СЊРЅС‹Р№ СЃС‡РµС‚', balance: 500000, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 4, name: 'Р­Р»РµРєС‚СЂРѕРЅРЅС‹Р№ РєРѕС€РµР»РµРє', balance: 5000, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 5, name: 'РЎС‡РµС‚ 5 (РљРѕРјР°РЅРґР° 2)', balance: 100, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 6, name: 'РЎС‡РµС‚ 6 (РљРѕРјР°РЅРґР° 2)', balance: 200, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 7, name: 'РЎС‡РµС‚ 7 (РљРѕРјР°РЅРґР° 2)', balance: 300, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 8, name: 'РЎС‡РµС‚ 8', balance: 100, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 9, name: 'РЎС‡РµС‚ 9', balance: 200, ), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
    Account(id: 10, name: 'РЎС‡РµС‚ 10', balance: 300,), // title -> name, РЈР”РђР›Р•РќР« icon/subtitle
  ];

  @override
  Widget build(BuildContext context) {
    // РСЃРїРѕР»СЊР·СѓРµРј CustomListViewSeparated СЃ РћР‘Р©РРњ С‚РёРїРѕРј Account
    return CustomListViewSeparated<Account>( // РСЃРїРѕР»СЊР·СѓРµРј РћР‘Р©РР™ С‚РёРї Account
      items: items, // РџРµСЂРµРґР°РµРј СЃРїРёСЃРѕРє РѕР±СЉРµРєС‚РѕРІ Account
      itemBuilder: (context, item) { // item Р·РґРµСЃСЊ РёРјРµРµС‚ С‚РёРї Account
        return CustomListItem(
          // !!! РРЎРџР РђР’Р›Р•РќРћ: Leading С‚РµРїРµСЂСЊ null, С‚Р°Рє РєР°Рє РІ РјРѕРґРµР»Рё РЅРµС‚ РїРѕР»СЏ icon
          leading: null, // РР»Рё РІС‹С‡РёСЃР»СЏРµРј РёРєРѕРЅРєСѓ РЅР° РѕСЃРЅРѕРІРµ item.currencyId РёР»Рё РґСЂСѓРіРёС… РїРѕР»РµР№
          // !!! РСЃРїРѕР»СЊР·СѓРµРј item.name РґР»СЏ Р·Р°РіРѕР»РѕРІРєР° (СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ title РІ UI)
          titleText: item.name, // РСЃРїРѕР»СЊР·СѓРµРј name РёР· РјРѕРґРµР»Рё Account
          // !!! РРЎРџР РђР’Р›Р•РќРћ: Subtitle С‚РµРїРµСЂСЊ null, С‚Р°Рє РєР°Рє РІ РјРѕРґРµР»Рё РЅРµС‚ РїРѕР»СЏ subtitle
          subtitleText: null, // РР»Рё РІС‹С‡РёСЃР»СЏРµРј РїРѕРґР·Р°РіРѕР»РѕРІРѕРє РЅР° РѕСЃРЅРѕРІРµ item.currencyId РёР»Рё РґСЂСѓРіРёС… РїРѕР»РµР№
          trailing: Row( // Trailing РѕСЃС‚Р°РµС‚СЃСЏ РІРёРґР¶РµС‚РѕРј Row, РёСЃРїРѕР»СЊР·СѓРµРј item.balance
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '${item.balance!.toStringAsFixed(0)} \$', // РџРѕРєР° РѕСЃС‚Р°РІР»СЏРµРј РІР°Р»СЋС‚Сѓ Р¶РµСЃС‚РєРѕ Р·Р°РґР°РЅРЅРѕР№
                style: CustomTextStyles.normalMedium.copyWith(
                  color: item.balance! < 0 ? CustomColors.error : CustomColors.mainDarkGrey,
                ),
              ),
              const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
            ],
          ),
          onTap: () {
            // !!! РРЎРџР РђР’Р›Р•РќРћ: РџР•Р Р•Р”РђР•Рњ РћР‘РЄР•РљРў account (РєРѕС‚РѕСЂС‹Р№ СЂР°РІРµРЅ item)
            // РІ РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ AccountScreen
            Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (context) => AccountScreen(account: item) // РџРµСЂРµРґР°РµРј РѕР±СЉРµРєС‚ item (Account)
              ),
            );
            // TODO: Р’ AccountScreen РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ account.id РґР»СЏ Р·Р°РіСЂСѓР·РєРё СЂРµР°Р»СЊРЅС‹С… РґР°РЅРЅС‹С… Рё С‚СЂР°РЅР·Р°РєС†РёР№,
            // РµСЃР»Рё РґР°РЅРЅС‹Рµ, РїРµСЂРµРґР°РЅРЅС‹Рµ СЃСЋРґР°, РЅРµРґРѕСЃС‚Р°С‚РѕС‡РЅС‹.
          },
        );
      },
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\accounts\presentation\account_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/accounts/presentation/widgets/edit_account_bottom_sheet.dart';
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import '../../../../common/widgets/custom_divider.dart';
import '../../transactions/presentation/widgets/transaction_list_widget.dart';
import '../domain/models/account.dart';
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys


// Р­РєСЂР°РЅ РґРµС‚Р°Р»РµР№ СЃС‡РµС‚Р°
class AccountScreen extends StatelessWidget {
  final Account account; // РџСЂРёРЅРёРјР°РµРј РѕР±СЉРµРєС‚ РѕР±С‰РµР№ РјРѕРґРµР»Рё Account

  const AccountScreen({super.key, required this.account});

  @override
  Widget build(BuildContext context) {


    return Scaffold(
      appBar: AppBar(
        title: Text(
          account.name,
          style: CustomTextStyles.normalMedium.copyWith(
            fontWeight: FontWeight.bold,
            color: CustomColors.onPrimary,
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              // TODO: РџРћРљРђР—РђРўР¬ BOTTOM SHEET Р Р•Р”РђРљРўРР РћР’РђРќРРЇ РЎР§Р•РўРђ
              showEditAccountBottomSheet(context, account);
            },
          ),
        ],
      ),
      body: Column( // РСЃРїРѕР»СЊР·СѓРµРј Column РґР»СЏ РѕР±С‰РµРіРѕ РІРµСЂС‚РёРєР°Р»СЊРЅРѕРіРѕ РјР°РєРµС‚Р°
        children: [
          // РЎРµРєС†РёСЏ Р±Р°Р»Р°РЅСЃР° СЃС‡РµС‚Р°
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0), // РќР°СЃС‚СЂР°РёРІР°РµРј РѕС‚СЃС‚СѓРїС‹
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start, // Р’С‹СЂР°РІРЅРёРІР°РЅРёРµ С‚РµРєСЃС‚Р° РїРѕ Р»РµРІРѕРјСѓ РєСЂР°СЋ
              children: [
                // !!! РћС‚РѕР±СЂР°Р¶РµРЅРёРµ С‚РµРєСѓС‰РµРіРѕ Р±Р°Р»Р°РЅСЃР° СЃС‡РµС‚Р° РёР· РїРµСЂРµРґР°РЅРЅРѕРіРѕ РѕР±СЉРµРєС‚Р° Account
                Text(
                  // РСЃРїРѕР»СЊР·СѓРµРј РѕРїРµСЂР°С‚РѕСЂ ?. РґР»СЏ Р±РµР·РѕРїР°СЃРЅРѕРіРѕ РґРѕСЃС‚СѓРїР° Рє balance, РµСЃР»Рё РѕРЅ РјРѕР¶РµС‚ Р±С‹С‚СЊ null
                  '${LocaleKeys.balance.tr()}: ${account.balance?.toStringAsFixed(0)} ${LocaleKeys.tenge_short.tr()}', // РџРѕРєР°Р·С‹РІР°РµРј N/A РµСЃР»Рё balance null
                  style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
                ),
                const SizedBox(height: 4), // РќРµР±РѕР»СЊС€РѕР№ РІРµСЂС‚РёРєР°Р»СЊРЅС‹Р№ РѕС‚СЃС‚СѓРї
                // !!! Р—РђР“Р›РЈРЁРљРђ: Р’С‚РѕСЂР°СЏ СЃС‚СЂРѕРєР° СЃ РґР°С‚РѕР№ Рё РёР·РјРµРЅРµРЅРёРµРј Р±Р°Р»Р°РЅСЃР°
                // TODO: Р Р°СЃСЃС‡РёС‚С‹РІР°С‚СЊ СЌС‚Сѓ СЃС‚СЂРѕРєСѓ РґРёРЅР°РјРёС‡РµСЃРєРё РёР· РёС‚РѕРіРѕРІ Р·Р° РґРµРЅСЊ
                Text(
                  '20 april (-5 000 ${LocaleKeys.tenge_short.tr()})', // РџСЂРёРјРµСЂ С‚РµРєСЃС‚Р° РёР· СЃРєСЂРёРЅС€РѕС‚Р°
                  style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
                ),
              ],
            ),
          ),
          CustomDivider(), // Р Р°Р·РґРµР»РёС‚РµР»СЊ РїРѕСЃР»Рµ СЃРµРєС†РёРё Р±Р°Р»Р°РЅСЃР°

          // РЎРµРєС†РёСЏ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№ СЃС‡РµС‚Р°
          Expanded( // Expanded Р·Р°СЃС‚Р°РІР»СЏРµС‚ СЃРїРёСЃРѕРє С‚СЂР°РЅР·Р°РєС†РёР№ Р·Р°РЅСЏС‚СЊ РІСЃРµ РѕСЃС‚Р°РІС€РµРµСЃСЏ РїСЂРѕСЃС‚СЂР°РЅСЃС‚РІРѕ
            child: TransactionListWidget(),
          ),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\accounts\presentation\widgets\edit_account_bottom_sheet.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_divider.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // Р•СЃР»Рё РёСЃРїРѕР»СЊР·СѓРµС‚Рµ Riverpod

// РџСЂРµРґРїРѕР»Р°РіР°РµС‚СЃСЏ, С‡С‚Рѕ СЃС‚РёР»Рё Рё С†РІРµС‚Р° РґРѕСЃС‚СѓРїРЅС‹
import '../../../../common/widgets/custom_draggable_scrollable_sheet.dart';
import '../../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../../common/widgets/custom_text_form_field.dart';
import '../../domain/models/account.dart';
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

/// A DraggableScrollableSheet for editing account details.
///
/// Requires the Account object to edit.
class EditAccountBottomSheet extends ConsumerWidget {
  final Account account; // РЎС‡РµС‚, РєРѕС‚РѕСЂС‹Р№ СЂРµРґР°РєС‚РёСЂСѓРµРј

  const EditAccountBottomSheet({super.key, required this.account});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // TODO: Р”Р»СЏ СЂРµР°Р»СЊРЅРѕРіРѕ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ РЅСѓР¶РЅС‹ TextEditingController РґР»СЏ РєР°Р¶РґРѕРіРѕ РїРѕР»СЏ,
    // Рё СЃРѕСЃС‚РѕСЏРЅРёРµ РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ Р·РЅР°С‡РµРЅРёСЏРјРё РїРѕР»РµР№. Р”Р»СЏ Р·Р°РіР»СѓС€РєРё UI РјРѕР¶РЅРѕ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ initialValue.
    List<Widget> fields = [
      // РџРѕР»Рµ "Name"
      CustomTextFormField(
        initialValue: account.name, // РџСЂРµРґР·Р°РїРѕР»РЅСЏРµРј С‚РµРєСѓС‰РёРј РѕРїРёСЃР°РЅРёРµРј СЃС‡РµС‚Р°
        labelText: LocaleKeys.name.tr(), // Р›РµР№Р±Р» РїРѕР»СЏ -> LocaleKeys.name
      ),
      const SizedBox(height: 16), // РћС‚СЃС‚СѓРї РјРµР¶РґСѓ РїРѕР»СЏРјРё

      // РџРѕР»Рµ "Currency" (Р—Р°РіР»СѓС€РєР° - РІРѕР·РјРѕР¶РЅРѕ, РІ Р±СѓРґСѓС‰РµРј Р±СѓРґРµС‚ РІС‹Р±РѕСЂ РёР· СЃРїРёСЃРєР°)
      // РќР° СЃРєСЂРёРЅС€РѕС‚Рµ СЌС‚Рѕ РІС‹РіР»СЏРґРёС‚ РєР°Рє РїРѕР»Рµ С‚РѕР»СЊРєРѕ РґР»СЏ С‡С‚РµРЅРёСЏ.
      CustomTextFormField(
        initialValue: 'Dollar USA (\$)', // РџСЂРµРґР·Р°РїРѕР»РЅСЏРµРј С‚РµРєСѓС‰РёРј РѕРїРёСЃР°РЅРёРµРј СЃС‡РµС‚Р°
        labelText: LocaleKeys.currency.tr(), // Р›РµР№Р±Р» РїРѕР»СЏ -> LocaleKeys.currency
      ),
      const SizedBox(height: 16), // РћС‚СЃС‚СѓРї

      // РџРѕР»Рµ "Balance" (Р—Р°РіР»СѓС€РєР° - Р±Р°Р»Р°РЅСЃ РѕР±С‹С‡РЅРѕ РЅРµ СЂРµРґР°РєС‚РёСЂСѓРµС‚СЃСЏ РЅР°РїСЂСЏРјСѓСЋ)
      // РќР° СЃРєСЂРёРЅС€РѕС‚Рµ СЌС‚Рѕ С‚Р°РєР¶Рµ РїРѕР»Рµ С‚РѕР»СЊРєРѕ РґР»СЏ С‡С‚РµРЅРёСЏ.
      CustomTextFormField(
        initialValue: account.balance?.toStringAsFixed(0) ?? '0', // РџСЂРµРґР·Р°РїРѕР»РЅСЏРµРј С‚РµРєСѓС‰РёРј Р±Р°Р»Р°РЅСЃРѕРј (Р±РµР·РѕРїР°СЃРЅС‹Р№ РґРѕСЃС‚СѓРї)
        labelText: LocaleKeys.balance.tr(), // Р›РµР№Р±Р» РїРѕР»СЏ -> LocaleKeys.balance
      ),
      const SizedBox(height: 24), // РћС‚СЃС‚СѓРї РїРµСЂРµРґ РєРЅРѕРїРєРѕР№

      // РљРЅРѕРїРєР° "Save"
      CustomPrimaryButton(
        onPressed: () {
          // TODO: Р РµР°Р»РёР·РѕРІР°С‚СЊ Р»РѕРіРёРєСѓ СЃРѕС…СЂР°РЅРµРЅРёСЏ РёР·РјРµРЅРµРЅРёР№ СЃС‡РµС‚Р°
          // РџРѕР»СѓС‡РёС‚СЊ Р·РЅР°С‡РµРЅРёСЏ РёР· РїРѕР»РµР№ (РµСЃР»Рё РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ РєРѕРЅС‚СЂРѕР»Р»РµСЂС‹)
          // РћР±РЅРѕРІРёС‚СЊ РґР°РЅРЅС‹Рµ СЃС‡РµС‚Р° (РЅР°РїСЂРёРјРµСЂ, С‡РµСЂРµР· Riverpod Provider РёР»Рё Repository)
          print('Save pressed for account ${account.name}'); // РџСЂРёРјРµСЂ: РІС‹РІРµСЃС‚Рё РґРµР№СЃС‚РІРёРµ
          Navigator.pop(context); // Р—Р°РєСЂС‹С‚СЊ Р»РёСЃС‚ РїРѕСЃР»Рµ СЃРѕС…СЂР°РЅРµРЅРёСЏ
        },
        text: LocaleKeys.save.tr(), // "Save" -> LocaleKeys.save
      ),
    ];

    return CustomDraggableScrollableSheet(fields: fields, title: LocaleKeys.editAccount.tr()); // РџРµСЂРµРґР°РµРј РїРѕР»СЏ Рё Р·Р°РіРѕР»РѕРІРѕРє -> LocaleKeys.editAccount
  }
}

// Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅР°СЏ С„СѓРЅРєС†РёСЏ РґР»СЏ СѓРґРѕР±РЅРѕРіРѕ РїРѕРєР°Р·Р° bottom sheet'Р° СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ СЃС‡РµС‚Р°
void showEditAccountBottomSheet(BuildContext context, Account account) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true, // РџРѕР·РІРѕР»СЏРµС‚ Р»РёСЃС‚Сѓ Р·Р°РЅРёРјР°С‚СЊ Р±РѕР»СЊС€Рµ РїРѕР»РѕРІРёРЅС‹ СЌРєСЂР°РЅР°
    backgroundColor: Colors.transparent, // РџСЂРѕР·СЂР°С‡РЅС‹Р№ С„РѕРЅ, С‡С‚РѕР±С‹ Р±С‹Р»Рѕ РІРёРґРЅРѕ СЃРєСЂСѓРіР»РµРЅРёРµ Container
    builder: (context) => EditAccountBottomSheet(account: account), // РџРµСЂРµРґР°РµРј РѕР±СЉРµРєС‚ СЃС‡РµС‚Р° РІ РІРёРґР¶РµС‚ Р»РёСЃС‚Р°
  );
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\auth\data\auth_provider.dart =====

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/api/api_service.dart';
import 'auth_repository.dart';

final authProvider = Provider<AuthService>((ref) {
  final api = ref.read(apiServiceProvider);          // Р­РєР·РµРјРїР»СЏСЂ ApiService
  final authRepo = ref.read(authRepositoryProvider); // Р­РєР·РµРјРїР»СЏСЂ AuthRepository
  return AuthService(api, authRepo);
});

class AuthService {
  final ApiService apiService;
  final AuthRepository authRepository;

  AuthService(this.apiService, this.authRepository);

  Future<bool> login(String email, String password) async {
    try {
      // 1. РћС‚РїСЂР°РІР»СЏРµРј Р·Р°РїСЂРѕСЃ С‡РµСЂРµР· СЌРєР·РµРјРїР»СЏСЂ apiService
      final response = await apiService.post('/login', {
        'email': email,
        'password': password,
      });

      if (response.statusCode == 200) {
        // 2. РР·РІР»РµРєР°РµРј token РёР· response.data
        final token = response.data['token'] as String?;
        if (token != null && token.isNotEmpty) {
          // 3. РЎРѕС…СЂР°РЅСЏРµРј token РІ SecureStorage С‡РµСЂРµР· authRepository
          await authRepository.saveToken(token);
          return true;
        }
      }
      return false;
    } catch (e) {
      rethrow;
    }
  }

  Future<void> logout() async {
    try {
      // 1. РћС‚РїСЂР°РІР»СЏРµРј Р·Р°РїСЂРѕСЃ РЅР° logout (РµСЃР»Рё РЅСѓР¶РЅРѕ)
      await apiService.post('/logout', {});
    } catch (e) {
      // РїСЂРѕРїСѓСЃРєР°РµРј
    } finally {
      // 2. РЈРґР°Р»СЏРµРј Р»РѕРєР°Р»СЊРЅС‹Р№ С‚РѕРєРµРЅ
      await authRepository.deleteToken();
    }
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\auth\data\auth_repository.dart =====

// lib/features/auth/data/auth_repository.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

final authRepositoryProvider = Provider<AuthRepository>((ref) {
  return AuthRepository();
});

class AuthRepository {
  static const _tokenKey = '2|NvXjOtpSsbjmxDOKaSNMXuDItgiO1S6DPWsBMfTs3461f7b3';
  final FlutterSecureStorage _storage = const FlutterSecureStorage();

  Future<void> saveToken(String token) async {
    await _storage.write(key: _tokenKey, value: token);
  }

  Future<String?> getToken() async {
    return await _storage.read(key: _tokenKey);
  }

  Future<void> deleteToken() async {
    await _storage.delete(key: _tokenKey);
  }

  Future<bool> isAuthenticated() async {
    final token = await getToken();
    return token != null && token.isNotEmpty;
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\auth\presentation\login_screen.dart =====

// lib/features/auth/presentation/login_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_buttons/custom_primary_button.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../data/auth_repository.dart';
// import '../../../core/repository/auth_repository.dart';

class LoginScreen extends ConsumerStatefulWidget {
  const LoginScreen({super.key});

  @override
  ConsumerState<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends ConsumerState<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  String? _error;

  Future<void> _login() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      // Р’ СЂРµР°Р»СЊРЅРѕРј РїСЂРёР»РѕР¶РµРЅРёРё: Р·Р°РїСЂРѕСЃ Рє API
      final token = 'mocked_token'; // Р—Р°РіР»СѓС€РєР°
      await ref.read(authRepositoryProvider).saveToken(token);

      if (context.mounted) {
        Navigator.pushReplacementNamed(context, '/home');
      }
    } catch (e) {
      setState(() {
        _error = 'РћС€РёР±РєР° Р°РІС‚РѕСЂРёР·Р°С†РёРё: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Р’С…РѕРґ')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            if (_error != null)
              Text(_error!, style: const TextStyle(color: Colors.red)),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'РџР°СЂРѕР»СЊ'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            _isLoading
                ? const CircularProgressIndicator()
                : CustomPrimaryButton(
              onPressed: _login,
              text: 'Р’РѕР№С‚Рё',
            ),
          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\auth\presentation\register_screen.dart =====

// lib/features/auth/presentation/register_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_buttons/custom_primary_button.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  String? _error;

  Future<void> _register() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      // Р’ СЂРµР°Р»СЊРЅРѕРј РїСЂРёР»РѕР¶РµРЅРёРё: Р·Р°РїСЂРѕСЃ Рє API
      await Future.delayed(const Duration(seconds: 1)); // Р—Р°РіР»СѓС€РєР°

      if (context.mounted) {
        Navigator.pop(context); // Р’РѕР·РІСЂР°С‚ РЅР° СЌРєСЂР°РЅ Р»РѕРіРёРЅР°
      }
    } catch (e) {
      setState(() {
        _error = 'РћС€РёР±РєР° СЂРµРіРёСЃС‚СЂР°С†РёРё: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Р РµРіРёСЃС‚СЂР°С†РёСЏ')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            if (_error != null)
              Text(_error!, style: const TextStyle(color: Colors.red)),
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'РРјСЏ'),
            ),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'РџР°СЂРѕР»СЊ'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            _isLoading
                ? const CircularProgressIndicator()
                : CustomPrimaryButton(
              onPressed: _register,
              text: 'Р—Р°СЂРµРіРёСЃС‚СЂРёСЂРѕРІР°С‚СЊСЃСЏ',
            ),
          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\budget\presentation\budget_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';

import '../../../common/widgets/custom_draggable_scrollable_sheet.dart';
import '../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../common/widgets/custom_text_form_field.dart';
import '../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

class BudgetScreen extends StatefulWidget {
  @override
  _BudgetScreenState createState() => _BudgetScreenState();
}

class _BudgetScreenState extends State<BudgetScreen> {
  final Map<String, double?> categoryBudgets = {
    'Groceries': 800,
    'Transport': 0,
    'Payments': 2500,
    'Cafes': null,
    'Clothes': 3000,
    'Entertainment': null,
    'Health': 400,
    'Gifts': 300,
    'Family': 500,
  };
  final Map<String, double?> categoryLimits = {
    'Groceries': 1000,
    'Transport': 2000,
    'Payments': 3300,
    'Cafes': null,
    'Clothes': 5000,
    'Entertainment': null,
    'Health': 5000,
    'Gifts': 20000,
    'Family': 1000,
  };

  @override
  Widget build(BuildContext context) {
    double totalSpent = categoryBudgets.values.fold<double>(
      0.0, // РќР°С‡Р°Р»СЊРЅРѕРµ Р·РЅР°С‡РµРЅРёРµ Р°РєРєСѓРјСѓР»СЏС‚РѕСЂР° (0.0)
          (previousValue, currentValue) {
        if (currentValue != null) {
          return previousValue + currentValue;
        } else {
          return previousValue; // РџСЂРѕРїСѓСЃРєР°РµРј null Р·РЅР°С‡РµРЅРёРµ
        }
      },
    );
    double totalBudget = categoryLimits.values.fold<double>(
      0.0, // РќР°С‡Р°Р»СЊРЅРѕРµ Р·РЅР°С‡РµРЅРёРµ Р°РєРєСѓРјСѓР»СЏС‚РѕСЂР° (0.0)
          (previousValue, currentValue) {
        if (currentValue != null) {
          return previousValue + currentValue;
        } else {
          return previousValue; // РџСЂРѕРїСѓСЃРєР°РµРј null Р·РЅР°С‡РµРЅРёРµ
        }
      },
    );
    double progress = totalSpent / totalBudget;

    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(DateFormat('MMMM yyyy').format(DateTime.now()), style: TextStyle(fontSize: 16, color: Colors.grey)),
            SizedBox(height: 8),
            Text('${totalSpent.toInt()} в‚ё', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
            LinearProgressIndicator(
              value: progress,
              minHeight: 10,
              backgroundColor: CustomColors.mainLightGrey,
              valueColor: AlwaysStoppedAnimation<Color>(CustomColors.mainBlue),
            ),
            Text('${LocaleKeys.totalBudgetForAMonth.tr()}: ${totalBudget.toInt()} в‚ё', style: TextStyle(color: Colors.grey)),
            SizedBox(height: 16),
            GridView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3, childAspectRatio: 0.8),
              itemCount: categoryBudgets.length,
              itemBuilder: (context, index) {
                String category = categoryBudgets.keys.elementAt(index);
                double? spent = categoryBudgets[category];
                double? limit = categoryLimits[category];
                double? progress;
                (spent != null && limit != null) ?  progress = spent / limit : 0;
                return CategoryWidget(
                  category: category.tr(), // Р›РѕРєР°Р»РёР·СѓРµРј РЅР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё
                  spent: spent,
                  limit: limit,
                  progress: progress,
                  onSetBudget: () => _setBudget(category),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  void _setBudget(String category) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true, // РџРѕР·РІРѕР»СЏРµС‚ Р»РёСЃС‚Сѓ Р·Р°РЅРёРјР°С‚СЊ Р±РѕР»СЊС€Рµ РїРѕР»РѕРІРёРЅС‹ СЌРєСЂР°РЅР°
      backgroundColor: Colors.transparent, // РџСЂРѕР·СЂР°С‡РЅС‹Р№ С„РѕРЅ, С‡С‚РѕР±С‹ Р±С‹Р»Рѕ РІРёРґРЅРѕ СЃРєСЂСѓРіР»РµРЅРёРµ Container
      builder: (context) {
        double newLimit = categoryLimits[category] ?? 0;
        List<Widget> fields = [
          // РџРѕР»Рµ "Limit"
          CustomTextFormField(
            labelText: LocaleKeys.limit.tr(), // Р›РµР№Р±Р» РїРѕР»СЏ -> LocaleKeys.limit
            inputFormatters: [
              FilteringTextInputFormatter.digitsOnly
            ],
            keyboardType: TextInputType.number,
            onChanged: (value) {
              newLimit = double.tryParse(value) ?? newLimit;
            },
          ),
          const SizedBox(height: 16), // РћС‚СЃС‚СѓРї РјРµР¶РґСѓ РїРѕР»СЏРјРё

          // РљРЅРѕРїРєР° "Save"
          CustomPrimaryButton(
            onPressed: () {
              // TODO: Р РµР°Р»РёР·РѕРІР°С‚СЊ Р»РѕРіРёРєСѓ СЃРѕС…СЂР°РЅРµРЅРёСЏ РёР·РјРµРЅРµРЅРёР№ СЃС‡РµС‚Р°
              setState(() {
                categoryLimits[category] = newLimit;
              });
              Navigator.pop(context);
            },
            text: LocaleKeys.save.tr(), // "Save" -> LocaleKeys.save
          ),
        ];
        return CustomDraggableScrollableSheet(fields: fields, title: '${LocaleKeys.setLimitFor.tr()} ${category.tr()}'); // Р›РѕРєР°Р»РёР·СѓРµРј Р·Р°РіРѕР»РѕРІРѕРє
      },
    );
  }
}

class CategoryWidget extends StatelessWidget {
  final String category;
  final double? spent;
  final double? limit;
  final double? progress;
  final VoidCallback onSetBudget;

  const CategoryWidget({super.key,
    required this.category,
    this.spent,
    this.limit,
    this.progress,
    required this.onSetBudget,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Stack(
          alignment: Alignment.center,
          children: [
            SizedBox(
              width: 60,
              height: 60,
              child: CircularProgressIndicator(
                value: progress ?? 0,
                strokeWidth: 5,
                backgroundColor: progress != null ? CustomColors.mainGrey : CustomColors.background,
                valueColor: AlwaysStoppedAnimation<Color>(CustomColors.mainGreen),
              ),
            ),
            Icon(Icons.shopping_cart, size: 32),
          ],
        ),
        SizedBox(height: 4),
        Text(category, style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
        progress != null
            ? Text('${spent?.toInt()} / ${limit?.toInt()} в‚ё', style: TextStyle(fontSize: 12, color: Colors.black54))
            : ElevatedButton(
          onPressed: onSetBudget,
          style: ElevatedButton.styleFrom(
            foregroundColor: CustomColors.mainWhite,
            backgroundColor: CustomColors.mainBlue,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            // РСЃРїРѕР»СЊР·СѓРµРј РєРѕРјРїР°РєС‚РЅСѓСЋ РІРёР·СѓР°Р»СЊРЅСѓСЋ РїР»РѕС‚РЅРѕСЃС‚СЊ
            visualDensity: VisualDensity.compact,
          ),
          child: Icon(Icons.add),
        )
      ],
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\main\presentation\main_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_divider.dart';
import 'package:flutter_app_1/generated/locale_keys.g.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../core/theme/custom_colors.dart';
import '../../../core/theme/custom_text_styles.dart';
import '../../accounts/presentation/accounts_screen.dart';
import '../../budget/presentation/budget_screen.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ BudgetScreen РјРѕР¶РµС‚ Р±С‹С‚СЊ const РµСЃР»Рё РІРѕР·РјРѕР¶РЅРѕ
import '../../reports/presentation/reports_screen.dart';
import '../../settings/presentation/settings_screen.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ SettingsScreen РјРѕР¶РµС‚ Р±С‹С‚СЊ const РµСЃР»Рё РІРѕР·РјРѕР¶РЅРѕ
import '../../transactions/presentation/screens/transaction_create_screen.dart';
import '../../../main.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ bottomNavProvider Р·РґРµСЃСЊ

// !!! РРњРџРћР РўРР РЈР•Рњ Provider'С‹ РєРѕРјР°РЅРґ Рё С„СѓРЅРєС†РёСЋ РїРѕРєР°Р·Р° Р»РёСЃС‚Р°
import '../../teams/presentation/providers/team_provider.dart';
import '../../teams/presentation/widgets/team_selector_bottom_sheet.dart';


class MainScreen extends ConsumerWidget {
  const MainScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentScreenIndex = ref.watch(bottomNavProvider);
    // !!! РЎРјРѕС‚СЂРёРј Р·Р° РІС‹Р±СЂР°РЅРЅРѕР№ РєРѕРјР°РЅРґРѕР№ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ РІ AppBar
    final selectedTeam = ref.watch(selectedTeamProvider);

    // РЎРїРёСЃРѕРє СЌРєСЂР°РЅРѕРІ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№, СѓР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РІСЃРµ const, РіРґРµ РІРѕР·РјРѕР¶РЅРѕ)
    final List<Widget> screens = [
      const AccountsScreen(),
      BudgetScreen(),
      const TransactionCreateScreen(),
      const ReportsScreen(),
      // const TransactionsScreen(),
      SettingsScreen(),
    ];

    // !!! РљР°СЂС‚Р° РґР»СЏ С…СЂР°РЅРµРЅРёСЏ Р·Р°РіРѕР»РѕРІРєРѕРІ AppBar РґР»СЏ РєР°Р¶РґРѕРіРѕ СЌРєСЂР°РЅР°
    Map<int, String> appBarTitles = {
      0: LocaleKeys.accounts.tr(),
      1: LocaleKeys.budget.tr(),
      2: LocaleKeys.add.tr(),
      3: LocaleKeys.reports.tr(),
      4: LocaleKeys.settings.tr(),
    };

    final double bottomNavigationBarIconsSize = 30.0;

    return SafeArea( // SafeArea РѕР±С‹С‡РЅРѕ РѕР±РѕСЂР°С‡РёРІР°РµС‚ Scaffold, Р° РЅРµ РµРіРѕ body
      child: Scaffold(
        appBar: AppBar(
          // !!! РР—РњР•РќР•РќРћ: РЈСЃР»РѕРІРЅС‹Р№ Р·Р°РіРѕР»РѕРІРѕРє AppBar
          title: appBarTitles.containsKey(currentScreenIndex)
              ? Text(
            appBarTitles[currentScreenIndex]!,
            style: CustomTextStyles.normalMedium.copyWith(
              color: CustomColors.onPrimary,
              fontWeight: FontWeight.bold,
            ),
          )
              : null, // Р•СЃР»Рё РЅРµС‚ Р·Р°РіРѕР»РѕРІРєР° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ, РјРѕР¶РЅРѕ РѕСЃС‚Р°РІРёС‚СЊ null

          actions: [
            selectedTeam == null
                ? const SizedBox()
                : InkWell(
              onTap: () {
                // РџСЂРё РЅР°Р¶Р°С‚РёРё РїРѕРєР°Р·С‹РІР°РµРј bottom sheet РІС‹Р±РѕСЂР° РєРѕРјР°РЅРґС‹
                showTeamSelectorBottomSheet(context);
              },
              child: Padding(
                padding: const EdgeInsets.all(8),
                child: Row(
                  children: [
                    const Icon(
                      Icons.keyboard_arrow_down,
                      size: 20,
                      color: CustomColors.onPrimary,
                    ),
                    const SizedBox(width: 4),
                    Text(
                      selectedTeam.name,
                      style: CustomTextStyles.normalMedium.copyWith(
                        color: CustomColors.onPrimary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(width: 16),
                  ],
                ),
              ),
            ),
          ],
        ),
        body: screens[currentScreenIndex], // РћС‚РѕР±СЂР°Р¶Р°РµРј РІС‹Р±СЂР°РЅРЅС‹Р№ СЌРєСЂР°РЅ
        bottomNavigationBar: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const CustomDivider(),
            BottomNavigationBar(
              type: BottomNavigationBarType.fixed,
              backgroundColor: CustomColors.background,
              selectedItemColor: CustomColors.primary,
              selectedLabelStyle: CustomTextStyles.normalMedium.copyWith(
                fontSize: 10,
                fontWeight: FontWeight.w500,
                color: CustomColors.primary,
              ),
              unselectedItemColor: CustomColors.mainGrey,
              showSelectedLabels: true,
              elevation: 1.5,
              currentIndex: currentScreenIndex,
              onTap: (index) {
                // РћР±РЅРѕРІР»СЏРµРј РІС‹Р±СЂР°РЅРЅС‹Р№ РёРЅРґРµРєСЃ РЅР°РІРёРіР°С†РёРѕРЅРЅРѕР№ РїР°РЅРµР»Рё
                ref.read(bottomNavProvider.notifier).state = index;
              },
              items: [
                BottomNavigationBarItem(icon: Icon(Icons.account_balance_wallet), label: LocaleKeys.accounts.tr()),
                BottomNavigationBarItem(icon: Icon(Icons.account_balance), label: LocaleKeys.budget.tr()),
                BottomNavigationBarItem(icon: Icon(Icons.add_circle_outlined, size: 40,), label: LocaleKeys.add.tr()), // "Add" -> LocaleKeys.add
                BottomNavigationBarItem(icon: Icon(Icons.analytics),label: LocaleKeys.reports.tr()),
                BottomNavigationBarItem(icon: Icon(Icons.settings), label: LocaleKeys.settings.tr()),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\projects\data\project_provider.dart =====

// lib/features/projects/presentation/providers/project_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'domain/project.dart';

class ProjectNotifier extends StateNotifier<List<Project>> {
  ProjectNotifier() : super([]);

  int _nextProjectId = 1;

  void addProject(String name, String description) {
    final newProject = Project(id: _nextProjectId++, name: name, description: description);
    state = [...state, newProject];
  }

  void updateProject(int id, String name, String description) {
    state = [
      for (final project in state)
        if (project.id == id)
          project.copyWith(name: name, description: description)
        else
          project,
    ];
  }

  void deleteProject(int id) {
    state = state.where((project) => project.id != id).toList();
  }
}

final projectsProvider = StateNotifierProvider<ProjectNotifier, List<Project>>((ref) {
  return ProjectNotifier();
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\projects\data\domain\project.dart =====

// lib/features/projects/domain/models/project.dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'project.freezed.dart';
part 'project.g.dart';

@freezed
class Project with _$Project {
  const Project._();

  const factory Project({
    required int id,
    required String name,
    required String description,
  }) = _Project;

  factory Project.fromJson(Map<String, dynamic> json) => _$ProjectFromJson(json);

  @override
  dynamic noSuchMethod(Invocation invocation) => super.noSuchMethod(invocation);
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\projects\data\domain\project.freezed.dart =====

// dart format width=80
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'project.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

// dart format off
T _$identity<T>(T value) => value;

/// @nodoc
mixin _$Project {

 int get id; String get name; String get description;
/// Create a copy of Project
/// with the given fields replaced by the non-null parameter values.
@JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
$ProjectCopyWith<Project> get copyWith => _$ProjectCopyWithImpl<Project>(this as Project, _$identity);

  /// Serializes this Project to a JSON map.
  Map<String, dynamic> toJson();


@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is Project&&(identical(other.id, id) || other.id == id)&&(identical(other.name, name) || other.name == name)&&(identical(other.description, description) || other.description == description));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,name,description);

@override
String toString() {
  return 'Project(id: $id, name: $name, description: $description)';
}


}

/// @nodoc
abstract mixin class $ProjectCopyWith<$Res>  {
  factory $ProjectCopyWith(Project value, $Res Function(Project) _then) = _$ProjectCopyWithImpl;
@useResult
$Res call({
 int id, String name, String description
});




}
/// @nodoc
class _$ProjectCopyWithImpl<$Res>
    implements $ProjectCopyWith<$Res> {
  _$ProjectCopyWithImpl(this._self, this._then);

  final Project _self;
  final $Res Function(Project) _then;

/// Create a copy of Project
/// with the given fields replaced by the non-null parameter values.
@pragma('vm:prefer-inline') @override $Res call({Object? id = null,Object? name = null,Object? description = null,}) {
  return _then(_self.copyWith(
id: null == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int,name: null == name ? _self.name : name // ignore: cast_nullable_to_non_nullable
as String,description: null == description ? _self.description : description // ignore: cast_nullable_to_non_nullable
as String,
  ));
}

}


/// @nodoc
@JsonSerializable()

class _Project extends Project {
  const _Project({required this.id, required this.name, required this.description}): super._();
  factory _Project.fromJson(Map<String, dynamic> json) => _$ProjectFromJson(json);

@override final  int id;
@override final  String name;
@override final  String description;

/// Create a copy of Project
/// with the given fields replaced by the non-null parameter values.
@override @JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
_$ProjectCopyWith<_Project> get copyWith => __$ProjectCopyWithImpl<_Project>(this, _$identity);

@override
Map<String, dynamic> toJson() {
  return _$ProjectToJson(this, );
}

@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is _Project&&(identical(other.id, id) || other.id == id)&&(identical(other.name, name) || other.name == name)&&(identical(other.description, description) || other.description == description));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,name,description);

@override
String toString() {
  return 'Project(id: $id, name: $name, description: $description)';
}


}

/// @nodoc
abstract mixin class _$ProjectCopyWith<$Res> implements $ProjectCopyWith<$Res> {
  factory _$ProjectCopyWith(_Project value, $Res Function(_Project) _then) = __$ProjectCopyWithImpl;
@override @useResult
$Res call({
 int id, String name, String description
});




}
/// @nodoc
class __$ProjectCopyWithImpl<$Res>
    implements _$ProjectCopyWith<$Res> {
  __$ProjectCopyWithImpl(this._self, this._then);

  final _Project _self;
  final $Res Function(_Project) _then;

/// Create a copy of Project
/// with the given fields replaced by the non-null parameter values.
@override @pragma('vm:prefer-inline') $Res call({Object? id = null,Object? name = null,Object? description = null,}) {
  return _then(_Project(
id: null == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int,name: null == name ? _self.name : name // ignore: cast_nullable_to_non_nullable
as String,description: null == description ? _self.description : description // ignore: cast_nullable_to_non_nullable
as String,
  ));
}


}

// dart format on
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\projects\data\domain\project.g.dart =====

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'project.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_Project _$ProjectFromJson(Map<String, dynamic> json) => _Project(
  id: (json['id'] as num).toInt(),
  name: json['name'] as String,
  description: json['description'] as String,
);

Map<String, dynamic> _$ProjectToJson(_Project instance) => <String, dynamic>{
  'id': instance.id,
  'name': instance.name,
  'description': instance.description,
};
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\projects\presentation\edit_project_screen.dart =====

// lib/features/projects/presentation/screens/edit_project_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../common/widgets/custom_text_form_field.dart';
import '../data/domain/project.dart';
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

class EditProjectScreen extends ConsumerStatefulWidget {
  final Project? initialProject;

  const EditProjectScreen({super.key, this.initialProject});

  @override
  ConsumerState<EditProjectScreen> createState() => _EditProjectScreenState();
}

class _EditProjectScreenState extends ConsumerState<EditProjectScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();

  @override
  void initState() {
    super.initState();
    if (widget.initialProject != null) {
      _nameController.text = widget.initialProject!.name;
      _descriptionController.text = widget.initialProject!.description;
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.initialProject != null;

    return Scaffold(
      appBar: AppBar(
        title: Text(isEditing ? LocaleKeys.editProject.tr() : LocaleKeys.addProject.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              CustomTextFormField(
                labelText: LocaleKeys.projectName.tr(),
                controller: _nameController,
                validator: (value) => value?.trim().isEmpty == true ? LocaleKeys.projectNameCannotBeEmpty.tr() : null,
              ),
              const SizedBox(height: 16),
              CustomTextFormField(
                labelText: LocaleKeys.projectDescription.tr(),
                controller: _descriptionController,
              ),
              const SizedBox(height: 24),
              CustomPrimaryButton(
                text: isEditing ? LocaleKeys.save.tr() : LocaleKeys.add.tr(),
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    final name = _nameController.text.trim();
                    final description = _descriptionController.text.trim();
                    if (isEditing) {
                      // !!! Р—РђР“Р›РЈРЁРљРђ: Р РµР°Р»РёР·СѓР№С‚Рµ Р»РѕРіРёРєСѓ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ РїСЂРѕРµРєС‚Р°
                      print('Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ РїСЂРѕРµРєС‚ ID: ${widget.initialProject!.id}, Name: $name, Description: $description');
                      // ref.read(projectsProvider.notifier).updateProject(widget.initialProject!.id, name, description);
                    } else {
                      // !!! Р—РђР“Р›РЈРЁРљРђ: Р РµР°Р»РёР·СѓР№С‚Рµ Р»РѕРіРёРєСѓ РґРѕР±Р°РІР»РµРЅРёСЏ РЅРѕРІРѕРіРѕ РїСЂРѕРµРєС‚Р°
                      print('Р”РѕР±Р°РІРёС‚СЊ РїСЂРѕРµРєС‚ Name: $name, Description: $description');
                      // ref.read(projectsProvider.notifier).addProject(name, description);
                    }
                    Navigator.pop(context);
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\projects\presentation\projects_screen.dart =====

// lib/features/projects/presentation/screens/projects_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../common/widgets/custom_floating_action_button.dart';
import '../../../common/widgets/custom_list_view/custom_list_item.dart';
import '../../../common/widgets/custom_list_view/custom_list_view_separated.dart';
import '../data/domain/project.dart';
import 'edit_project_screen.dart';
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

// --- Riverpod Provider (Stub) ---
final projectsProvider = StateProvider<List<Project>>((ref) => [
  Project(id: 1, name: 'РџСЂРѕРµРєС‚ 1', description: 'РћРїРёСЃР°РЅРёРµ РїСЂРѕРµРєС‚Р° РЅРѕРјРµСЂ РѕРґРёРЅ, РєРѕС‚РѕСЂРѕРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РґРѕРІРѕР»СЊРЅРѕ РґР»РёРЅРЅС‹Рј Рё Р·Р°РЅРёРјР°С‚СЊ РЅРµСЃРєРѕР»СЊРєРѕ СЃС‚СЂРѕРє.'),
  Project(id: 2, name: 'Р’С‚РѕСЂРѕР№ РїСЂРѕРµРєС‚', description: 'РљСЂР°С‚РєРѕРµ РѕРїРёСЃР°РЅРёРµ РІС‚РѕСЂРѕРіРѕ РїСЂРѕРµРєС‚Р°.'),
  Project(id: 3, name: 'РџСЂРѕРµРєС‚ СЃ РѕС‡РµРЅСЊ РґР»РёРЅРЅС‹Рј РЅР°Р·РІР°РЅРёРµРј', description: 'РћРїРёСЃР°РЅРёРµ СЌС‚РѕРіРѕ РїСЂРѕРµРєС‚Р° С‚РѕР¶Рµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РѕС‡РµРЅСЊ РґР»РёРЅРЅС‹Рј, С‡С‚РѕР±С‹ РїСЂРѕРІРµСЂРёС‚СЊ РѕРіСЂР°РЅРёС‡РµРЅРёРµ РЅР° РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚СЂРѕРє РІ РїРѕРґР·Р°РіРѕР»РѕРІРєРµ.'),
]);

class ProjectsScreen extends ConsumerWidget {
  const ProjectsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final projects = ref.watch(projectsProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.projects.tr()),
      ),
      body: projects.isEmpty
          ? Center(child: Text(LocaleKeys.noProjects.tr()))
          : CustomListViewSeparated(
        items: projects,
        itemBuilder: (context, project) {
          return CustomListItem(
            titleText: project.name,
            subtitleText: project.description,
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => EditProjectScreen(initialProject: project),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: CustomFloatingActionButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const EditProjectScreen(), // Р”Р»СЏ РґРѕР±Р°РІР»РµРЅРёСЏ РЅРѕРІС‹Р№ РїСЂРѕРµРєС‚ Р±РµР· initialProject
            ),
          );
        },
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\reports\data\report_provider.dart =====

// import 'dart:convert';
// import 'package:flutter_riverpod/flutter_riverpod.dart';
// import '../../../core/api/api_service.dart';
//
// final reportProvider = FutureProvider<Map<String, dynamic>>((ref) async {
//   final response = await ApiService.get('/reports/summary');
//   if (response.statusCode == 200) {
//     return jsonDecode(response.body);
//   } else {
//     throw Exception('РћС€РёР±РєР° РїРѕР»СѓС‡РµРЅРёСЏ РѕС‚С‡С‘С‚РѕРІ');
//   }
// });
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\reports\presentation\category_report_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/transactions/presentation/widgets/transaction_list_widget.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє С‚РµРјР°Рј РїСЂР°РІРёР»СЊРЅС‹Рµ
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import 'package:intl/intl.dart'; // РџРѕС‚СЂРµР±СѓРµС‚СЃСЏ РґР»СЏ С„РѕСЂРјР°С‚РёСЂРѕРІР°РЅРёСЏ РґР°С‚С‹
import 'package:fl_chart/fl_chart.dart'; // РРјРїРѕСЂС‚ fl_chart
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

// TODO: РРјРїРѕСЂС‚РёСЂРѕРІР°С‚СЊ СЌРєСЂР°РЅ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№ РїРѕ РєР°С‚РµРіРѕСЂРёРё (Р·Р°РіР»СѓС€РєСѓ)
import 'category_transaction_list_screen.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№


// !!! Enum РґР»СЏ РІС‹Р±РѕСЂР° С‚РёРїР° РѕС‚С‡РµС‚Р° (Р Р°СЃС…РѕРґС‹/Р”РѕС…РѕРґС‹)
enum ReportType {
  expenses, // Р Р°СЃС…РѕРґС‹
  income,   // Р”РѕС…РѕРґС‹
}


// !!! Р—РђР“Р›РЈРЁРљРђ: РњРѕРґРµР»СЊ РґР°РЅРЅС‹С… РґР»СЏ РєР°С‚РµРіРѕСЂРёРё РІ РѕС‚С‡РµС‚Рµ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
class _ReportCategory {
  final String name;
  final Color color;
  final int transactionCount;
  final num totalAmount;

  _ReportCategory({
    required this.name,
    required this.color,
    required this.transactionCount,
    required this.totalAmount,
  });
}

// !!! Р—РђР“Р›РЈРЁРљРђ: Р”Р°РЅРЅС‹Рµ РѕС‚С‡РµС‚Р° РїРѕ РєР°С‚РµРіРѕСЂРёСЏРј (РѕСЃС‚Р°СЋС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
final List<_ReportCategory> _dummyExpenseCategories = [
  _ReportCategory(name: 'Products', color: Colors.red.shade400, transactionCount: 15, totalAmount: -12000),
  _ReportCategory(name: 'Transport', color: Colors.blue.shade400, transactionCount: 8, totalAmount: -5000),
  _ReportCategory(name: 'Cafe & Restaurants', color: Colors.green.shade400, transactionCount: 10, totalAmount: -8000),
  _ReportCategory(name: 'Entertainments', color: Colors.purple.shade400, transactionCount: 5, totalAmount: -6000),
  _ReportCategory(name: 'Health', color: Colors.orange.shade400, transactionCount: 3, totalAmount: -3000),
  _ReportCategory(name: 'Other', color: Colors.grey.shade400, transactionCount: 7, totalAmount: -4000),
];

final List<_ReportCategory> _dummyIncomeCategories = [
  _ReportCategory(name: 'Salary', color: Colors.teal.shade400, transactionCount: 1, totalAmount: 150000),
  _ReportCategory(name: 'Gifts', color: Colors.pink.shade400, transactionCount: 2, totalAmount: 10000),
  _ReportCategory(name: 'Other Income', color: Colors.brown.shade400, transactionCount: 3, totalAmount: 5000),
];

final num _dummyTotalExpenses = _dummyExpenseCategories.fold(0.0, (sum, cat) => sum + cat.totalAmount.abs());
final num _dummyTotalIncome = _dummyIncomeCategories.fold(0.0, (sum, cat) => sum + cat.totalAmount);


// Р­РєСЂР°РЅ РћС‚С‡РµС‚Р° РїРѕ РљР°С‚РµРіРѕСЂРёСЏРј (СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ СЃСЂРµРґРЅРµРјСѓ СЌРєСЂР°РЅСѓ РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ)
// StatefulWidget РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РІС‹Р±РѕСЂРѕРј С‚РёРїР° РѕС‚С‡РµС‚Р° Рё РґР°С‚С‹
class CategoryReportScreen extends StatefulWidget {
  const CategoryReportScreen({super.key});

  @override
  State<CategoryReportScreen> createState() => _CategoryReportScreenState();
}

class _CategoryReportScreenState extends State<CategoryReportScreen> {
  // !!! РџРµСЂРµРјРµРЅРЅР°СЏ СЃРѕСЃС‚РѕСЏРЅРёСЏ РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕРіРѕ С‚РёРїР° РѕС‚С‡РµС‚Р° (РёСЃРїРѕР»СЊР·СѓРµРј Enum)
  ReportType _selectedReportType = ReportType.expenses; // РџРѕ СѓРјРѕР»С‡Р°РЅРёСЋ - Р Р°СЃС…РѕРґС‹

  // РџРµСЂРµРјРµРЅРЅС‹Рµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕРіРѕ РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РѕСЃС‚Р°СЋС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
  late DateTime _startDate;
  late DateTime _endDate;

  @override
  void initState() {
    super.initState();
    // РРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
    final now = DateTime.now();
    _startDate = DateTime(now.year, now.month, 1);
    _endDate = DateTime(now.year, now.month + 1, 0);
  }

  // Р¤СѓРЅРєС†РёСЏ РїРѕРєР°Р·Р° РїРёРєРµСЂР° РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
  Future<void> _selectDateRange(BuildContext context) async {
    final picked = await showDateRangePicker(
      context: context,
      initialEntryMode: DatePickerEntryMode.calendarOnly,
      initialDateRange: DateTimeRange(start: _startDate, end: _endDate),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
      // TODO: РќР°СЃС‚СЂРѕРёС‚СЊ СЃС‚РёР»Рё РїРёРєРµСЂР° РґР°С‚С‹
    );
    if (picked != null) {
      setState(() {
        _startDate = picked.start;
        _endDate = picked.end;
        // TODO: Р—Р°РіСЂСѓР·РёС‚СЊ СЂРµР°Р»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ РѕС‚С‡РµС‚Р° РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕРіРѕ РґРёР°РїР°Р·РѕРЅР° РґР°С‚
        // Р—РґРµСЃСЊ РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РІС‹Р·РІР°С‚СЊ Р»РѕРіРёРєСѓ Р·Р°РіСЂСѓР·РєРё РґР°РЅРЅС‹С…, РїРµСЂРµРґР°РІР°СЏ _startDate, _endDate Рё _selectedReportType
      });
    }
  }

  // Р¤СѓРЅРєС†РёСЏ РЅР°РІРёРіР°С†РёРё РЅР° СЌРєСЂР°РЅ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№ РїРѕ РІС‹Р±СЂР°РЅРЅРѕР№ РєР°С‚РµРіРѕСЂРёРё (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
  void _navigateToCategoryTransactions(BuildContext context, _ReportCategory category) {
    // TODO: РџРµСЂРµРґР°С‚СЊ СЃСЋРґР° РґРёР°РїР°Р·РѕРЅ РґР°С‚, С‚РёРї РѕС‚С‡РµС‚Р° Рё РґСЂСѓРіРёРµ РЅСѓР¶РЅС‹Рµ РґР°РЅРЅС‹Рµ
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CategoryTransactionListScreen(), // РџРµСЂРµРґР°РµРј РЅР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё (Р·Р°РіР»СѓС€РєР°)
        // TODO: РџРµСЂРµРґР°РІР°С‚СЊ categoryId, startDate, endDate, selectedReportType Рё С‚.Рґ.
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // !!! РћРїСЂРµРґРµР»СЏРµРј, РєР°РєРёРµ РґР°РЅРЅС‹Рµ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ _selectedReportType
    List<_ReportCategory> currentCategories =
    _selectedReportType == ReportType.expenses
        ? _dummyExpenseCategories.toList() // РЎРѕР·РґР°РµРј РєРѕРїРёСЋ, С‡С‚РѕР±С‹ РЅРµ РёР·РјРµРЅСЏС‚СЊ РѕСЂРёРіРёРЅР°Р»
        : _dummyIncomeCategories.toList(); // РЎРѕР·РґР°РµРј РєРѕРїРёСЋ

    // !!! РЎРѕСЂС‚РёСЂСѓРµРј СЃРїРёСЃРѕРє РїРѕ СѓР±С‹РІР°РЅРёСЋ totalAmount
    currentCategories.sort((a, b) {
      // Р”Р»СЏ СЂР°СЃС…РѕРґРѕРІ (РѕС‚СЂРёС†Р°С‚РµР»СЊРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ) СЃРѕСЂС‚РёСЂСѓРµРј РїРѕ Р°Р±СЃРѕР»СЋС‚РЅРѕРјСѓ Р·РЅР°С‡РµРЅРёСЋ
      if (_selectedReportType == ReportType.expenses) {
        return b.totalAmount.abs().compareTo(a.totalAmount.abs());
      } else {
        // Р”Р»СЏ РґРѕС…РѕРґРѕРІ (РїРѕР»РѕР¶РёС‚РµР»СЊРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ) СЃРѕСЂС‚РёСЂСѓРµРј РїРѕ РѕР±С‹С‡РЅРѕРјСѓ СѓР±С‹РІР°РЅРёСЋ
        return b.totalAmount.compareTo(a.totalAmount);
      }
    });

    final num totalAmount = _selectedReportType == ReportType.expenses
        ? _dummyTotalExpenses
        : _dummyTotalIncome;

    // Р¤РѕСЂРјР°С‚РёСЂСѓРµРј РІС‹Р±СЂР°РЅРЅС‹Р№ РґРёР°РїР°Р·РѕРЅ РґР°С‚ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ РІ AppBar Рё СЃС‚СЂРѕРєРµ РґР°С‚С‹ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
    final DateFormat formatter = DateFormat('dd.MM.yy');
    final String formattedDateRange = '${formatter.format(_startDate)} - ${formatter.format(_endDate)}';

    // !!! РЎРѕР·РґР°РµРј Map РґР»СЏ children CupertinoSlidingSegmentedControl
    final Map<ReportType, Widget> segmentChildren = {
      ReportType.expenses: Padding(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Text(
          LocaleKeys.expense.tr(), // РўРµРєСЃС‚ РєР°Рє РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ -> LocaleKeys.expense
        ),
      ),
      ReportType.income: Padding(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Text(
          LocaleKeys.income.tr(), // РўРµРєСЃС‚ РєР°Рє РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ -> LocaleKeys.income
        ),
      ),
    };

    // !!! РЎРѕР·РґР°РµРј РґР°РЅРЅС‹Рµ РґР»СЏ РєРѕР»СЊС†РµРІРѕР№ РґРёР°РіСЂР°РјРјС‹
    List<PieChartSectionData> _generateChartData() {
      return currentCategories.asMap().entries.map((entry) {
        final index = entry.key;
        final category = entry.value;
        final double percentage = totalAmount > 0
            ? (category.totalAmount.abs() / totalAmount) * 100
            : 0.0;
        const double radius = 50;

        return PieChartSectionData(
          value: percentage,
          color: category.color,
          title: '${percentage.toStringAsFixed(1)}%',
          radius: radius,
          titlePositionPercentageOffset: 0.5,
          titleStyle: CustomTextStyles.normalSmall.copyWith(fontWeight: FontWeight.bold, color: Colors.white),
        );
      }).toList();
    }

    return Scaffold(
      appBar: AppBar(
        // Р—Р°РіРѕР»РѕРІРѕРє AppBar - РІС‹Р±СЂР°РЅРЅС‹Р№ РґРёР°РїР°Р·РѕРЅ РґР°С‚ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
        title: Text(
          LocaleKeys.reportByCategories.tr(), // "Report by category" -> LocaleKeys.reportByCategories
          style: CustomTextStyles.normalMedium.copyWith(
            fontWeight: FontWeight.bold,
            color: CustomColors.onPrimary,
          ),
        ),
      ),
      body: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(10.0),
            child: CupertinoSlidingSegmentedControl<ReportType>(
              children: segmentChildren, // Map СЃРµРіРјРµРЅС‚РѕРІ
              backgroundColor: CustomColors.mainLightGrey,
              thumbColor: CustomColors.mainWhite,
              groupValue: _selectedReportType, // РўРµРєСѓС‰РёР№ РІС‹Р±СЂР°РЅРЅС‹Р№ СЃРµРіРјРµРЅС‚
              onValueChanged: (ReportType? newValue) { // РћР±СЂР°Р±РѕС‚С‡РёРє РёР·РјРµРЅРµРЅРёСЏ
                if (newValue != null) {
                  setState(() {
                    _selectedReportType = newValue;
                    // TODO: Р—Р°РіСЂСѓР·РёС‚СЊ СЂРµР°Р»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ РѕС‚С‡РµС‚Р° РґР»СЏ РЅРѕРІРѕРіРѕ С‚РёРїР° (Р Р°СЃС…РѕРґС‹/Р”РѕС…РѕРґС‹)
                    // Р—РґРµСЃСЊ РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РІС‹Р·РІР°С‚СЊ Р»РѕРіРёРєСѓ Р·Р°РіСЂСѓР·РєРё РґР°РЅРЅС‹С…, РїРµСЂРµРґР°РІР°СЏ _selectedReportType Рё С‚РµРєСѓС‰РёР№ РґРёР°РїР°Р·РѕРЅ РґР°С‚
                  });
                }
              },
            ),
          ),

          // РЎРµР»РµРєС‚РѕСЂ РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РќР°Р¶РёРјР°РµРјР°СЏ СЃС‚СЂРѕРєР°) (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
          InkWell(
            onTap: () => _selectDateRange(context),
            borderRadius: BorderRadius.circular(8.0),
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              color: CustomColors.mainLightGrey,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(
                    child: Row(
                      children: [
                        Text(
                          formattedDateRange,
                          style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(width: 8),
                        Icon(CupertinoIcons.chevron_down)
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),

          // РЎРµРєС†РёСЏ СЃ РєРѕР»СЊС†РµРІРѕР№ РґРёР°РіСЂР°РјРјРѕР№
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: SizedBox(
              width: 200,
              height: 200,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  PieChart(
                    PieChartData(
                      sectionsSpace: 0,
                      centerSpaceRadius: 60,
                      sections: _generateChartData(),
                    ),
                  ),
                  // РўРµРєСЃС‚ РїРѕ С†РµРЅС‚СЂСѓ РґРёР°РіСЂР°РјРјС‹ (РѕР±С‰Р°СЏ СЃСѓРјРјР°)
                  Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        _selectedReportType == ReportType.expenses ? '${LocaleKeys.totalExpenses.tr()}:' : '${LocaleKeys.totalIncome.tr()}:', // РњРµС‚РєР° СЃСѓРјРјС‹ Р·Р°РІРёСЃРёС‚ РѕС‚ РІС‹Р±РѕСЂР° -> LocaleKeys.totalExpenses/totalIncome
                        style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey),
                      ),
                      Text(
                        '${totalAmount.toStringAsFixed(0)} ${LocaleKeys.tenge_short.tr()}', // РћР±С‰Р°СЏ СЃСѓРјРјР° Р·Р°РІРёСЃРёС‚ РѕС‚ РІС‹Р±РѕСЂР° + РІР°Р»СЋС‚Р°
                        style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),

          // РЎРµРєС†РёСЏ СЃРѕ СЃРїРёСЃРєРѕРј РєР°С‚РµРіРѕСЂРёР№ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№, РєСЂРѕРјРµ РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ)
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 0),
              itemCount: currentCategories.length,
              itemBuilder: (context, index) {
                final category = currentCategories[index];
                final double percentage = totalAmount > 0
                    ? (category.totalAmount.abs() / totalAmount) * 100
                    : 0.0;
                final double fillWidthFactor = percentage / 100.0;

                return Card(
                  margin: const EdgeInsets.symmetric(vertical: 4.0),
                  elevation: 0.5,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                  child: InkWell(
                    onTap: () {
                      print('РќР°Р¶Р°С‚Р° РєР°С‚РµРіРѕСЂРёСЏ: ${category.name}');
                      _navigateToCategoryTransactions(context, category);
                    },
                    child: Stack(
                      children: [
                        // Р¤РѕРЅРѕРІР°СЏ Р·Р°Р»РёРІРєР°, Р·Р°РЅРёРјР°СЋС‰Р°СЏ РІСЃСЋ РІС‹СЃРѕС‚Сѓ Stack
                        Positioned.fill(
                          child: Align(
                            alignment: Alignment.centerLeft,
                            child: FractionallySizedBox(
                              widthFactor: fillWidthFactor,
                              heightFactor: 1.0, // Р—Р°РЅРёРјР°РµРј РІСЃСЋ РІС‹СЃРѕС‚Сѓ
                              child: Container(
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(8.0),
                                  color: category.color.withOpacity(0.3),
                                  // gradient: LinearGradient(...),
                                ),
                              ),
                            ),
                          ),
                        ),

                        // РћСЃРЅРѕРІРЅРѕР№ РєРѕРЅС‚РµРЅС‚ СЌР»РµРјРµРЅС‚Р° СЃРїРёСЃРєР°
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                          child: Row(
                            children: [
                              // Container(
                              //   width: 16,
                              //   height: 16,
                              //   decoration: BoxDecoration(
                              //     shape: BoxShape.circle,
                              //     color: category.color,
                              //   ),
                              // ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      category.name.tr(), // Р›РѕРєР°Р»РёР·СѓРµРј РЅР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё
                                      style: CustomTextStyles.normalMedium,
                                    ),
                                    Text(
                                      '${category.transactionCount} ${LocaleKeys.transaction.plural(category.transactionCount)}', // Р›РѕРєР°Р»РёР·Р°С†РёСЏ СЃР»РѕРІР° "transaction"
                                      style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey),
                                    ),
                                  ],
                                ),
                              ),
                              const SizedBox(width: 12),
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.end,
                                children: [
                                  Text(
                                    '${_selectedReportType == ReportType.expenses ? category.totalAmount.abs().toStringAsFixed(0) : category.totalAmount.toStringAsFixed(0)} ${LocaleKeys.tenge_short.tr()}',
                                    style: CustomTextStyles.normalMedium,
                                  ),
                                  Text(
                                    '${percentage.toStringAsFixed(1)} %',
                                    style: CustomTextStyles.normalSmall.copyWith(fontWeight: FontWeight.bold),
                                  ),
                                ],
                              ),
                              const SizedBox(width: 8),
                              const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\reports\presentation\category_transaction_list_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ Рє bottom sheet'Сѓ РїСЂР°РІРёР»СЊРЅС‹Р№ (РµСЃР»Рё РѕРЅ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ)
import 'package:flutter_app_1/features/accounts/presentation/widgets/edit_account_bottom_sheet.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє С‚РµРјР°Рј Рё СЂР°Р·РґРµР»РёС‚РµР»СЋ РїСЂР°РІРёР»СЊРЅС‹Рµ
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import '../../../../common/widgets/custom_divider.dart'; // РџСЂРµРґРїРѕР»Р°РіР°РµС‚СЃСЏ, С‡С‚Рѕ CustomDivider РґРѕСЃС‚СѓРїРµРЅ
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

// !!! РРњРџРћР РўРР РЈР•Рњ РћР‘Р©РЈР® РњРћР”Р•Р›Р¬ Account РёР· РґРѕРјРµРЅРЅРѕРіРѕ СЃР»РѕСЏ


// !!! РРњРџРћР РўРР РЈР•Рњ Р­РљР РђРќ Р”Р•РўРђР›Р•Р™ РўР РђРќР—РђРљР¦РР (Р—РђР“Р›РЈРЁРљРђ)
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№.

import '../../../common/widgets/custom_amount_text.dart';
import '../../transactions/presentation/screens/transaction_detail_screen.dart';
import '../../transactions/presentation/widgets/transaction_list_widget.dart';





// Р­РєСЂР°РЅ РґРµС‚Р°Р»РµР№ СЃС‡РµС‚Р°
class CategoryTransactionListScreen extends StatelessWidget {
  // final TransactionCategory transactionCategory; // РџСЂРёРЅРёРјР°РµРј РѕР±СЉРµРєС‚ РѕР±С‰РµР№ РјРѕРґРµР»Рё

  const CategoryTransactionListScreen({super.key,
    // required this.transactionCategory
  });

  @override
  Widget build(BuildContext context) {


    return Scaffold( // Scaffold СѓР¶Рµ РїСЂРµРґРѕСЃС‚Р°РІР»СЏРµС‚ SafeArea РІ body РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
      appBar: AppBar(
        // РљРЅРѕРїРєР° "РЅР°Р·Р°Рґ" РѕР±С‹С‡РЅРѕ РґРѕР±Р°РІР»СЏРµС‚СЃСЏ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё РїСЂРё РЅР°РІРёРіР°С†РёРё С‡РµСЂРµР· Navigator.push
        // Р—Р°РіРѕР»РѕРІРѕРє СЃ РЅР°Р·РІР°РЅРёРµРј СЃС‡РµС‚Р° РёР· РѕР±СЉРµРєС‚Р° Account
        title: Text(
          'Category Name'.tr(), // РСЃРїРѕР»СЊР·СѓРµРј РЅР°Р·РІР°РЅРёРµ СЃС‡РµС‚Р° РёР· РїРµСЂРµРґР°РЅРЅРѕРіРѕ РѕР±СЉРµРєС‚Р° Account
          // transactionCategory.name,
          style: CustomTextStyles.normalMedium.copyWith( // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ РґР»СЏ Р·Р°РіРѕР»РѕРІРєР° AppBar
            fontWeight: FontWeight.bold,
            color: CustomColors.onPrimary, // Р¦РІРµС‚ С‚РµРєСЃС‚Р° РІ AppBar
          ),
        ),
      ),
      body: Column( // РСЃРїРѕР»СЊР·СѓРµРј Column РґР»СЏ РѕР±С‰РµРіРѕ РІРµСЂС‚РёРєР°Р»СЊРЅРѕРіРѕ РјР°РєРµС‚Р°
        children: [
          // РЎРµРєС†РёСЏ Р±Р°Р»Р°РЅСЃР° СЃС‡РµС‚Р°
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0), // РќР°СЃС‚СЂР°РёРІР°РµРј РѕС‚СЃС‚СѓРїС‹
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start, // Р’С‹СЂР°РІРЅРёРІР°РЅРёРµ С‚РµРєСЃС‚Р° РїРѕ Р»РµРІРѕРјСѓ РєСЂР°СЋ
              children: [
                // !!! РћС‚РѕР±СЂР°Р¶РµРЅРёРµ С‚РµРєСѓС‰РµРіРѕ Р±Р°Р»Р°РЅСЃР° СЃС‡РµС‚Р° РёР· РїРµСЂРµРґР°РЅРЅРѕРіРѕ РѕР±СЉРµРєС‚Р° Account
                Text(
                  // РСЃРїРѕР»СЊР·СѓРµРј РѕРїРµСЂР°С‚РѕСЂ ?. РґР»СЏ Р±РµР·РѕРїР°СЃРЅРѕРіРѕ РґРѕСЃС‚СѓРїР° Рє balance, РµСЃР»Рё РѕРЅ РјРѕР¶РµС‚ Р±С‹С‚СЊ null
                  '${LocaleKeys.total.tr()}: 150000 ${LocaleKeys.tenge_short.tr()}', // РџРѕРєР°Р·С‹РІР°РµРј N/A РµСЃР»Рё balance null
                  style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
                ),
                const SizedBox(height: 4), // РќРµР±РѕР»СЊС€РѕР№ РІРµСЂС‚РёРєР°Р»СЊРЅС‹Р№ РѕС‚СЃС‚СѓРї
                // !!! Р—РђР“Р›РЈРЁРљРђ: Р’С‚РѕСЂР°СЏ СЃС‚СЂРѕРєР° СЃ РґР°С‚РѕР№ Рё РёР·РјРµРЅРµРЅРёРµРј Р±Р°Р»Р°РЅСЃР°
                // TODO: Р Р°СЃСЃС‡РёС‚С‹РІР°С‚СЊ СЌС‚Сѓ СЃС‚СЂРѕРєСѓ РґРёРЅР°РјРёС‡РµСЃРєРё РёР· РёС‚РѕРіРѕРІ Р·Р° РґРµРЅСЊ
                Text(
                  '20 april (-5 000 ${LocaleKeys.tenge_short.tr()})', // РџСЂРёРјРµСЂ С‚РµРєСЃС‚Р° РёР· СЃРєСЂРёРЅС€РѕС‚Р°
                  style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
                ),
              ],
            ),
          ),
          const CustomDivider(), // Р Р°Р·РґРµР»РёС‚РµР»СЊ РїРѕСЃР»Рµ СЃРµРєС†РёРё Р±Р°Р»Р°РЅСЃР°

          // РЎРµРєС†РёСЏ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№ СЃС‡РµС‚Р°
          Expanded( // Expanded Р·Р°СЃС‚Р°РІР»СЏРµС‚ СЃРїРёСЃРѕРє С‚СЂР°РЅР·Р°РєС†РёР№ Р·Р°РЅСЏС‚СЊ РІСЃРµ РѕСЃС‚Р°РІС€РµРµСЃСЏ РїСЂРѕСЃС‚СЂР°РЅСЃС‚РІРѕ
            child: TransactionListWidget(),
          ),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\reports\presentation\project_report_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/transactions/presentation/widgets/transaction_list_widget.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє С‚РµРјР°Рј РїСЂР°РІРёР»СЊРЅС‹Рµ
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import 'package:intl/intl.dart'; // РџРѕС‚СЂРµР±СѓРµС‚СЃСЏ РґР»СЏ С„РѕСЂРјР°С‚РёСЂРѕРІР°РЅРёСЏ РґР°С‚С‹
import 'package:fl_chart/fl_chart.dart'; // РРјРїРѕСЂС‚ fl_chart
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

// TODO: РРјРїРѕСЂС‚РёСЂРѕРІР°С‚СЊ СЌРєСЂР°РЅ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№ РїРѕ РєР°С‚РµРіРѕСЂРёРё (Р·Р°РіР»СѓС€РєСѓ)
import 'category_transaction_list_screen.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№


// !!! Enum РґР»СЏ РІС‹Р±РѕСЂР° С‚РёРїР° РѕС‚С‡РµС‚Р° (Р Р°СЃС…РѕРґС‹/Р”РѕС…РѕРґС‹)
enum ReportType {
  expenses, // Р Р°СЃС…РѕРґС‹
  income,   // Р”РѕС…РѕРґС‹
}


// !!! Р—РђР“Р›РЈРЁРљРђ: РњРѕРґРµР»СЊ РґР°РЅРЅС‹С… РґР»СЏ РєР°С‚РµРіРѕСЂРёРё РІ РѕС‚С‡РµС‚Рµ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
class _ReportCategory {
  final String name;
  final Color color;
  final int transactionCount;
  final num totalAmount;

  _ReportCategory({
    required this.name,
    required this.color,
    required this.transactionCount,
    required this.totalAmount,
  });
}

// !!! Р—РђР“Р›РЈРЁРљРђ: Р”Р°РЅРЅС‹Рµ РѕС‚С‡РµС‚Р° РїРѕ РєР°С‚РµРіРѕСЂРёСЏРј (РѕСЃС‚Р°СЋС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
final List<_ReportCategory> _dummyExpenseCategories = [
  _ReportCategory(name: 'Products', color: Colors.red.shade400, transactionCount: 15, totalAmount: -12000),
  _ReportCategory(name: 'Transport', color: Colors.blue.shade400, transactionCount: 8, totalAmount: -5000),
  _ReportCategory(name: 'Cafe & Restaurants', color: Colors.green.shade400, transactionCount: 10, totalAmount: -8000),
  _ReportCategory(name: 'Entertainments', color: Colors.purple.shade400, transactionCount: 5, totalAmount: -6000),
  _ReportCategory(name: 'Health', color: Colors.orange.shade400, transactionCount: 3, totalAmount: -3000),
  _ReportCategory(name: 'Other', color: Colors.grey.shade400, transactionCount: 7, totalAmount: -4000),
];

final List<_ReportCategory> _dummyIncomeCategories = [
  _ReportCategory(name: 'Salary', color: Colors.teal.shade400, transactionCount: 1, totalAmount: 150000),
  _ReportCategory(name: 'Gifts', color: Colors.pink.shade400, transactionCount: 2, totalAmount: 10000),
  _ReportCategory(name: 'Other Income', color: Colors.brown.shade400, transactionCount: 3, totalAmount: 5000),
];

final num _dummyTotalExpenses = _dummyExpenseCategories.fold(0.0, (sum, cat) => sum + cat.totalAmount.abs());
final num _dummyTotalIncome = _dummyIncomeCategories.fold(0.0, (sum, cat) => sum + cat.totalAmount);


// Р­РєСЂР°РЅ РћС‚С‡РµС‚Р° РїРѕ РљР°С‚РµРіРѕСЂРёСЏРј (СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ СЃСЂРµРґРЅРµРјСѓ СЌРєСЂР°РЅСѓ РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ)
// StatefulWidget РґР»СЏ СѓРїСЂР°РІР»РµРЅРёСЏ РІС‹Р±РѕСЂРѕРј С‚РёРїР° РѕС‚С‡РµС‚Р° Рё РґР°С‚С‹
class ProjectReportScreen extends StatefulWidget {
  const ProjectReportScreen({super.key});

  @override
  State<ProjectReportScreen> createState() => _ProjectReportScreenState();
}

class _ProjectReportScreenState extends State<ProjectReportScreen> {
  // !!! РџРµСЂРµРјРµРЅРЅР°СЏ СЃРѕСЃС‚РѕСЏРЅРёСЏ РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕРіРѕ С‚РёРїР° РѕС‚С‡РµС‚Р° (РёСЃРїРѕР»СЊР·СѓРµРј Enum)
  ReportType _selectedReportType = ReportType.expenses; // РџРѕ СѓРјРѕР»С‡Р°РЅРёСЋ - Р Р°СЃС…РѕРґС‹

  // РџРµСЂРµРјРµРЅРЅС‹Рµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕРіРѕ РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РѕСЃС‚Р°СЋС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
  late DateTime _startDate;
  late DateTime _endDate;

  @override
  void initState() {
    super.initState();
    // РРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
    final now = DateTime.now();
    _startDate = DateTime(now.year, now.month, 1);
    _endDate = DateTime(now.year, now.month + 1, 0);
  }

  // Р¤СѓРЅРєС†РёСЏ РїРѕРєР°Р·Р° РїРёРєРµСЂР° РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
  Future<void> _selectDateRange(BuildContext context) async {
    final picked = await showDateRangePicker(
      context: context,
      initialEntryMode: DatePickerEntryMode.calendarOnly,
      initialDateRange: DateTimeRange(start: _startDate, end: _endDate),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
      // TODO: РќР°СЃС‚СЂРѕРёС‚СЊ СЃС‚РёР»Рё РїРёРєРµСЂР° РґР°С‚С‹
    );
    if (picked != null) {
      setState(() {
        _startDate = picked.start;
        _endDate = picked.end;
        // TODO: Р—Р°РіСЂСѓР·РёС‚СЊ СЂРµР°Р»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ РѕС‚С‡РµС‚Р° РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕРіРѕ РґРёР°РїР°Р·РѕРЅР° РґР°С‚
        // Р—РґРµСЃСЊ РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РІС‹Р·РІР°С‚СЊ Р»РѕРіРёРєСѓ Р·Р°РіСЂСѓР·РєРё РґР°РЅРЅС‹С…, РїРµСЂРµРґР°РІР°СЏ _startDate, _endDate Рё _selectedReportType
      });
    }
  }

  // Р¤СѓРЅРєС†РёСЏ РЅР°РІРёРіР°С†РёРё РЅР° СЌРєСЂР°РЅ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№ РїРѕ РІС‹Р±СЂР°РЅРЅРѕР№ РєР°С‚РµРіРѕСЂРёРё (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
  void _navigateToCategoryTransactions(BuildContext context, _ReportCategory category) {
    // TODO: РџРµСЂРµРґР°С‚СЊ СЃСЋРґР° РґРёР°РїР°Р·РѕРЅ РґР°С‚, С‚РёРї РѕС‚С‡РµС‚Р° Рё РґСЂСѓРіРёРµ РЅСѓР¶РЅС‹Рµ РґР°РЅРЅС‹Рµ
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CategoryTransactionListScreen(), // РџРµСЂРµРґР°РµРј РЅР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё (Р·Р°РіР»СѓС€РєР°)
        // TODO: РџРµСЂРµРґР°РІР°С‚СЊ categoryId, startDate, endDate, selectedReportType Рё С‚.Рґ.
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // !!! РћРїСЂРµРґРµР»СЏРµРј, РєР°РєРёРµ РґР°РЅРЅС‹Рµ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ _selectedReportType
    List<_ReportCategory> currentCategories =
    _selectedReportType == ReportType.expenses
        ? _dummyExpenseCategories.toList() // РЎРѕР·РґР°РµРј РєРѕРїРёСЋ, С‡С‚РѕР±С‹ РЅРµ РёР·РјРµРЅСЏС‚СЊ РѕСЂРёРіРёРЅР°Р»
        : _dummyIncomeCategories.toList(); // РЎРѕР·РґР°РµРј РєРѕРїРёСЋ

    // !!! РЎРѕСЂС‚РёСЂСѓРµРј СЃРїРёСЃРѕРє РїРѕ СѓР±С‹РІР°РЅРёСЋ totalAmount
    currentCategories.sort((a, b) {
      // Р”Р»СЏ СЂР°СЃС…РѕРґРѕРІ (РѕС‚СЂРёС†Р°С‚РµР»СЊРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ) СЃРѕСЂС‚РёСЂСѓРµРј РїРѕ Р°Р±СЃРѕР»СЋС‚РЅРѕРјСѓ Р·РЅР°С‡РµРЅРёСЋ
      if (_selectedReportType == ReportType.expenses) {
        return b.totalAmount.abs().compareTo(a.totalAmount.abs());
      } else {
        // Р”Р»СЏ РґРѕС…РѕРґРѕРІ (РїРѕР»РѕР¶РёС‚РµР»СЊРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ) СЃРѕСЂС‚РёСЂСѓРµРј РїРѕ РѕР±С‹С‡РЅРѕРјСѓ СѓР±С‹РІР°РЅРёСЋ
        return b.totalAmount.compareTo(a.totalAmount);
      }
    });

    final num totalAmount = _selectedReportType == ReportType.expenses
        ? _dummyTotalExpenses
        : _dummyTotalIncome;

    // Р¤РѕСЂРјР°С‚РёСЂСѓРµРј РІС‹Р±СЂР°РЅРЅС‹Р№ РґРёР°РїР°Р·РѕРЅ РґР°С‚ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ РІ AppBar Рё СЃС‚СЂРѕРєРµ РґР°С‚С‹ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
    final DateFormat formatter = DateFormat('dd.MM.yy');
    final String formattedDateRange = '${formatter.format(_startDate)} - ${formatter.format(_endDate)}';

    // !!! РЎРѕР·РґР°РµРј Map РґР»СЏ children CupertinoSlidingSegmentedControl
    final Map<ReportType, Widget> segmentChildren = {
      ReportType.expenses: Padding(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Text(
          LocaleKeys.expense.tr(), // РўРµРєСЃС‚ РєР°Рє РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ -> LocaleKeys.expense
        ),
      ),
      ReportType.income: Padding(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Text(
          LocaleKeys.income.tr(), // РўРµРєСЃС‚ РєР°Рє РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ -> LocaleKeys.income
        ),
      ),
    };

    // !!! РЎРѕР·РґР°РµРј РґР°РЅРЅС‹Рµ РґР»СЏ РєРѕР»СЊС†РµРІРѕР№ РґРёР°РіСЂР°РјРјС‹
    List<PieChartSectionData> _generateChartData() {
      return currentCategories.asMap().entries.map((entry) {
        final index = entry.key;
        final category = entry.value;
        final double percentage = totalAmount > 0
            ? (category.totalAmount.abs() / totalAmount) * 100
            : 0.0;
        const double radius = 50;

        return PieChartSectionData(
          value: percentage,
          color: category.color,
          title: '${percentage.toStringAsFixed(1)}%',
          radius: radius,
          titlePositionPercentageOffset: 0.5,
          titleStyle: CustomTextStyles.normalSmall.copyWith(fontWeight: FontWeight.bold, color: Colors.white),
        );
      }).toList();
    }

    return Scaffold(
      appBar: AppBar(
        // Р—Р°РіРѕР»РѕРІРѕРє AppBar - РІС‹Р±СЂР°РЅРЅС‹Р№ РґРёР°РїР°Р·РѕРЅ РґР°С‚ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
        title: Text(
          LocaleKeys.reportByCategories.tr(), // "Report by category" -> LocaleKeys.reportByCategories
          style: CustomTextStyles.normalMedium.copyWith(
            fontWeight: FontWeight.bold,
            color: CustomColors.onPrimary,
          ),
        ),
      ),
      body: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(10.0),
            child: CupertinoSlidingSegmentedControl<ReportType>(
              children: segmentChildren, // Map СЃРµРіРјРµРЅС‚РѕРІ
              backgroundColor: CustomColors.mainLightGrey,
              thumbColor: CustomColors.mainWhite,
              groupValue: _selectedReportType, // РўРµРєСѓС‰РёР№ РІС‹Р±СЂР°РЅРЅС‹Р№ СЃРµРіРјРµРЅС‚
              onValueChanged: (ReportType? newValue) { // РћР±СЂР°Р±РѕС‚С‡РёРє РёР·РјРµРЅРµРЅРёСЏ
                if (newValue != null) {
                  setState(() {
                    _selectedReportType = newValue;
                    // TODO: Р—Р°РіСЂСѓР·РёС‚СЊ СЂРµР°Р»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ РѕС‚С‡РµС‚Р° РґР»СЏ РЅРѕРІРѕРіРѕ С‚РёРїР° (Р Р°СЃС…РѕРґС‹/Р”РѕС…РѕРґС‹)
                    // Р—РґРµСЃСЊ РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РІС‹Р·РІР°С‚СЊ Р»РѕРіРёРєСѓ Р·Р°РіСЂСѓР·РєРё РґР°РЅРЅС‹С…, РїРµСЂРµРґР°РІР°СЏ _selectedReportType Рё С‚РµРєСѓС‰РёР№ РґРёР°РїР°Р·РѕРЅ РґР°С‚
                  });
                }
              },
            ),
          ),

          // РЎРµР»РµРєС‚РѕСЂ РґРёР°РїР°Р·РѕРЅР° РґР°С‚ (РќР°Р¶РёРјР°РµРјР°СЏ СЃС‚СЂРѕРєР°) (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
          InkWell(
            onTap: () => _selectDateRange(context),
            borderRadius: BorderRadius.circular(8.0),
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              color: CustomColors.mainLightGrey,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Center(
                    child: Row(
                      children: [
                        Text(
                          formattedDateRange,
                          style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(width: 8),
                        Icon(CupertinoIcons.chevron_down)
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),

          // РЎРµРєС†РёСЏ СЃ РєРѕР»СЊС†РµРІРѕР№ РґРёР°РіСЂР°РјРјРѕР№
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: SizedBox(
              width: 200,
              height: 200,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  PieChart(
                    PieChartData(
                      sectionsSpace: 0,
                      centerSpaceRadius: 60,
                      sections: _generateChartData(),
                    ),
                  ),
                  // РўРµРєСЃС‚ РїРѕ С†РµРЅС‚СЂСѓ РґРёР°РіСЂР°РјРјС‹ (РѕР±С‰Р°СЏ СЃСѓРјРјР°)
                  Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        _selectedReportType == ReportType.expenses ? '${LocaleKeys.totalExpenses.tr()}:' : '${LocaleKeys.totalIncome.tr()}:', // РњРµС‚РєР° СЃСѓРјРјС‹ Р·Р°РІРёСЃРёС‚ РѕС‚ РІС‹Р±РѕСЂР° -> LocaleKeys.totalExpenses/totalIncome
                        style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey),
                      ),
                      Text(
                        '${totalAmount.toStringAsFixed(0)} ${LocaleKeys.tenge_short.tr()}', // РћР±С‰Р°СЏ СЃСѓРјРјР° Р·Р°РІРёСЃРёС‚ РѕС‚ РІС‹Р±РѕСЂР° + РІР°Р»СЋС‚Р°
                        style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),

          // РЎРµРєС†РёСЏ СЃРѕ СЃРїРёСЃРєРѕРј РєР°С‚РµРіРѕСЂРёР№ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№, РєСЂРѕРјРµ РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ)
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 0),
              itemCount: currentCategories.length,
              itemBuilder: (context, index) {
                final category = currentCategories[index];
                final double percentage = totalAmount > 0
                    ? (category.totalAmount.abs() / totalAmount) * 100
                    : 0.0;
                final double fillWidthFactor = percentage / 100.0;

                return Card(
                  margin: const EdgeInsets.symmetric(vertical: 4.0),
                  elevation: 0.5,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                  child: InkWell(
                    onTap: () {
                      print('РќР°Р¶Р°С‚Р° РєР°С‚РµРіРѕСЂРёСЏ: ${category.name}');
                      _navigateToCategoryTransactions(context, category);
                    },
                    child: Stack(
                      children: [
                        // Р¤РѕРЅРѕРІР°СЏ Р·Р°Р»РёРІРєР°, Р·Р°РЅРёРјР°СЋС‰Р°СЏ РІСЃСЋ РІС‹СЃРѕС‚Сѓ Stack
                        Positioned.fill(
                          child: Align(
                            alignment: Alignment.centerLeft,
                            child: FractionallySizedBox(
                              widthFactor: fillWidthFactor,
                              heightFactor: 1.0, // Р—Р°РЅРёРјР°РµРј РІСЃСЋ РІС‹СЃРѕС‚Сѓ
                              child: Container(
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(8.0),
                                  color: category.color.withOpacity(0.3),
                                  // gradient: LinearGradient(...),
                                ),
                              ),
                            ),
                          ),
                        ),

                        // РћСЃРЅРѕРІРЅРѕР№ РєРѕРЅС‚РµРЅС‚ СЌР»РµРјРµРЅС‚Р° СЃРїРёСЃРєР°
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                          child: Row(
                            children: [
                              // Container(
                              //   width: 16,
                              //   height: 16,
                              //   decoration: BoxDecoration(
                              //     shape: BoxShape.circle,
                              //     color: category.color,
                              //   ),
                              // ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      category.name.tr(), // Р›РѕРєР°Р»РёР·СѓРµРј РЅР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё
                                      style: CustomTextStyles.normalMedium,
                                    ),
                                    Text(
                                      '${category.transactionCount} ${LocaleKeys.transaction.plural(category.transactionCount)}', // Р›РѕРєР°Р»РёР·Р°С†РёСЏ СЃР»РѕРІР° "transaction"
                                      style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey),
                                    ),
                                  ],
                                ),
                              ),
                              const SizedBox(width: 12),
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.end,
                                children: [
                                  Text(
                                    '${_selectedReportType == ReportType.expenses ? category.totalAmount.abs().toStringAsFixed(0) : category.totalAmount.toStringAsFixed(0)} ${LocaleKeys.tenge_short.tr()}',
                                    style: CustomTextStyles.normalMedium,
                                  ),
                                  Text(
                                    '${percentage.toStringAsFixed(1)} %',
                                    style: CustomTextStyles.normalSmall.copyWith(fontWeight: FontWeight.bold),
                                  ),
                                ],
                              ),
                              const SizedBox(width: 8),
                              const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\reports\presentation\reports_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_list_view/custom_list_view_separated.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє С‚РµРјР°Рј РїСЂР°РІРёР»СЊРЅС‹Рµ
import '../../../../core/theme/custom_colors.dart';
import '../../../../generated/locale_keys.g.dart'; // РРјРїРѕСЂС‚ LocaleKeys

// !!! РРњРџРћР РўРР РЈР•Рњ Р­РљР РђРќ РћРўР§Р•РўРђ РџРћ РљРђРўР•Р“РћР РРЇРњ
import '../../../common/widgets/custom_list_view/custom_list_item.dart';
import 'category_report_screen.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№

// TODO: РЎРѕР·РґР°С‚СЊ Рё РёРјРїРѕСЂС‚РёСЂРѕРІР°С‚СЊ СЌРєСЂР°РЅ РѕС‚С‡РµС‚Р° РїРѕ РїСЂРѕРµРєС‚Р°Рј (Р·Р°РіР»СѓС€РєСѓ)
// import 'project_report_screen.dart';
import 'project_report_screen.dart';

// Р­РєСЂР°РЅ РђРЅР°Р»РёС‚РёРєРё (СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ Р»РµРІРѕРјСѓ СЌРєСЂР°РЅСѓ РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ)
class ReportsScreen extends StatelessWidget {
  const ReportsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final List items = [
      [
        LocaleKeys.reportByCategories.tr(),
        Icons.chevron_right,
        const CategoryReportScreen(),
      ],
      [
        LocaleKeys.reportByProjects.tr(),
        Icons.chevron_right,
        const ProjectReportScreen(), // Р—Р°РіР»СѓС€РєР°, РїРѕРєР° РЅРµ СЂРµР°Р»РёР·РѕРІР°РЅ СЌРєСЂР°РЅ -> С‚РµРїРµСЂСЊ РёРјРїРѕСЂС‚РёСЂРѕРІР°РЅ
      ],
    ];
    return CustomListViewSeparated(
      items: items,
      itemBuilder: (context, item) { // item Р·РґРµСЃСЊ РёРјРµРµС‚ С‚РёРї Account
        return CustomListItem(
          titleText: item[0], // РСЃРїРѕР»СЊР·СѓРµРј item[0] РґР»СЏ Р·Р°РіРѕР»РѕРІРєР° (СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ title РІ UI)
          trailing: Row( // Trailing РѕСЃС‚Р°РµС‚СЃСЏ РІРёРґР¶РµС‚РѕРј Row, РёСЃРїРѕР»СЊР·СѓРµРј item.balance
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
            ],
          ),
          onTap: item[2] != null
              ? () {
            // !!! РќРђР’РР“РђР¦РРЇ РќРђ Р­РљР РђРќ РћРўР§Р•РўРђ РџРћ РљРђРўР•Р“РћР РРЇРњ
            Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (context) => item[2]), // РџРµСЂРµРґР°РµРј СЌРєСЂР°РЅ РѕС‚С‡РµС‚Р° РїРѕ РєР°С‚РµРіРѕСЂРёСЏРј
            );
          }
              : null, // Р•СЃР»Рё item[2] == null, С‚Рѕ РЅРµ РґРµР»Р°РµРј РЅРёС‡РµРіРѕ
        );
      },
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\settings\presentation\categories_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_list_view/custom_list_view_separated.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../common/widgets/custom_floating_action_button.dart';
import '../../../common/widgets/custom_list_view/custom_list_item.dart';
import '../../../common/widgets/custom_text_form_field.dart';
import '../../../../generated/locale_keys.g.dart'; // Import LocaleKeys

// --- Riverpod Providers (Stubs) ---
final expenseCategoriesProvider = Provider((ref) => ExpenseCategoriesNotifier());
final incomeCategoriesProvider = Provider((ref) => IncomeCategoriesNotifier());

class ExpenseCategoriesNotifier {
  final List<String> _categories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']; // Р—Р°РіР»СѓС€РєР° РґР°РЅРЅС‹С…

  List<String> get categories => _categories;

  void addCategory(String newCategory) {
    _categories.add(newCategory);
    print('Added new expense category: $newCategory');
  }

  void editCategory(String oldCategory, String newCategory) {
    final index = _categories.indexOf(oldCategory);
    if (index != -1) {
      _categories[index] = newCategory;
      print('Edited expense category from $oldCategory to $newCategory');
    }
  }
}

class IncomeCategoriesNotifier {
  final List<String> _categories = ['Category 1', 'Category 2', 'Category 3', 'Category 4']; // Р—Р°РіР»СѓС€РєР° РґР°РЅРЅС‹С…

  List<String> get categories => _categories;

  void addCategory(String newCategory) {
    _categories.add(newCategory);
    print('Added new income category: $newCategory');
  }

  void editCategory(String oldCategory, String newCategory) {
    final index = _categories.indexOf(oldCategory);
    if (index != -1) {
      _categories[index] = newCategory;
      print('Edited income category from $oldCategory to $newCategory');
    }
  }
}

// --- BottomSheet Widget ---
class _CategoryBottomSheet extends StatefulWidget {
  final String type;
  final String? initialCategoryName;

  const _CategoryBottomSheet({required this.type, this.initialCategoryName});

  @override
  State<_CategoryBottomSheet> createState() => _CategoryBottomSheetState();
}

class _CategoryBottomSheetState extends State<_CategoryBottomSheet> {
  final _formKey = GlobalKey<FormState>();
  final _categoryNameController = TextEditingController();

  @override
  void initState() {
    super.initState();
    if (widget.initialCategoryName != null) {
      _categoryNameController.text = widget.initialCategoryName!;
    }
  }

  @override
  void dispose() {
    _categoryNameController.dispose();
    super.dispose();
  }

  void _submit(WidgetRef ref) {
    if (_formKey.currentState!.validate()) {
      final categoryName = _categoryNameController.text.trim();
      if (categoryName.isNotEmpty) {
        if (widget.initialCategoryName == null) {
          // Р”РѕР±Р°РІР»РµРЅРёРµ РЅРѕРІРѕР№ РєР°С‚РµРіРѕСЂРёРё
          if (widget.type == 'expense') {
            ref.read(expenseCategoriesProvider).addCategory(categoryName);
          } else if (widget.type == 'income') {
            ref.read(incomeCategoriesProvider).addCategory(categoryName);
          }
          Navigator.pop(context);
        } else {
          // Р РµРґР°РєС‚РёСЂРѕРІР°РЅРёРµ СЃСѓС‰РµСЃС‚РІСѓСЋС‰РµР№ РєР°С‚РµРіРѕСЂРёРё
          if (widget.type == 'expense') {
            ref.read(expenseCategoriesProvider).editCategory(widget.initialCategoryName!, categoryName);
          } else if (widget.type == 'income') {
            ref.read(incomeCategoriesProvider).editCategory(widget.initialCategoryName!, categoryName);
          }
          Navigator.pop(context);
        }
      }
    }
  }

  String? _validateCategoryName(String? value) {
    if (value == null || value.trim().isEmpty) {
      return LocaleKeys.categoryNameCannotBeEmpty.tr();
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              widget.initialCategoryName == null
                  ? '${LocaleKeys.addNew.tr()} ${widget.type == 'expense' ? LocaleKeys.expense.tr() : LocaleKeys.income.tr()} ${LocaleKeys.category.tr()}'
                  : '${LocaleKeys.edit.tr()} ${widget.type == 'expense' ? LocaleKeys.expense.tr() : LocaleKeys.income.tr()} ${LocaleKeys.category.tr()}',
              style: Theme.of(context).textTheme.titleMedium,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            CustomTextFormField(
              labelText: LocaleKeys.categoryName.tr(),
              controller: _categoryNameController,
              validator: _validateCategoryName,
            ),
            const SizedBox(height: 24),
            Consumer(
              builder: (context, ref, _) => CustomPrimaryButton(
                text: widget.initialCategoryName == null ? LocaleKeys.addCategory.tr() : LocaleKeys.saveChanges.tr(),
                onPressed: () => _submit(ref),
              ),
            ),
            SizedBox(height: MediaQuery.of(context).viewInsets.bottom), // Adjust for keyboard
          ],
        ),
      ),
    );
  }
}

// --- UI Screen ---
class CategoriesScreen extends ConsumerWidget {
  const CategoriesScreen(this.type, {super.key});

  final String type;

  void _showCategoryBottomSheet(BuildContext context, WidgetRef ref, {String? initialCategoryName}) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true, // Allows the bottom sheet to take up more height
      builder: (BuildContext context) {
        return _CategoryBottomSheet(type: type, initialCategoryName: initialCategoryName);
      },
    );
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expenseCategoriesNotifier = ref.watch(expenseCategoriesProvider);
    final incomeCategoriesNotifier = ref.watch(incomeCategoriesProvider);

    final List<String> categories = switch (type) {
      'expense' => expenseCategoriesNotifier.categories,
      'income' => incomeCategoriesNotifier.categories,
      _ => [], // РћР±СЂР°Р±РѕС‚РєР° РЅРµРёР·РІРµСЃС‚РЅРѕРіРѕ С‚РёРїР° (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
    };

    return Scaffold(
      appBar: AppBar(
        title: Text('${type == 'expense' ? LocaleKeys.expenseCategories.tr() : LocaleKeys.incomeCategories.tr()}'),
      ),
      body: CustomListViewSeparated(
        items: categories,
        itemBuilder: (context, item) => CustomListItem(
          titleText: item.tr(), // Ensure the category names are also translatable if needed
          onTap: () => _showCategoryBottomSheet(context, ref, initialCategoryName: item), // Р”Р»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ
        ),
      ),
      floatingActionButton: CustomFloatingActionButton(
        onPressed: () => _showCategoryBottomSheet(context, ref), // Р”Р»СЏ РґРѕР±Р°РІР»РµРЅРёСЏ
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\settings\presentation\delete_options_screen.dart =====

// lib/features/settings/presentation/screens/delete_options_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../common/widgets/custom_list_view/custom_list_item.dart';
import '../../../common/widgets/custom_list_view/custom_list_view_separated.dart';
import '../../../../generated/locale_keys.g.dart'; // Import LocaleKeys

class DeleteOptionsScreen extends ConsumerWidget {
  const DeleteOptionsScreen({super.key});

  Future<void> _showDeleteProfileConfirmation(BuildContext context, WidgetRef ref) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: Text(LocaleKeys.confirmProfileDeletionTitle.tr()),
          content: Text(LocaleKeys.confirmProfileDeletionContent.tr()),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(dialogContext).pop(); // Р—Р°РєСЂС‹С‚СЊ РґРёР°Р»РѕРі
              },
              child: Text(LocaleKeys.cancel.tr()),
            ),
            TextButton(
              onPressed: () {
                print('Р—Р°РїСѓС‰РµРЅР° РїСЂРѕС†РµРґСѓСЂР° СѓРґР°Р»РµРЅРёСЏ РїСЂРѕС„РёР»СЏ');
                // !!! Р—РђР“Р›РЈРЁРљРђ: Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ СЂРµР°Р»СЊРЅР°СЏ Р»РѕРіРёРєР° СѓРґР°Р»РµРЅРёСЏ РїСЂРѕС„РёР»СЏ
                // ref.read(userProfileProvider.notifier).deleteProfile(); // РџСЂРёРјРµСЂ
                Navigator.of(dialogContext).pop();
                Navigator.of(context).pop(); // Р’РµСЂРЅСѓС‚СЊСЃСЏ РЅР° СЌРєСЂР°РЅ РЅР°СЃС‚СЂРѕРµРє
              },
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: Text(LocaleKeys.deleteProfile.tr()),
            ),
          ],
        );
      },
    );
  }

  Future<void> _showDeleteTransactionsConfirmation(BuildContext context, WidgetRef ref) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: Text(LocaleKeys.confirmDeleteAllTransactionsTitle.tr()),
          content: Text(LocaleKeys.confirmDeleteAllTransactionsContent.tr()),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(dialogContext).pop(); // Р—Р°РєСЂС‹С‚СЊ РґРёР°Р»РѕРі
              },
              child: Text(LocaleKeys.cancel.tr()),
            ),
            TextButton(
              onPressed: () {
                print('Р—Р°РїСѓС‰РµРЅР° РїСЂРѕС†РµРґСѓСЂР° СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№');
                // !!! Р—РђР“Р›РЈРЁРљРђ: Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ СЂРµР°Р»СЊРЅР°СЏ Р»РѕРіРёРєР° СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№
                // ref.read(transactionListProvider.notifier).deleteAllTransactions(); // РџСЂРёРјРµСЂ
                Navigator.of(dialogContext).pop();
                Navigator.of(context).pop(); // Р’РµСЂРЅСѓС‚СЊСЃСЏ РЅР° СЌРєСЂР°РЅ РЅР°СЃС‚СЂРѕРµРє
              },
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: Text(LocaleKeys.deleteAllTransactions.tr()),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final deleteOptions = [
      {
        'title': LocaleKeys.deleteProfile.tr(),
        'subtitle': LocaleKeys.deleteProfileSubtitle.tr(),
        'onTap': () => _showDeleteProfileConfirmation(context, ref),
      },
      {
        'title': LocaleKeys.deleteAllTransactions.tr(),
        'subtitle': LocaleKeys.deleteAllTransactionsSubtitle.tr(),
        'onTap': () => _showDeleteTransactionsConfirmation(context, ref),
      },
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.deleteProfileAndData.tr()),
      ),
      body: CustomListViewSeparated(
        items: deleteOptions,
        itemBuilder: (context, item) {
          return CustomListItem(
            titleText: item['title'] as String,
            subtitleText: item['subtitle'] as String?,
            onTap: item['onTap'] as VoidCallback?,
          );
        },
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\settings\presentation\delete_profile_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../generated/locale_keys.g.dart'; // Import LocaleKeys

// --- Riverpod Providers (Stubs) ---
final deleteDataProvider = Provider((ref) => DeleteDataNotifier());

class DeleteDataNotifier {
  Future<void> deleteAllData(BuildContext context) async {
    print('Attempting to delete all data...');
    bool? confirmed = await _showConfirmationDialog(
      context,
      LocaleKeys.confirmDeletion.tr(), // Р—Р°РіРѕР»РѕРІРѕРє РёР· РјР°РєРµС‚Р° -> LocaleKeys.confirmDeletion
      LocaleKeys.deleteAllDataConfirmation.tr(), // РўРµРєСЃС‚ РёР· РјР°РєРµС‚Р° -> LocaleKeys.deleteAllDataConfirmation
    );
    if (confirmed == true) {
      print('Confirmed: Deleting all data...');
      // Р—РґРµСЃСЊ Р»РѕРіРёРєР° СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… РґР°РЅРЅС‹С…
    } else {
      print('Cancelled: Delete all data');
    }
  }

  Future<void> deleteTransactionsOnly(BuildContext context) async {
    print('Attempting to delete transactions only...');
    bool? confirmed = await _showConfirmationDialog(
      context,
      LocaleKeys.confirmDeletion.tr(), // Р—Р°РіРѕР»РѕРІРѕРє РёР· РјР°РєРµС‚Р° -> LocaleKeys.confirmDeletion
      LocaleKeys.deleteTransactionsConfirmation.tr(), // РўРµРєСЃС‚ РёР· РјР°РєРµС‚Р° -> LocaleKeys.deleteTransactionsConfirmation
    );
    if (confirmed == true) {
      print('Confirmed: Deleting transactions only...');
      // Р—РґРµСЃСЊ Р»РѕРіРёРєР° СѓРґР°Р»РµРЅРёСЏ С‚РѕР»СЊРєРѕ С‚СЂР°РЅР·Р°РєС†РёР№
    } else {
      print('Cancelled: Delete transactions only');
    }
  }

  Future<bool?> _showConfirmationDialog(BuildContext context, String title, String content) {
    return showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(content),
          actions: <Widget>[
            TextButton(
              child: Text(LocaleKeys.cancel.tr()), // РўРµРєСЃС‚ РєРЅРѕРїРєРё РёР· РјР°РєРµС‚Р° -> LocaleKeys.cancel
              onPressed: () {
                Navigator.of(context).pop(false); // Р’РѕР·РІСЂР°С‰Р°РµРј false РїСЂРё РѕС‚РјРµРЅРµ
              },
            ),
            TextButton(
              child: Text(LocaleKeys.confirm.tr()), // РўРµРєСЃС‚ РєРЅРѕРїРєРё РёР· РјР°РєРµС‚Р° -> LocaleKeys.confirm
              onPressed: () {
                Navigator.of(context).pop(true); // Р’РѕР·РІСЂР°С‰Р°РµРј true РїСЂРё РїРѕРґС‚РІРµСЂР¶РґРµРЅРёРё
              },
            ),
          ],
        );
      },
    );
  }
}

// --- UI Screen ---
class DeleteProfileScreen extends ConsumerWidget {
  // РљРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ РјРѕР¶РµС‚ Р±С‹С‚СЊ const, РµСЃР»Рё РІСЃРµ РµРіРѕ РїР°СЂР°РјРµС‚СЂС‹ РјРѕРіСѓС‚ Р±С‹С‚СЊ const
  const DeleteProfileScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final deleteNotifier = ref.watch(deleteDataProvider);

    return Scaffold(
      appBar: AppBar(
        // РСЃРїРѕР»СЊР·СѓРµРј const, С‚Р°Рє РєР°Рє Text Р·РґРµСЃСЊ РєРѕРЅСЃС‚Р°РЅС‚РЅС‹Р№
        title: Text(LocaleKeys.deleteProfileAndData.tr()), // РњРѕР¶РЅРѕ СѓС‚РѕС‡РЅРёС‚СЊ Р·Р°РіРѕР»РѕРІРѕРє РїРѕ РјР°РєРµС‚Сѓ -> LocaleKeys.deleteProfileAndData
      ),
      body: ListView(
        children: <Widget>[
          // РЈР±РёСЂР°РµРј const РїРµСЂРµРґ ListTile, С‚.Рє. onTap РЅРµ РєРѕРЅСЃС‚Р°РЅС‚РЅС‹Р№
          ListTile(
            title: Text(LocaleKeys.deleteAllData.tr()), // const РґР»СЏ Text РґРѕРїСѓСЃС‚РёРј -> LocaleKeys.deleteAllData
            subtitle: Text(LocaleKeys.deleteAllDataSubtitle.tr()), // const РґР»СЏ Text РґРѕРїСѓСЃС‚РёРј -> LocaleKeys.deleteAllDataSubtitle
            onTap: () => deleteNotifier.deleteAllData(context), // Р­С‚Р° С„СѓРЅРєС†РёСЏ РЅРµ РєРѕРЅСЃС‚Р°РЅС‚Р°
          ),
          // РЈР±РёСЂР°РµРј const РїРµСЂРµРґ ListTile
          ListTile(
            title: Text(LocaleKeys.deleteTransactions.tr()), // const РґР»СЏ Text РґРѕРїСѓСЃС‚РёРј -> LocaleKeys.deleteTransactions
            subtitle: Text(LocaleKeys.deleteTransactionsOnlySubtitle.tr()), // const РґР»СЏ Text РґРѕРїСѓСЃС‚РёРј -> LocaleKeys.deleteTransactionsOnlySubtitle
            onTap: () => deleteNotifier.deleteTransactionsOnly(context), // Р­С‚Р° С„СѓРЅРєС†РёСЏ РЅРµ РєРѕРЅСЃС‚Р°РЅС‚Р°
          ),
        ],
      ),
      // РњРѕР¶РЅРѕ РґРѕР±Р°РІРёС‚СЊ BottomNavigationBar, РµСЃР»Рё РѕРЅ РЅСѓР¶РµРЅ РЅР° СЌС‚РѕРј СЌРєСЂР°РЅРµ
      // bottomNavigationBar: BottomNavigationBar( /* ... */ ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\settings\presentation\settings_screen.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/projects/presentation/projects_screen.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../common/widgets/custom_list_view/custom_list_item.dart';
import '../../../common/widgets/custom_list_view/custom_list_view_separated.dart';
import '../../../common/widgets/custom_picker_fields/picker_item.dart';
import '../../../common/widgets/custom_show_modal_bottom_sheet.dart';
import '../../../core/theme/custom_colors.dart';
import '../../../generated/locale_keys.g.dart';
import '../../teams/presentation/screens/teams_screen.dart';
import 'categories_screen.dart';
import 'delete_options_screen.dart';
import 'package:easy_localization/easy_localization.dart'; // РРјРїРѕСЂС‚ easy_localization

// --- Riverpod Providers ---
final settingsProvider = Provider((ref) => SettingsNotifier());
final themeModeProvider = StateProvider((ref) => ThemeMode.system);
final themeModeControllerProvider = Provider((ref) => ThemeModeController(ref));
final selectedLocaleProvider = StateProvider<Locale>((ref) => const Locale('ru', 'RU'));
final selectedCurrencyProvider = StateProvider((ref) => 'в‚ё РўРµРЅРіРµ (KZT)');

class ThemeModeController {
  final Ref ref;
  ThemeModeController(this.ref);

  Future<void> setTheme(ThemeMode mode) async {
    ref.read(themeModeProvider.notifier).state = mode;
    // TODO: Р—РґРµСЃСЊ РІ Р±СѓРґСѓС‰РµРј Р±СѓРґРµС‚ Р»РѕРіРёРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ С‚РµРјС‹
  }
}

class SettingsNotifier {
  Future<void> navigateToExpenseCategories(BuildContext context) async {
    Navigator.push(context, MaterialPageRoute(builder: (context) => const CategoriesScreen('expense')));
  }

  Future<void> navigateToIncomeCategories(BuildContext context) async {
    Navigator.push(context, MaterialPageRoute(builder: (context) => const CategoriesScreen('income')));
  }

  Future<void> showLanguageSelectionBottomSheet(BuildContext context, WidgetRef ref) async {
    final availableLanguages = [
      // PickerItem(id: const Locale('kk', 'KZ'), displayValue: 'ТљР°Р·Р°Т›'),
      PickerItem(id: const Locale('ru', 'RU'), displayValue: LocaleKeys.russian.tr()),
      PickerItem(id: const Locale('en', 'US'), displayValue: LocaleKeys.english.tr()),
    ];

    final pickedLocaleItem = await customShowModalBottomSheet<Locale>(
      context: context,
      title: LocaleKeys.selectLanguage.tr(), // РСЃРїРѕР»СЊР·СѓРµРј С„СѓРЅРєС†РёСЋ tr() РґР»СЏ Р»РѕРєР°Р»РёР·Р°С†РёРё
      type: 'line',
      items: availableLanguages,
    );

    if (pickedLocaleItem != null) {
      ref.read(selectedLocaleProvider.notifier).state = pickedLocaleItem.id;
      context.setLocale(pickedLocaleItem.id); // РњРµРЅСЏРµРј Р»РѕРєР°Р»СЊ РїСЂРёР»РѕР¶РµРЅРёСЏ
      print('Р’С‹Р±СЂР°РЅРЅС‹Р№ СЏР·С‹Рє: ${pickedLocaleItem.id.languageCode}');
      // Р—РґРµСЃСЊ Р±СѓРґРµС‚ Р»РѕРіРёРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ СЏР·С‹РєР° РІ РЅР°СЃС‚СЂРѕР№РєРё (РЅР°РїСЂРёРјРµСЂ, РІ SharedPreferences)
    }
  }

  Future<void> showCurrencySelectionBottomSheet(BuildContext context, WidgetRef ref) async {
    print('РџРѕРєР°Р·Р°С‚СЊ BottomSheet РІС‹Р±РѕСЂР° РІР°Р»СЋС‚С‹');
    final availableCurrencies = [
      'в‚ё ${LocaleKeys.tenge.tr()} (KZT)',
      '\$ ${LocaleKeys.dollar.tr()} (USD)',
      'в‚¬ ${LocaleKeys.euro.tr()} (EUR)'
    ]; // Р—Р°РіР»СѓС€РєР°

    final pickedCurrency = await customShowModalBottomSheet<String>(
      context: context,
      title: LocaleKeys.selectCurrency.tr(),
      type: 'line',
      items: availableCurrencies
          .map((currency) => PickerItem<String>(id: currency, displayValue: currency))
          .toList(),
    );

    if (pickedCurrency != null) {
      ref.read(selectedCurrencyProvider.notifier).state = pickedCurrency.id;
      // TODO: Р—РґРµСЃСЊ Р±СѓРґРµС‚ Р»РѕРіРёРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ РІР°Р»СЋС‚С‹ РІ РЅР°СЃС‚СЂРѕР№РєРё
    }
  }

  void navigateToProjectsScreen(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const ProjectsScreen()),
    );
    // Launch app store
  }

  void navigateToTeamsScreen(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const TeamsScreen()),
    );
    // Launch app store
  }

  void navigateToDeleteProfileAndData(BuildContext context) {
    print('РЈРґР°Р»РµРЅРёРµ');
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const DeleteOptionsScreen()),
    );
    // Launch app store
  }
}

// --- UI Screen ---
class SettingsScreen extends ConsumerWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentLocale = ref.watch(selectedLocaleProvider);
    final selectedCurrency = ref.watch(selectedCurrencyProvider);
    final settings = ref.watch(settingsProvider);

    final settingsItems = [
      {
        'icon': Icons.trending_down,
        'title': LocaleKeys.expenseCategories.tr(),
        'subtitle': null,
        'onTap': () => settings.navigateToExpenseCategories(context),
      },
      {
        'icon': Icons.trending_up,
        'title': LocaleKeys.incomeCategories.tr(),
        'subtitle': null,
        'onTap': () => settings.navigateToIncomeCategories(context),
      },
      {
        'icon': Icons.language,
        'title': LocaleKeys.language.tr(),
        'trailing': Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              switch (currentLocale.languageCode) {
                'kk' => 'ТљР°Р·Р°Т›',
                'ru' => LocaleKeys.russian.tr(),
                'en' => LocaleKeys.english.tr(),
                _ => '',
              },
            ),
            const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
          ],
        ),
        'onTap': () => settings.showLanguageSelectionBottomSheet(context, ref),
      },
      {
        'icon': Icons.currency_exchange,
        'title': LocaleKeys.defaultCurrency.tr(),
        'trailing': Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              selectedCurrency,
            ),
            const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
          ],
        ),
        'onTap': () => settings.showCurrencySelectionBottomSheet(context, ref),
      },
      {
        'icon': Icons.star,
        'title': LocaleKeys.projects.tr(),
        'trailing': const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
        'onTap': () => settings.navigateToProjectsScreen(context),
      },
      {
        'icon': Icons.work,
        'title': LocaleKeys.teams.tr(),
        'trailing': const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
        'onTap': () => settings.navigateToTeamsScreen(context),
      },
      {
        'icon': Icons.delete,
        'title': LocaleKeys.deleteProfileAndData.tr(),
        'trailing': const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
        'onTap': () => settings.navigateToDeleteProfileAndData(context),
      },
    ];

    return CustomListViewSeparated(
      items: settingsItems,
      itemBuilder: (context, item) {
        return CustomListItem(
          leading: Icon(item['icon'] as IconData, color: CustomColors.mainGrey),
          titleText: item['title'] as String,
          subtitleText: item['subtitle'] as String?,
          trailing: item.containsKey('trailing') ? item['trailing'] as Widget : const Icon(Icons.chevron_right, color: CustomColors.mainGrey),
          onTap: item['onTap'] as VoidCallback?,
        );
      },
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\domain\models\team.dart =====

class Team {
  /// Unique identifier for the team.
  final int id;

  /// Name of the team.
  final String name;

  Team({required this.id, required this.name});

  // Р”Р»СЏ СѓРґРѕР±СЃС‚РІР° СЃСЂР°РІРЅРµРЅРёСЏ РєРѕРјР°РЅРґ
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is Team &&
              runtimeType == other.runtimeType &&
              id == other.id;

  @override
  int get hashCode => id.hashCode;

  Team copyWith({
    int? id,
    String? name,
  }) {
    return Team(
      id: id ?? this.id,
      name: name ?? this.name,
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\presentation\providers\team_provider.dart =====

import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/models/team.dart'; // РРјРїРѕСЂС‚ РјРѕРґРµР»Рё Team

class TeamsNotifier extends StateNotifier<List<Team>> {
  TeamsNotifier([List<Team>? initialTeams]) : super(initialTeams ?? []);

  void addTeam(String name) {
    final newId = state.isEmpty ? 1 : state.last.id + 1;
    final newTeam = Team(id: newId, name: name);
    state = [...state, newTeam];
    print('Added team: $name with id: $newId');
  }

  void editTeam(int id, String newName) {
    state = state.map((team) {
      if (team.id == id) {
        return team.copyWith(name: newName);
      }
      return team;
    }).toList();
    print('Edited team $id to $newName');
  }

  void deleteTeam(int id) {
    state = state.where((team) => team.id != id).toList();
    print('Deleted team: $id');
  }
}

// Provider, РїСЂРµРґРѕСЃС‚Р°РІР»СЏСЋС‰РёР№ СЌРєР·РµРјРїР»СЏСЂ TeamsNotifier
final teamsProvider = StateNotifierProvider<TeamsNotifier, List<Team>>((ref) {
  // !!! Р—РђР“Р›РЈРЁРљРђ: Р—Р°РјРµРЅРёС‚Рµ РЅР° Р·Р°РіСЂСѓР·РєСѓ СЂРµР°Р»СЊРЅС‹С… РґР°РЅРЅС‹С…, РµСЃР»Рё РЅРµРѕР±С…РѕРґРёРјРѕ
  return TeamsNotifier([
    Team(id: 1, name: 'Private'),
    Team(id: 2, name: 'Team 1'),
    Team(id: 3, name: 'Team 2'),
  ]);
});

// Provider РґР»СЏ С…СЂР°РЅРµРЅРёСЏ С‚РµРєСѓС‰РµР№ РІС‹Р±СЂР°РЅРЅРѕР№ РєРѕРјР°РЅРґС‹ (РјРѕР¶РµС‚ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊСЃСЏ РІ РґСЂСѓРіРёС… С‡Р°СЃС‚СЏС… РїСЂРёР»РѕР¶РµРЅРёСЏ)
final selectedTeamProvider = StateProvider<Team?>((ref) {
  final teams = ref.watch(teamsProvider);
  return teams.isNotEmpty ? teams.first : null; // Р’С‹Р±РёСЂР°РµРј РїРµСЂРІС‹Р№ СЌР»РµРјРµРЅС‚, РµСЃР»Рё СЃРїРёСЃРѕРє РЅРµ РїСѓСЃС‚
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\presentation\screens\create_team_screen.dart =====

// lib/features/teams/presentation/screens/create_team_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../../common/widgets/custom_text_form_field.dart';
import '../../../../generated/locale_keys.g.dart';
import '../providers/team_provider.dart';

class CreateTeamScreen extends ConsumerStatefulWidget {
  const CreateTeamScreen({super.key});

  @override
  ConsumerState<CreateTeamScreen> createState() => _CreateTeamScreenState();
}

class _CreateTeamScreenState extends ConsumerState<CreateTeamScreen> {
  final _formKey = GlobalKey<FormState>();
  final _teamNameController = TextEditingController();

  @override
  void dispose() {
    _teamNameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.createTeam.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              CustomTextFormField(
                labelText: LocaleKeys.teamName.tr(),
                controller: _teamNameController,
                validator: (value) => value?.trim().isEmpty == true ? LocaleKeys.teamNameCannotBeEmpty.tr() : null,
              ),
              const SizedBox(height: 24),
              CustomPrimaryButton(
                text: LocaleKeys.create.tr(),
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    final teamName = _teamNameController.text.trim();
                    // !!! Р—РђР“Р›РЈРЁРљРђ: Р РµР°Р»РёР·СѓР№С‚Рµ Р»РѕРіРёРєСѓ РґРѕР±Р°РІР»РµРЅРёСЏ РЅРѕРІРѕР№ РєРѕРјР°РЅРґС‹
                    ref.read(teamsProvider.notifier).addTeam(teamName);
                    Navigator.pop(context);
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\presentation\screens\edit_team_screen.dart =====

// lib/features/teams/presentation/screens/edit_team_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../../common/widgets/custom_text_form_field.dart';
import '../../../../generated/locale_keys.g.dart';
import '../../domain/models/team.dart';
import '../providers/team_provider.dart';

class EditTeamScreen extends ConsumerStatefulWidget {
  final Team? initialTeam; // РњРѕР¶РµС‚ Р±С‹С‚СЊ null, РµСЃР»Рё СЌС‚Рѕ РґРѕР±Р°РІР»РµРЅРёРµ РЅРѕРІРѕР№ РєРѕРјР°РЅРґС‹

  const EditTeamScreen({super.key, this.initialTeam});

  @override
  ConsumerState<EditTeamScreen> createState() => _EditTeamScreenState();
}

class _EditTeamScreenState extends ConsumerState<EditTeamScreen> {
  final _formKey = GlobalKey<FormState>();
  final _teamNameController = TextEditingController();

  @override
  void initState() {
    super.initState();
    if (widget.initialTeam != null) {
      _teamNameController.text = widget.initialTeam!.name;
    }
  }

  @override
  void dispose() {
    _teamNameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.initialTeam != null;

    return Scaffold(
      appBar: AppBar(
        title: Text(isEditing ? LocaleKeys.edit.tr() : LocaleKeys.add.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              CustomTextFormField(
                labelText: LocaleKeys.name.tr(),
                controller: _teamNameController,
                validator: (value) => value?.trim().isEmpty == true ? LocaleKeys.teamNameCannotBeEmpty.tr() : null,
              ),
              const SizedBox(height: 24),
              CustomPrimaryButton(
                text: isEditing ? LocaleKeys.save.tr() : LocaleKeys.add.tr(),
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    final teamName = _teamNameController.text.trim();
                    if (isEditing) {
                      // !!! Р—РђР“Р›РЈРЁРљРђ: Р РµР°Р»РёР·СѓР№С‚Рµ Р»РѕРіРёРєСѓ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ РєРѕРјР°РЅРґС‹
                      ref.read(teamsProvider.notifier).editTeam(widget.initialTeam!.id, teamName);
                      Navigator.pop(context);
                    } else {
                      // !!! Р—РђР“Р›РЈРЁРљРђ: Р РµР°Р»РёР·СѓР№С‚Рµ Р»РѕРіРёРєСѓ РґРѕР±Р°РІР»РµРЅРёСЏ РЅРѕРІРѕР№ РєРѕРјР°РЅРґС‹
                      ref.read(teamsProvider.notifier).addTeam(teamName);
                      Navigator.pop(context);
                    }
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\presentation\screens\show_team_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../common/widgets/custom_list_view/custom_list_item.dart';
import '../../../../common/widgets/custom_list_view/custom_list_view_separated.dart';
import '../../../../core/models/user.dart';
import '../../../../generated/locale_keys.g.dart';
import '../../../users/presentation/user_details_screen.dart';
import '../../domain/models/team.dart';
import 'edit_team_screen.dart';

// --- Р­РєСЂР°РЅ РґРµС‚Р°Р»РµР№ РєРѕРјР°РЅРґС‹ ---
class ShowTeamScreen extends ConsumerWidget {
  final Team team;

  const ShowTeamScreen({super.key, required this.team});

  // !!! Р—РђР“Р›РЈРЁРљРђ: Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р»РѕРіРёРєР° РїРѕР»СѓС‡РµРЅРёСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№ РєРѕРјР°РЅРґС‹
  List<User> _getUsersForTeam(Team team) {
    return [
      User(id: 1, name: 'РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ 1', email: 'user1@example.com'),
      User(id: 2, name: 'РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ 2', email: 'user2@example.com'),
      User(id: 3, name: 'РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ 3', email: 'user3@example.com'),
      User(id: 4, name: 'РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ 4', email: 'user4@example.com'),
      User(id: 5, name: 'РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ 5', email: 'user5@example.com'),
      // ... РґСЂСѓРіРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»Рё
    ];
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final usersInTeam = _getUsersForTeam(team); // РџРѕР»СѓС‡Р°РµРј Р·Р°РіР»СѓС€РєСѓ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№

    return Scaffold(
      appBar: AppBar(
        title: Text('${LocaleKeys.team.tr()}: ${team.name}'),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => EditTeamScreen(initialTeam: team),
                ),
              );
            },
          ),
        ],
      ),
      body: usersInTeam.isEmpty
          ? Center(child: Text(LocaleKeys.noUsersInTeam.tr()))
          : CustomListViewSeparated(
        items: usersInTeam,
        itemBuilder: (context, user) {
          return CustomListItem(
            titleText: user.name,
            subtitleText: user.email,
            trailing: const Icon(Icons.chevron_right),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => UserDetailsScreen(user: user),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\presentation\screens\teams_screen.dart =====

// lib/features/teams/presentation/screens/teams_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_floating_action_button.dart';
import 'package:flutter_app_1/features/teams/presentation/screens/show_team_screen.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../common/widgets/custom_list_view/custom_list_item.dart';
import '../../../../common/widgets/custom_list_view/custom_list_view_separated.dart';
import '../../../../generated/locale_keys.g.dart';
import '../providers/team_provider.dart';
import 'create_team_screen.dart';

// --- Р­РєСЂР°РЅ СЃРїРёСЃРєР° РєРѕРјР°РЅРґ ---
class TeamsScreen extends ConsumerWidget {
  const TeamsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final teams = ref.watch(teamsProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.teams.tr()),
      ),
      body: CustomListViewSeparated(
        items: teams,
        itemBuilder: (context, team) {
          return CustomListItem(
            titleText: team.name,
            trailing: const Icon(Icons.chevron_right),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ShowTeamScreen(team: team),
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: CustomFloatingActionButton(onPressed: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const CreateTeamScreen()),
      )),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\teams\presentation\widgets\team_selector_bottom_sheet.dart =====

// lib/features/teams/presentation/widgets/team_selector_bottom_sheet.dart

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../common/widgets/custom_divider.dart';
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import '../../../../generated/locale_keys.g.dart';
import '../../../teams/domain/models/team.dart'; // РРјРїРѕСЂС‚ РјРѕРґРµР»Рё Team
import '../../../teams/presentation/providers/team_provider.dart'; // РРјРїРѕСЂС‚ teamProvider Рё selectedTeamProvider
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє AppColors Рё AppTextStyles РїСЂР°РІРёР»СЊРЅС‹Рµ


// Р­С‚РѕС‚ РІРёРґР¶РµС‚ Р±СѓРґРµС‚ СЃРѕРґРµСЂР¶РёРјС‹Рј DraggableScrollableSheet
class TeamSelectorBottomSheet extends ConsumerWidget {
  const TeamSelectorBottomSheet({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // РЎРјРѕС‚СЂРёРј Р·Р° РІС‹Р±СЂР°РЅРЅРѕР№ РєРѕРјР°РЅРґРѕР№, С‡С‚РѕР±С‹ РѕС‚РјРµС‚РёС‚СЊ РµРµ
    final selectedTeam = ref.watch(selectedTeamProvider);
    // РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє РІСЃРµС… РєРѕРјР°РЅРґ
    final teams = ref.watch(teamsProvider);
    // РџРѕР»СѓС‡Р°РµРј notifier РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ РІС‹Р±СЂР°РЅРЅРѕР№ РєРѕРјР°РЅРґС‹
    final selectedTeamNotifier = ref.read(selectedTeamProvider.notifier);


    return DraggableScrollableSheet(
      expand: false, // РќРµ Р·Р°РЅРёРјР°РµС‚ РІСЃСЋ РІС‹СЃРѕС‚Сѓ РёР·РЅР°С‡Р°Р»СЊРЅРѕ
      initialChildSize: 0.4, // РќР°С‡Р°Р»СЊРЅР°СЏ РІС‹СЃРѕС‚Р° (40% РѕС‚ РґРѕСЃС‚СѓРїРЅРѕР№)
      minChildSize: 0.2, // РњРёРЅРёРјР°Р»СЊРЅР°СЏ РІС‹СЃРѕС‚Р°
      maxChildSize: 0.8, // РњР°РєСЃРёРјР°Р»СЊРЅР°СЏ РІС‹СЃРѕС‚Р°
      builder: (context, scrollController) {
        return Container(
          // Р”РѕР±Р°РІР»СЏРµРј СЃРєСЂСѓРіР»РµРЅРЅС‹Рµ СѓРіР»С‹ СЃРІРµСЂС…Сѓ Рё С„РѕРЅ
          decoration: const BoxDecoration(
            color: Colors.white, // РР»Рё С†РІРµС‚ С„РѕРЅР° РІР°С€РµРіРѕ РїСЂРёР»РѕР¶РµРЅРёСЏ
            borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
          ),
          child: Column(
            children: [
              // РЁР°РїРєР° Р»РёСЃС‚Р°: Р—Р°РіРѕР»РѕРІРѕРє Рё РєРЅРѕРїРєР° Р·Р°РєСЂС‹С‚РёСЏ
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      LocaleKeys.selectTeam.tr(), // Р—Р°РіРѕР»РѕРІРѕРє Р»РёСЃС‚Р°
                      style: CustomTextStyles.normalMedium.copyWith(fontWeight: FontWeight.bold), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
                    ),
                    // РљРЅРѕРїРєР° Р·Р°РєСЂС‹С‚РёСЏ Р»РёСЃС‚Р°
                    IconButton(
                      icon: const Icon(Icons.close),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ),
              // Р Р°Р·РґРµР»РёС‚РµР»СЊ РїРѕРґ С€Р°РїРєРѕР№
              CustomDivider(),
              // РЎРїРёСЃРѕРє РєРѕРјР°РЅРґ
              Expanded( // Expanded РЅСѓР¶РµРЅ, С‡С‚РѕР±С‹ ListView Р·Р°РЅСЏР» РѕСЃС‚Р°РІС€РµРµСЃСЏ РјРµСЃС‚Рѕ РІ Column
                child: ListView.builder(
                  controller: scrollController, // РџСЂРёРІСЏР·С‹РІР°РµРј РєРѕРЅС‚СЂРѕР»Р»РµСЂ СЃРєСЂРѕР»Р»Р° Р»РёСЃС‚Р°
                  itemCount: teams.length,
                  itemBuilder: (context, index) {
                    final team = teams[index];
                    // РџСЂРѕРІРµСЂСЏРµРј, СЏРІР»СЏРµС‚СЃСЏ Р»Рё С‚РµРєСѓС‰Р°СЏ РєРѕРјР°РЅРґР° РІС‹Р±СЂР°РЅРЅРѕР№
                    final isSelected = team.id == selectedTeam?.id;

                    return InkWell( // Р”РµР»Р°РµРј СЌР»РµРјРµРЅС‚ СЃРїРёСЃРєР° РЅР°Р¶РёРјР°РµРјС‹Рј
                      onTap: () {
                        // РћР±РЅРѕРІР»СЏРµРј РІС‹Р±СЂР°РЅРЅСѓСЋ РєРѕРјР°РЅРґСѓ С‡РµСЂРµР· Provider
                        selectedTeamNotifier.state = team;
                        // Р—Р°РєСЂС‹РІР°РµРј bottom sheet РїРѕСЃР»Рµ РІС‹Р±РѕСЂР°
                        Navigator.pop(context);
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            // РќР°Р·РІР°РЅРёРµ РєРѕРјР°РЅРґС‹
                            Text(
                              team.name,
                              style: CustomTextStyles.normalMedium.copyWith(
                                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                                color: isSelected ? CustomColors.primary : CustomColors.mainDarkGrey, // РџРѕРґСЃРІРµС‡РёРІР°РµРј РІС‹Р±СЂР°РЅРЅСѓСЋ
                              ),
                            ),
                            // РРєРѕРЅРєР° РіР°Р»РѕС‡РєРё РґР»СЏ РІС‹Р±СЂР°РЅРЅРѕР№ РєРѕРјР°РЅРґС‹
                            if (isSelected)
                              const Icon(Icons.check_circle, color: CustomColors.primary, size: 20),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

// Р’СЃРїРѕРјРѕРіР°С‚РµР»СЊРЅР°СЏ С„СѓРЅРєС†РёСЏ РґР»СЏ СѓРґРѕР±РЅРѕРіРѕ РїРѕРєР°Р·Р° bottom sheet'Р°
void showTeamSelectorBottomSheet(BuildContext context) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true, // РџРѕР·РІРѕР»СЏРµС‚ Р»РёСЃС‚Сѓ Р·Р°РЅРёРјР°С‚СЊ Р±РѕР»СЊС€Рµ РїРѕР»РѕРІРёРЅС‹ СЌРєСЂР°РЅР°
    backgroundColor: Colors.transparent, // РџСЂРѕР·СЂР°С‡РЅС‹Р№ С„РѕРЅ, С‡С‚РѕР±С‹ Р±С‹Р»Рѕ РІРёРґРЅРѕ СЃРєСЂСѓРіР»РµРЅРёРµ Container
    builder: (context) => const TeamSelectorBottomSheet(),
  );
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\data\data_sources\transaction_local_data_source.dart =====

// lib/features/transactions/data/data_sources/transaction_local_data_source.dart

import 'package:flutter/foundation.dart';
import 'package:flutter_app_1/core/db/app_database.dart';
import 'package:flutter_app_1/features/transactions/utils/transaction_mapper.dart';
import '../../domain/models/transaction_entity.dart';

class TransactionLocalDataSource {
  final AppDatabase db;
  final int userId;

  TransactionLocalDataSource({
    required this.db,
    required this.userId,
  });

  /// РџРѕС‚РѕРє РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№ РёР· Р»РѕРєР°Р»СЊРЅРѕР№ Р±Р°Р·С‹ (РґР»СЏ StreamProvider)
  Stream<List<TransactionEntity>> watchAllTransactions() {
    return db.watchAllTransactions().map((rows) {
      debugPrint('рџ“¦ РР· Р±Р°Р·С‹ РїСЂРёС€Р»Рѕ ${rows.length} Р·Р°РїРёСЃРµР№');
      return rows.map(TransactionMapper.fromDb).toList();
    });
  }

  /// РџРѕР»СѓС‡РµРЅРёРµ РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№ РµРґРёРЅРѕСЂР°Р·РѕРІРѕ
  Future<List<TransactionEntity>> getAllTransactions() async {
    final rows = await db.getAllTransactions();
    return rows.map(TransactionMapper.fromDb).toList();
  }

  /// Р’СЃС‚Р°РІРєР° РёР»Рё РѕР±РЅРѕРІР»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё
  Future<void> insertTransaction(TransactionEntity entity) async {
    debugPrint('рџ’ѕ РЎРѕС…СЂР°РЅСЏСЋ РІ Р»РѕРєР°Р»СЊРЅСѓСЋ Р‘Р” С‚СЂР°РЅР·Р°РєС†РёСЋ: ${entity.id}');
    final model = TransactionMapper.toFullDriftModel(entity, userId: userId);
    await db.into(db.transactionsTable).insertOnConflictUpdate(model);
  }

  /// РћР±РЅРѕРІР»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё
  Future<bool> updateTransaction(TransactionEntity entity) {
    final model = TransactionMapper.toFullDriftModel(entity, userId: userId);
    return db.updateTransaction(model, userId: userId);
  }

  /// РЈРґР°Р»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё РїРѕ ID
  Future<int> deleteTransaction(int id) {
    return db.deleteTransactionById(id);
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\data\data_sources\transaction_remote_data_source.dart =====

// lib/features/transactions/data/data_sources/transaction_remote_data_source.dart

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_app_1/features/transactions/domain/models/transaction_dto.dart';

class TransactionRemoteDataSource {
  final Dio dio;

  TransactionRemoteDataSource({required this.dio});

  /// РџРѕР»СѓС‡РµРЅРёРµ СЃРїРёСЃРєР° С‚СЂР°РЅР·Р°РєС†РёР№
  Future<List<TransactionDto>> fetchTransactions() async {
    debugPrint('вћЎпёЏ TransactionRemoteDataSource.fetchTransactions() РІС‹Р·РІР°РЅ');
    try {
      final response = await dio.get('/api/transactions');
      debugPrint('в¬…пёЏ РћС‚РІРµС‚ РѕС‚ API (СЃС‚Р°С‚СѓСЃ ${response.statusCode}): ${response.data}');
      final data = response.data as List;
      return data
          .map((json) => TransactionDto.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint('вќЊ РћС€РёР±РєР° РІ TransactionRemoteDataSource.fetchTransactions(): $e');
      rethrow;
    }
  }

  /// РЎРѕР·РґР°РЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё
  Future<TransactionDto> createTransaction(TransactionDto dto) async {
    debugPrint('вћЎпёЏ РЎРѕР·РґР°РЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё РЅР° СЃРµСЂРІРµСЂРµ: ${dto.toJson()}');
    final response = await dio.post('/api/transactions', data: dto.toJson());
    debugPrint('в¬…пёЏ РћС‚РІРµС‚ РѕС‚ СЃРµСЂРІРµСЂР°: ${response.data}');
    return TransactionDto.fromJson(response.data);
  }

  /// РћР±РЅРѕРІР»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё РїРѕ serverId
  Future<TransactionDto> updateTransaction(int serverId, TransactionDto dto) async {
    debugPrint('вћЎпёЏ РћР±РЅРѕРІР»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё serverId=$serverId: ${dto.toJson()}');
    final response = await dio.put('/api/transactions/$serverId', data: dto.toJson());
    debugPrint('в¬…пёЏ РћС‚РІРµС‚ РѕС‚ СЃРµСЂРІРµСЂР°: ${response.data}');
    return TransactionDto.fromJson(response.data);
  }

  /// РЈРґР°Р»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё РїРѕ serverId
  Future<void> deleteTransaction(int serverId) async {
    debugPrint('рџ—‘пёЏ РЈРґР°Р»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё serverId=$serverId');
    await dio.delete('/api/transactions/$serverId');
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\data\repositories\transaction_repository.dart =====

import 'package:flutter/foundation.dart';
import 'package:flutter_app_1/core/db/app_database.dart';
import 'package:flutter_app_1/core/services/offline_sync_service.dart';
import 'package:flutter_app_1/features/transactions/data/data_sources/transaction_local_data_source.dart';
import 'package:flutter_app_1/features/transactions/data/data_sources/transaction_remote_data_source.dart';
import 'package:flutter_app_1/features/transactions/utils/transaction_mapper.dart';
import '../../domain/models/transaction_entity.dart';

class TransactionRepository {
  final TransactionRemoteDataSource remote;
  final TransactionLocalDataSource local;
  final OfflineSyncService syncService;
  final AppDatabase db;
  final int userId;

  TransactionRepository({
    required this.remote,
    required this.local,
    required this.syncService,
    required this.userId,
    required this.db,
  });

  /// РџРѕРґРїРёСЃРєР° РЅР° РІСЃРµ С‚СЂР°РЅР·Р°РєС†РёРё РёР· Р»РѕРєР°Р»СЊРЅРѕР№ Р±Р°Р·С‹
  Stream<List<TransactionEntity>> watchAll() {
    return local.watchAllTransactions();
  }

  /// РџРѕР»СѓС‡РµРЅРёРµ Рё РєСЌС€РёСЂРѕРІР°РЅРёРµ РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№ СЃ СЃРµСЂРІРµСЂР°
  Future<List<TransactionEntity>> fetch() async {
    debugPrint('вћЎпёЏ TransactionRepository.fetch() РІС‹Р·РІР°РЅ');
    try {
      final dtos = await remote.fetchTransactions();
      debugPrint('в¬…пёЏ РџРѕР»СѓС‡РµРЅ РѕС‚РІРµС‚ РѕС‚ API: ${dtos.length} СЌР»РµРјРµРЅС‚РѕРІ');
      final entities = dtos.map(TransactionMapper.fromDto).toList();

      for (final entity in entities) {
        try {
          await local.insertTransaction(entity);
          await db.printAllTransactions();
        } catch (e) {
          debugPrint('РћС€РёР±РєР° РїСЂРё РІСЃС‚Р°РІРєРµ: $e');
        }
      }

      return entities;
    } catch (e) {
      debugPrint('вќЊ РћС€РёР±РєР° РІ TransactionRepository.fetch(): $e');
      return local.getAllTransactions();
    }
  }

  /// РЎРѕР·РґР°РЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё
  Future<void> create(TransactionEntity entity) async {
    final dto = TransactionMapper.toDto(entity, userId: userId);

    try {
      await remote.createTransaction(dto);
    } catch (_) {
      await syncService.enqueueRequest(
        method: 'POST',
        endpoint: '/api/transactions',
        body: dto.toJson(),
      );
    }

    try {
      await db.insertTransaction(entity, userId: userId);
      await db.printAllTransactions();
    } catch (e) {
      debugPrint('РћС€РёР±РєР° РїСЂРё Р»РѕРєР°Р»СЊРЅРѕР№ РІСЃС‚Р°РІРєРµ: $e');
    }
  }

  /// РћР±РЅРѕРІР»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё
  Future<void> update(TransactionEntity entity) async {
    if (entity.serverId == null) {
      debugPrint('в›” РќРµР»СЊР·СЏ РѕР±РЅРѕРІРёС‚СЊ: serverId РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚');
      return;
    }

    final dto = TransactionMapper.toDto(entity, userId: userId);

    try {
      await remote.updateTransaction(entity.serverId!, dto);
    } catch (_) {
      await syncService.enqueueRequest(
        method: 'PUT',
        endpoint: '/api/transactions/${entity.serverId}',
        body: dto.toJson(),
      );
    }

    await db.updateTransaction(
      TransactionMapper.toFullDriftModel(entity, userId: userId), userId: userId,
    );
  }

  /// РЈРґР°Р»РµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё
  Future<void> delete(TransactionEntity entity) async {
    if (entity.serverId == null) {
      debugPrint('в›” РќРµР»СЊР·СЏ СѓРґР°Р»РёС‚СЊ: serverId РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚');
      return;
    }

    try {
      await remote.deleteTransaction(entity.serverId!);
    } catch (_) {
      await syncService.enqueueRequest(
        method: 'DELETE',
        endpoint: '/api/transactions/${entity.serverId}',
      );
    }

    await local.deleteTransaction(entity.id!);
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\domain\models\transaction_dto.dart =====

// lib/features/transactions/domain/models/transaction_dto.dart

import 'package:freezed_annotation/freezed_annotation.dart';

part 'transaction_dto.freezed.dart';
part 'transaction_dto.g.dart';

@freezed
class TransactionDto with _$TransactionDto {
  const factory TransactionDto({
    // id РёР· DTO РјРѕР¶РµС‚ Р±С‹С‚СЊ Р»РѕРєР°Р»СЊРЅС‹Рј РёР»Рё СЃРµСЂРІРµСЂРЅС‹Рј,
    // РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ С‚РѕРіРѕ, РєР°Рє РІС‹ РµРіРѕ РёСЃРїРѕР»СЊР·СѓРµС‚Рµ.
    // Р•СЃР»Рё СЌС‚Рѕ СЃРµСЂРІРµСЂРЅС‹Р№ ID, РѕРЅ РјРѕР¶РµС‚ Р±С‹С‚СЊ nullable РїСЂРё СЃРѕР·РґР°РЅРёРё РЅР° РєР»РёРµРЅС‚Рµ.
    // Р•СЃР»Рё СЌС‚Рѕ Р»РѕРєР°Р»СЊРЅС‹Р№ ID, РѕРЅ РЅРµ null РїРѕСЃР»Рµ СЃРѕС…СЂР°РЅРµРЅРёСЏ РІ Р»РѕРєР°Р»СЊРЅСѓСЋ Р±Р°Р·Сѓ.
    // Р’ РІР°С€РµРј С‚РµРєСѓС‰РµРј РєРѕРґРµ DTO РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РјР°РїРїРёРЅРіР° Entity <-> DTO (API),
    // Рё РІ toDto РІС‹ РїСЂРёСЃРІР°РёРІР°РµС‚Рµ entity.id ?? 0, С‡С‚Рѕ РїСЂРµРґРїРѕР»Р°РіР°РµС‚, С‡С‚Рѕ API РѕР¶РёРґР°РµС‚ id.
    // РћСЃС‚Р°РІРёРј РєР°Рє required int id, РєР°Рє Р±С‹Р»Рѕ.
    required int id,
    @JsonKey(name: 'serverId') int? serverId,
    @JsonKey(name: 'userId') required int userId,
    // РњС‹ РґРѕРіРѕРІРѕСЂРёР»РёСЃСЊ, С‡С‚Рѕ РІ DTO С‚РёРї - String
    @JsonKey(name: 'transactionType') required String transactionType,
    @JsonKey(name: 'transactionCategoryId') int? transactionCategoryId,
    required double amount,
    @JsonKey(name: 'accountId') int? accountId, // РЎС‡РµС‚ РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°
    @JsonKey(name: 'projectId') int? projectId,
    String? description,
    required DateTime date,
    @JsonKey(name: 'isActive') required bool isActive,
    // !!! Р”РћР‘РђР’Р›Р•РќРћ: РџРѕР»СЏ РґР»СЏ СЃС‡РµС‚РѕРІ РїРµСЂРµРІРѕРґР°
    // Р”РѕР±Р°РІР»СЏРµРј СЌС‚Рё РїРѕР»СЏ РєР°Рє nullable, С‚Р°Рє РєР°Рє РѕРЅРё РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ РїРµСЂРµРІРѕРґРѕРІ
    @JsonKey(name: 'fromAccountId') int? fromAccountId, // РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ from_account_id РЅР° Р±СЌРєРµРЅРґРµ?
    @JsonKey(name: 'toAccountId') int? toAccountId, // РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ to_account_id РЅР° Р±СЌРєРµРЅРґРµ?

  }) = _TransactionDto;

  factory TransactionDto.fromJson(Map<String, dynamic> json) =>
      _$TransactionDtoFromJson(json);

// РњРµС‚РѕРґ noSuchMethod РЅРµ РЅСѓР¶РµРЅ РїСЂРё РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРё freezed
@override
dynamic noSuchMethod(Invocation invocation) => super.noSuchMethod(invocation);
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\domain\models\transaction_dto.freezed.dart =====

// dart format width=80
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'transaction_dto.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

// dart format off
T _$identity<T>(T value) => value;

/// @nodoc
mixin _$TransactionDto {

// id РёР· DTO РјРѕР¶РµС‚ Р±С‹С‚СЊ Р»РѕРєР°Р»СЊРЅС‹Рј РёР»Рё СЃРµСЂРІРµСЂРЅС‹Рј,
// РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ С‚РѕРіРѕ, РєР°Рє РІС‹ РµРіРѕ РёСЃРїРѕР»СЊР·СѓРµС‚Рµ.
// Р•СЃР»Рё СЌС‚Рѕ СЃРµСЂРІРµСЂРЅС‹Р№ ID, РѕРЅ РјРѕР¶РµС‚ Р±С‹С‚СЊ nullable РїСЂРё СЃРѕР·РґР°РЅРёРё РЅР° РєР»РёРµРЅС‚Рµ.
// Р•СЃР»Рё СЌС‚Рѕ Р»РѕРєР°Р»СЊРЅС‹Р№ ID, РѕРЅ РЅРµ null РїРѕСЃР»Рµ СЃРѕС…СЂР°РЅРµРЅРёСЏ РІ Р»РѕРєР°Р»СЊРЅСѓСЋ Р±Р°Р·Сѓ.
// Р’ РІР°С€РµРј С‚РµРєСѓС‰РµРј РєРѕРґРµ DTO РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РјР°РїРїРёРЅРіР° Entity <-> DTO (API),
// Рё РІ toDto РІС‹ РїСЂРёСЃРІР°РёРІР°РµС‚Рµ entity.id ?? 0, С‡С‚Рѕ РїСЂРµРґРїРѕР»Р°РіР°РµС‚, С‡С‚Рѕ API РѕР¶РёРґР°РµС‚ id.
// РћСЃС‚Р°РІРёРј РєР°Рє required int id, РєР°Рє Р±С‹Р»Рѕ.
 int get id;@JsonKey(name: 'serverId') int? get serverId;@JsonKey(name: 'userId') int get userId;// РњС‹ РґРѕРіРѕРІРѕСЂРёР»РёСЃСЊ, С‡С‚Рѕ РІ DTO С‚РёРї - String
@JsonKey(name: 'transactionType') String get transactionType;@JsonKey(name: 'transactionCategoryId') int? get transactionCategoryId; double get amount;@JsonKey(name: 'accountId') int? get accountId;// РЎС‡РµС‚ РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°
@JsonKey(name: 'projectId') int? get projectId; String? get description; DateTime get date;@JsonKey(name: 'isActive') bool get isActive;// !!! Р”РћР‘РђР’Р›Р•РќРћ: РџРѕР»СЏ РґР»СЏ СЃС‡РµС‚РѕРІ РїРµСЂРµРІРѕРґР°
// Р”РѕР±Р°РІР»СЏРµРј СЌС‚Рё РїРѕР»СЏ РєР°Рє nullable, С‚Р°Рє РєР°Рє РѕРЅРё РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ РїРµСЂРµРІРѕРґРѕРІ
@JsonKey(name: 'fromAccountId') int? get fromAccountId;// РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ from_account_id РЅР° Р±СЌРєРµРЅРґРµ?
@JsonKey(name: 'toAccountId') int? get toAccountId;
/// Create a copy of TransactionDto
/// with the given fields replaced by the non-null parameter values.
@JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
$TransactionDtoCopyWith<TransactionDto> get copyWith => _$TransactionDtoCopyWithImpl<TransactionDto>(this as TransactionDto, _$identity);

  /// Serializes this TransactionDto to a JSON map.
  Map<String, dynamic> toJson();


@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is TransactionDto&&(identical(other.id, id) || other.id == id)&&(identical(other.serverId, serverId) || other.serverId == serverId)&&(identical(other.userId, userId) || other.userId == userId)&&(identical(other.transactionType, transactionType) || other.transactionType == transactionType)&&(identical(other.transactionCategoryId, transactionCategoryId) || other.transactionCategoryId == transactionCategoryId)&&(identical(other.amount, amount) || other.amount == amount)&&(identical(other.accountId, accountId) || other.accountId == accountId)&&(identical(other.projectId, projectId) || other.projectId == projectId)&&(identical(other.description, description) || other.description == description)&&(identical(other.date, date) || other.date == date)&&(identical(other.isActive, isActive) || other.isActive == isActive)&&(identical(other.fromAccountId, fromAccountId) || other.fromAccountId == fromAccountId)&&(identical(other.toAccountId, toAccountId) || other.toAccountId == toAccountId));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,serverId,userId,transactionType,transactionCategoryId,amount,accountId,projectId,description,date,isActive,fromAccountId,toAccountId);

@override
String toString() {
  return 'TransactionDto(id: $id, serverId: $serverId, userId: $userId, transactionType: $transactionType, transactionCategoryId: $transactionCategoryId, amount: $amount, accountId: $accountId, projectId: $projectId, description: $description, date: $date, isActive: $isActive, fromAccountId: $fromAccountId, toAccountId: $toAccountId)';
}


}

/// @nodoc
abstract mixin class $TransactionDtoCopyWith<$Res>  {
  factory $TransactionDtoCopyWith(TransactionDto value, $Res Function(TransactionDto) _then) = _$TransactionDtoCopyWithImpl;
@useResult
$Res call({
 int id,@JsonKey(name: 'serverId') int? serverId,@JsonKey(name: 'userId') int userId,@JsonKey(name: 'transactionType') String transactionType,@JsonKey(name: 'transactionCategoryId') int? transactionCategoryId, double amount,@JsonKey(name: 'accountId') int? accountId,@JsonKey(name: 'projectId') int? projectId, String? description, DateTime date,@JsonKey(name: 'isActive') bool isActive,@JsonKey(name: 'fromAccountId') int? fromAccountId,@JsonKey(name: 'toAccountId') int? toAccountId
});




}
/// @nodoc
class _$TransactionDtoCopyWithImpl<$Res>
    implements $TransactionDtoCopyWith<$Res> {
  _$TransactionDtoCopyWithImpl(this._self, this._then);

  final TransactionDto _self;
  final $Res Function(TransactionDto) _then;

/// Create a copy of TransactionDto
/// with the given fields replaced by the non-null parameter values.
@pragma('vm:prefer-inline') @override $Res call({Object? id = null,Object? serverId = freezed,Object? userId = null,Object? transactionType = null,Object? transactionCategoryId = freezed,Object? amount = null,Object? accountId = freezed,Object? projectId = freezed,Object? description = freezed,Object? date = null,Object? isActive = null,Object? fromAccountId = freezed,Object? toAccountId = freezed,}) {
  return _then(_self.copyWith(
id: null == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int,serverId: freezed == serverId ? _self.serverId : serverId // ignore: cast_nullable_to_non_nullable
as int?,userId: null == userId ? _self.userId : userId // ignore: cast_nullable_to_non_nullable
as int,transactionType: null == transactionType ? _self.transactionType : transactionType // ignore: cast_nullable_to_non_nullable
as String,transactionCategoryId: freezed == transactionCategoryId ? _self.transactionCategoryId : transactionCategoryId // ignore: cast_nullable_to_non_nullable
as int?,amount: null == amount ? _self.amount : amount // ignore: cast_nullable_to_non_nullable
as double,accountId: freezed == accountId ? _self.accountId : accountId // ignore: cast_nullable_to_non_nullable
as int?,projectId: freezed == projectId ? _self.projectId : projectId // ignore: cast_nullable_to_non_nullable
as int?,description: freezed == description ? _self.description : description // ignore: cast_nullable_to_non_nullable
as String?,date: null == date ? _self.date : date // ignore: cast_nullable_to_non_nullable
as DateTime,isActive: null == isActive ? _self.isActive : isActive // ignore: cast_nullable_to_non_nullable
as bool,fromAccountId: freezed == fromAccountId ? _self.fromAccountId : fromAccountId // ignore: cast_nullable_to_non_nullable
as int?,toAccountId: freezed == toAccountId ? _self.toAccountId : toAccountId // ignore: cast_nullable_to_non_nullable
as int?,
  ));
}

}


/// @nodoc
@JsonSerializable()

class _TransactionDto implements TransactionDto {
  const _TransactionDto({required this.id, @JsonKey(name: 'serverId') this.serverId, @JsonKey(name: 'userId') required this.userId, @JsonKey(name: 'transactionType') required this.transactionType, @JsonKey(name: 'transactionCategoryId') this.transactionCategoryId, required this.amount, @JsonKey(name: 'accountId') this.accountId, @JsonKey(name: 'projectId') this.projectId, this.description, required this.date, @JsonKey(name: 'isActive') required this.isActive, @JsonKey(name: 'fromAccountId') this.fromAccountId, @JsonKey(name: 'toAccountId') this.toAccountId});
  factory _TransactionDto.fromJson(Map<String, dynamic> json) => _$TransactionDtoFromJson(json);

// id РёР· DTO РјРѕР¶РµС‚ Р±С‹С‚СЊ Р»РѕРєР°Р»СЊРЅС‹Рј РёР»Рё СЃРµСЂРІРµСЂРЅС‹Рј,
// РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ С‚РѕРіРѕ, РєР°Рє РІС‹ РµРіРѕ РёСЃРїРѕР»СЊР·СѓРµС‚Рµ.
// Р•СЃР»Рё СЌС‚Рѕ СЃРµСЂРІРµСЂРЅС‹Р№ ID, РѕРЅ РјРѕР¶РµС‚ Р±С‹С‚СЊ nullable РїСЂРё СЃРѕР·РґР°РЅРёРё РЅР° РєР»РёРµРЅС‚Рµ.
// Р•СЃР»Рё СЌС‚Рѕ Р»РѕРєР°Р»СЊРЅС‹Р№ ID, РѕРЅ РЅРµ null РїРѕСЃР»Рµ СЃРѕС…СЂР°РЅРµРЅРёСЏ РІ Р»РѕРєР°Р»СЊРЅСѓСЋ Р±Р°Р·Сѓ.
// Р’ РІР°С€РµРј С‚РµРєСѓС‰РµРј РєРѕРґРµ DTO РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РјР°РїРїРёРЅРіР° Entity <-> DTO (API),
// Рё РІ toDto РІС‹ РїСЂРёСЃРІР°РёРІР°РµС‚Рµ entity.id ?? 0, С‡С‚Рѕ РїСЂРµРґРїРѕР»Р°РіР°РµС‚, С‡С‚Рѕ API РѕР¶РёРґР°РµС‚ id.
// РћСЃС‚Р°РІРёРј РєР°Рє required int id, РєР°Рє Р±С‹Р»Рѕ.
@override final  int id;
@override@JsonKey(name: 'serverId') final  int? serverId;
@override@JsonKey(name: 'userId') final  int userId;
// РњС‹ РґРѕРіРѕРІРѕСЂРёР»РёСЃСЊ, С‡С‚Рѕ РІ DTO С‚РёРї - String
@override@JsonKey(name: 'transactionType') final  String transactionType;
@override@JsonKey(name: 'transactionCategoryId') final  int? transactionCategoryId;
@override final  double amount;
@override@JsonKey(name: 'accountId') final  int? accountId;
// РЎС‡РµС‚ РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°
@override@JsonKey(name: 'projectId') final  int? projectId;
@override final  String? description;
@override final  DateTime date;
@override@JsonKey(name: 'isActive') final  bool isActive;
// !!! Р”РћР‘РђР’Р›Р•РќРћ: РџРѕР»СЏ РґР»СЏ СЃС‡РµС‚РѕРІ РїРµСЂРµРІРѕРґР°
// Р”РѕР±Р°РІР»СЏРµРј СЌС‚Рё РїРѕР»СЏ РєР°Рє nullable, С‚Р°Рє РєР°Рє РѕРЅРё РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ РїРµСЂРµРІРѕРґРѕРІ
@override@JsonKey(name: 'fromAccountId') final  int? fromAccountId;
// РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ from_account_id РЅР° Р±СЌРєРµРЅРґРµ?
@override@JsonKey(name: 'toAccountId') final  int? toAccountId;

/// Create a copy of TransactionDto
/// with the given fields replaced by the non-null parameter values.
@override @JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
_$TransactionDtoCopyWith<_TransactionDto> get copyWith => __$TransactionDtoCopyWithImpl<_TransactionDto>(this, _$identity);

@override
Map<String, dynamic> toJson() {
  return _$TransactionDtoToJson(this, );
}

@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is _TransactionDto&&(identical(other.id, id) || other.id == id)&&(identical(other.serverId, serverId) || other.serverId == serverId)&&(identical(other.userId, userId) || other.userId == userId)&&(identical(other.transactionType, transactionType) || other.transactionType == transactionType)&&(identical(other.transactionCategoryId, transactionCategoryId) || other.transactionCategoryId == transactionCategoryId)&&(identical(other.amount, amount) || other.amount == amount)&&(identical(other.accountId, accountId) || other.accountId == accountId)&&(identical(other.projectId, projectId) || other.projectId == projectId)&&(identical(other.description, description) || other.description == description)&&(identical(other.date, date) || other.date == date)&&(identical(other.isActive, isActive) || other.isActive == isActive)&&(identical(other.fromAccountId, fromAccountId) || other.fromAccountId == fromAccountId)&&(identical(other.toAccountId, toAccountId) || other.toAccountId == toAccountId));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,serverId,userId,transactionType,transactionCategoryId,amount,accountId,projectId,description,date,isActive,fromAccountId,toAccountId);

@override
String toString() {
  return 'TransactionDto(id: $id, serverId: $serverId, userId: $userId, transactionType: $transactionType, transactionCategoryId: $transactionCategoryId, amount: $amount, accountId: $accountId, projectId: $projectId, description: $description, date: $date, isActive: $isActive, fromAccountId: $fromAccountId, toAccountId: $toAccountId)';
}


}

/// @nodoc
abstract mixin class _$TransactionDtoCopyWith<$Res> implements $TransactionDtoCopyWith<$Res> {
  factory _$TransactionDtoCopyWith(_TransactionDto value, $Res Function(_TransactionDto) _then) = __$TransactionDtoCopyWithImpl;
@override @useResult
$Res call({
 int id,@JsonKey(name: 'serverId') int? serverId,@JsonKey(name: 'userId') int userId,@JsonKey(name: 'transactionType') String transactionType,@JsonKey(name: 'transactionCategoryId') int? transactionCategoryId, double amount,@JsonKey(name: 'accountId') int? accountId,@JsonKey(name: 'projectId') int? projectId, String? description, DateTime date,@JsonKey(name: 'isActive') bool isActive,@JsonKey(name: 'fromAccountId') int? fromAccountId,@JsonKey(name: 'toAccountId') int? toAccountId
});




}
/// @nodoc
class __$TransactionDtoCopyWithImpl<$Res>
    implements _$TransactionDtoCopyWith<$Res> {
  __$TransactionDtoCopyWithImpl(this._self, this._then);

  final _TransactionDto _self;
  final $Res Function(_TransactionDto) _then;

/// Create a copy of TransactionDto
/// with the given fields replaced by the non-null parameter values.
@override @pragma('vm:prefer-inline') $Res call({Object? id = null,Object? serverId = freezed,Object? userId = null,Object? transactionType = null,Object? transactionCategoryId = freezed,Object? amount = null,Object? accountId = freezed,Object? projectId = freezed,Object? description = freezed,Object? date = null,Object? isActive = null,Object? fromAccountId = freezed,Object? toAccountId = freezed,}) {
  return _then(_TransactionDto(
id: null == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int,serverId: freezed == serverId ? _self.serverId : serverId // ignore: cast_nullable_to_non_nullable
as int?,userId: null == userId ? _self.userId : userId // ignore: cast_nullable_to_non_nullable
as int,transactionType: null == transactionType ? _self.transactionType : transactionType // ignore: cast_nullable_to_non_nullable
as String,transactionCategoryId: freezed == transactionCategoryId ? _self.transactionCategoryId : transactionCategoryId // ignore: cast_nullable_to_non_nullable
as int?,amount: null == amount ? _self.amount : amount // ignore: cast_nullable_to_non_nullable
as double,accountId: freezed == accountId ? _self.accountId : accountId // ignore: cast_nullable_to_non_nullable
as int?,projectId: freezed == projectId ? _self.projectId : projectId // ignore: cast_nullable_to_non_nullable
as int?,description: freezed == description ? _self.description : description // ignore: cast_nullable_to_non_nullable
as String?,date: null == date ? _self.date : date // ignore: cast_nullable_to_non_nullable
as DateTime,isActive: null == isActive ? _self.isActive : isActive // ignore: cast_nullable_to_non_nullable
as bool,fromAccountId: freezed == fromAccountId ? _self.fromAccountId : fromAccountId // ignore: cast_nullable_to_non_nullable
as int?,toAccountId: freezed == toAccountId ? _self.toAccountId : toAccountId // ignore: cast_nullable_to_non_nullable
as int?,
  ));
}


}

// dart format on
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\domain\models\transaction_dto.g.dart =====

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'transaction_dto.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_TransactionDto _$TransactionDtoFromJson(Map<String, dynamic> json) =>
    _TransactionDto(
      id: (json['id'] as num).toInt(),
      serverId: (json['serverId'] as num?)?.toInt(),
      userId: (json['userId'] as num).toInt(),
      transactionType: json['transactionType'] as String,
      transactionCategoryId: (json['transactionCategoryId'] as num?)?.toInt(),
      amount: (json['amount'] as num).toDouble(),
      accountId: (json['accountId'] as num?)?.toInt(),
      projectId: (json['projectId'] as num?)?.toInt(),
      description: json['description'] as String?,
      date: DateTime.parse(json['date'] as String),
      isActive: json['isActive'] as bool,
      fromAccountId: (json['fromAccountId'] as num?)?.toInt(),
      toAccountId: (json['toAccountId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TransactionDtoToJson(_TransactionDto instance) =>
    <String, dynamic>{
      'id': instance.id,
      'serverId': instance.serverId,
      'userId': instance.userId,
      'transactionType': instance.transactionType,
      'transactionCategoryId': instance.transactionCategoryId,
      'amount': instance.amount,
      'accountId': instance.accountId,
      'projectId': instance.projectId,
      'description': instance.description,
      'date': instance.date.toIso8601String(),
      'isActive': instance.isActive,
      'fromAccountId': instance.fromAccountId,
      'toAccountId': instance.toAccountId,
    };
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\domain\models\transaction_entity.dart =====

// lib/features/transactions/domain/models/transaction_dto.dart

import 'package:freezed_annotation/freezed_annotation.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ Рє РІР°С€РµРјСѓ enum TransactionType РїСЂР°РІРёР»СЊРЅС‹Р№
import '../../presentation/screens/transaction_create_screen.dart';

part 'transaction_entity.freezed.dart';
part 'transaction_entity.g.dart';

@freezed
class TransactionEntity with _$TransactionEntity {
  const factory TransactionEntity({
    int? id, // Р»РѕРєР°Р»СЊРЅС‹Р№ ID Drift
    int? serverId, // СЃРµСЂРІРµСЂРЅС‹Р№ ID (Laravel)
    required int userId,
    // !!! РР—РњР•РќР•РќРћ: РўРёРї РїРѕР»СЏ transactionType РЅР° enum
    required TransactionType transactionType, // РР·РјРµРЅРµРЅРѕ СЃРѕ String РЅР° TransactionType enum
    int? transactionCategoryId, // РљР°С‚РµРіРѕСЂРёСЏ (РґР»СЏ expense/income)
    required double amount,
    int? accountId, // РЎС‡РµС‚ (РґР»СЏ expense/income)
    int? projectId, // РџСЂРѕРµРєС‚ (РґР»СЏ expense/income)
    String? description,
    required DateTime date,
    required bool isActive,
    // !!! Р”РћР‘РђР’Р›Р•РќРћ: РџРѕР»СЏ РґР»СЏ СЃС‡РµС‚РѕРІ РїРµСЂРµРІРѕРґР°
    int? fromAccountId, // РЎС‡РµС‚ РѕС‚РїСЂР°РІРёС‚РµР»СЏ (РґР»СЏ transfer)
    int? toAccountId, // РЎС‡РµС‚ РїРѕР»СѓС‡Р°С‚РµР»СЏ (РґР»СЏ transfer)
  }) = _TransactionEntity;

  factory TransactionEntity.fromJson(Map<String, dynamic> json) =>
      _$TransactionEntityFromJson(json);

// РњРµС‚РѕРґ noSuchMethod РЅРµ РЅСѓР¶РµРЅ РїСЂРё РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРё freezed
@override
dynamic noSuchMethod(Invocation invocation) => super.noSuchMethod(invocation);
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\domain\models\transaction_entity.freezed.dart =====

// dart format width=80
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'transaction_entity.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

// dart format off
T _$identity<T>(T value) => value;

/// @nodoc
mixin _$TransactionEntity {

 int? get id;// Р»РѕРєР°Р»СЊРЅС‹Р№ ID Drift
 int? get serverId;// СЃРµСЂРІРµСЂРЅС‹Р№ ID (Laravel)
 int get userId;// !!! РР—РњР•РќР•РќРћ: РўРёРї РїРѕР»СЏ transactionType РЅР° enum
 TransactionType get transactionType;// РР·РјРµРЅРµРЅРѕ СЃРѕ String РЅР° TransactionType enum
 int? get transactionCategoryId;// РљР°С‚РµРіРѕСЂРёСЏ (РґР»СЏ expense/income)
 double get amount; int? get accountId;// РЎС‡РµС‚ (РґР»СЏ expense/income)
 int? get projectId;// РџСЂРѕРµРєС‚ (РґР»СЏ expense/income)
 String? get description; DateTime get date; bool get isActive;// !!! Р”РћР‘РђР’Р›Р•РќРћ: РџРѕР»СЏ РґР»СЏ СЃС‡РµС‚РѕРІ РїРµСЂРµРІРѕРґР°
 int? get fromAccountId;// РЎС‡РµС‚ РѕС‚РїСЂР°РІРёС‚РµР»СЏ (РґР»СЏ transfer)
 int? get toAccountId;
/// Create a copy of TransactionEntity
/// with the given fields replaced by the non-null parameter values.
@JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
$TransactionEntityCopyWith<TransactionEntity> get copyWith => _$TransactionEntityCopyWithImpl<TransactionEntity>(this as TransactionEntity, _$identity);

  /// Serializes this TransactionEntity to a JSON map.
  Map<String, dynamic> toJson();


@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is TransactionEntity&&(identical(other.id, id) || other.id == id)&&(identical(other.serverId, serverId) || other.serverId == serverId)&&(identical(other.userId, userId) || other.userId == userId)&&(identical(other.transactionType, transactionType) || other.transactionType == transactionType)&&(identical(other.transactionCategoryId, transactionCategoryId) || other.transactionCategoryId == transactionCategoryId)&&(identical(other.amount, amount) || other.amount == amount)&&(identical(other.accountId, accountId) || other.accountId == accountId)&&(identical(other.projectId, projectId) || other.projectId == projectId)&&(identical(other.description, description) || other.description == description)&&(identical(other.date, date) || other.date == date)&&(identical(other.isActive, isActive) || other.isActive == isActive)&&(identical(other.fromAccountId, fromAccountId) || other.fromAccountId == fromAccountId)&&(identical(other.toAccountId, toAccountId) || other.toAccountId == toAccountId));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,serverId,userId,transactionType,transactionCategoryId,amount,accountId,projectId,description,date,isActive,fromAccountId,toAccountId);

@override
String toString() {
  return 'TransactionEntity(id: $id, serverId: $serverId, userId: $userId, transactionType: $transactionType, transactionCategoryId: $transactionCategoryId, amount: $amount, accountId: $accountId, projectId: $projectId, description: $description, date: $date, isActive: $isActive, fromAccountId: $fromAccountId, toAccountId: $toAccountId)';
}


}

/// @nodoc
abstract mixin class $TransactionEntityCopyWith<$Res>  {
  factory $TransactionEntityCopyWith(TransactionEntity value, $Res Function(TransactionEntity) _then) = _$TransactionEntityCopyWithImpl;
@useResult
$Res call({
 int? id, int? serverId, int userId, TransactionType transactionType, int? transactionCategoryId, double amount, int? accountId, int? projectId, String? description, DateTime date, bool isActive, int? fromAccountId, int? toAccountId
});




}
/// @nodoc
class _$TransactionEntityCopyWithImpl<$Res>
    implements $TransactionEntityCopyWith<$Res> {
  _$TransactionEntityCopyWithImpl(this._self, this._then);

  final TransactionEntity _self;
  final $Res Function(TransactionEntity) _then;

/// Create a copy of TransactionEntity
/// with the given fields replaced by the non-null parameter values.
@pragma('vm:prefer-inline') @override $Res call({Object? id = freezed,Object? serverId = freezed,Object? userId = null,Object? transactionType = null,Object? transactionCategoryId = freezed,Object? amount = null,Object? accountId = freezed,Object? projectId = freezed,Object? description = freezed,Object? date = null,Object? isActive = null,Object? fromAccountId = freezed,Object? toAccountId = freezed,}) {
  return _then(_self.copyWith(
id: freezed == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int?,serverId: freezed == serverId ? _self.serverId : serverId // ignore: cast_nullable_to_non_nullable
as int?,userId: null == userId ? _self.userId : userId // ignore: cast_nullable_to_non_nullable
as int,transactionType: null == transactionType ? _self.transactionType : transactionType // ignore: cast_nullable_to_non_nullable
as TransactionType,transactionCategoryId: freezed == transactionCategoryId ? _self.transactionCategoryId : transactionCategoryId // ignore: cast_nullable_to_non_nullable
as int?,amount: null == amount ? _self.amount : amount // ignore: cast_nullable_to_non_nullable
as double,accountId: freezed == accountId ? _self.accountId : accountId // ignore: cast_nullable_to_non_nullable
as int?,projectId: freezed == projectId ? _self.projectId : projectId // ignore: cast_nullable_to_non_nullable
as int?,description: freezed == description ? _self.description : description // ignore: cast_nullable_to_non_nullable
as String?,date: null == date ? _self.date : date // ignore: cast_nullable_to_non_nullable
as DateTime,isActive: null == isActive ? _self.isActive : isActive // ignore: cast_nullable_to_non_nullable
as bool,fromAccountId: freezed == fromAccountId ? _self.fromAccountId : fromAccountId // ignore: cast_nullable_to_non_nullable
as int?,toAccountId: freezed == toAccountId ? _self.toAccountId : toAccountId // ignore: cast_nullable_to_non_nullable
as int?,
  ));
}

}


/// @nodoc
@JsonSerializable()

class _TransactionEntity implements TransactionEntity {
  const _TransactionEntity({this.id, this.serverId, required this.userId, required this.transactionType, this.transactionCategoryId, required this.amount, this.accountId, this.projectId, this.description, required this.date, required this.isActive, this.fromAccountId, this.toAccountId});
  factory _TransactionEntity.fromJson(Map<String, dynamic> json) => _$TransactionEntityFromJson(json);

@override final  int? id;
// Р»РѕРєР°Р»СЊРЅС‹Р№ ID Drift
@override final  int? serverId;
// СЃРµСЂРІРµСЂРЅС‹Р№ ID (Laravel)
@override final  int userId;
// !!! РР—РњР•РќР•РќРћ: РўРёРї РїРѕР»СЏ transactionType РЅР° enum
@override final  TransactionType transactionType;
// РР·РјРµРЅРµРЅРѕ СЃРѕ String РЅР° TransactionType enum
@override final  int? transactionCategoryId;
// РљР°С‚РµРіРѕСЂРёСЏ (РґР»СЏ expense/income)
@override final  double amount;
@override final  int? accountId;
// РЎС‡РµС‚ (РґР»СЏ expense/income)
@override final  int? projectId;
// РџСЂРѕРµРєС‚ (РґР»СЏ expense/income)
@override final  String? description;
@override final  DateTime date;
@override final  bool isActive;
// !!! Р”РћР‘РђР’Р›Р•РќРћ: РџРѕР»СЏ РґР»СЏ СЃС‡РµС‚РѕРІ РїРµСЂРµРІРѕРґР°
@override final  int? fromAccountId;
// РЎС‡РµС‚ РѕС‚РїСЂР°РІРёС‚РµР»СЏ (РґР»СЏ transfer)
@override final  int? toAccountId;

/// Create a copy of TransactionEntity
/// with the given fields replaced by the non-null parameter values.
@override @JsonKey(includeFromJson: false, includeToJson: false)
@pragma('vm:prefer-inline')
_$TransactionEntityCopyWith<_TransactionEntity> get copyWith => __$TransactionEntityCopyWithImpl<_TransactionEntity>(this, _$identity);

@override
Map<String, dynamic> toJson() {
  return _$TransactionEntityToJson(this, );
}

@override
bool operator ==(Object other) {
  return identical(this, other) || (other.runtimeType == runtimeType&&other is _TransactionEntity&&(identical(other.id, id) || other.id == id)&&(identical(other.serverId, serverId) || other.serverId == serverId)&&(identical(other.userId, userId) || other.userId == userId)&&(identical(other.transactionType, transactionType) || other.transactionType == transactionType)&&(identical(other.transactionCategoryId, transactionCategoryId) || other.transactionCategoryId == transactionCategoryId)&&(identical(other.amount, amount) || other.amount == amount)&&(identical(other.accountId, accountId) || other.accountId == accountId)&&(identical(other.projectId, projectId) || other.projectId == projectId)&&(identical(other.description, description) || other.description == description)&&(identical(other.date, date) || other.date == date)&&(identical(other.isActive, isActive) || other.isActive == isActive)&&(identical(other.fromAccountId, fromAccountId) || other.fromAccountId == fromAccountId)&&(identical(other.toAccountId, toAccountId) || other.toAccountId == toAccountId));
}

@JsonKey(includeFromJson: false, includeToJson: false)
@override
int get hashCode => Object.hash(runtimeType,id,serverId,userId,transactionType,transactionCategoryId,amount,accountId,projectId,description,date,isActive,fromAccountId,toAccountId);

@override
String toString() {
  return 'TransactionEntity(id: $id, serverId: $serverId, userId: $userId, transactionType: $transactionType, transactionCategoryId: $transactionCategoryId, amount: $amount, accountId: $accountId, projectId: $projectId, description: $description, date: $date, isActive: $isActive, fromAccountId: $fromAccountId, toAccountId: $toAccountId)';
}


}

/// @nodoc
abstract mixin class _$TransactionEntityCopyWith<$Res> implements $TransactionEntityCopyWith<$Res> {
  factory _$TransactionEntityCopyWith(_TransactionEntity value, $Res Function(_TransactionEntity) _then) = __$TransactionEntityCopyWithImpl;
@override @useResult
$Res call({
 int? id, int? serverId, int userId, TransactionType transactionType, int? transactionCategoryId, double amount, int? accountId, int? projectId, String? description, DateTime date, bool isActive, int? fromAccountId, int? toAccountId
});




}
/// @nodoc
class __$TransactionEntityCopyWithImpl<$Res>
    implements _$TransactionEntityCopyWith<$Res> {
  __$TransactionEntityCopyWithImpl(this._self, this._then);

  final _TransactionEntity _self;
  final $Res Function(_TransactionEntity) _then;

/// Create a copy of TransactionEntity
/// with the given fields replaced by the non-null parameter values.
@override @pragma('vm:prefer-inline') $Res call({Object? id = freezed,Object? serverId = freezed,Object? userId = null,Object? transactionType = null,Object? transactionCategoryId = freezed,Object? amount = null,Object? accountId = freezed,Object? projectId = freezed,Object? description = freezed,Object? date = null,Object? isActive = null,Object? fromAccountId = freezed,Object? toAccountId = freezed,}) {
  return _then(_TransactionEntity(
id: freezed == id ? _self.id : id // ignore: cast_nullable_to_non_nullable
as int?,serverId: freezed == serverId ? _self.serverId : serverId // ignore: cast_nullable_to_non_nullable
as int?,userId: null == userId ? _self.userId : userId // ignore: cast_nullable_to_non_nullable
as int,transactionType: null == transactionType ? _self.transactionType : transactionType // ignore: cast_nullable_to_non_nullable
as TransactionType,transactionCategoryId: freezed == transactionCategoryId ? _self.transactionCategoryId : transactionCategoryId // ignore: cast_nullable_to_non_nullable
as int?,amount: null == amount ? _self.amount : amount // ignore: cast_nullable_to_non_nullable
as double,accountId: freezed == accountId ? _self.accountId : accountId // ignore: cast_nullable_to_non_nullable
as int?,projectId: freezed == projectId ? _self.projectId : projectId // ignore: cast_nullable_to_non_nullable
as int?,description: freezed == description ? _self.description : description // ignore: cast_nullable_to_non_nullable
as String?,date: null == date ? _self.date : date // ignore: cast_nullable_to_non_nullable
as DateTime,isActive: null == isActive ? _self.isActive : isActive // ignore: cast_nullable_to_non_nullable
as bool,fromAccountId: freezed == fromAccountId ? _self.fromAccountId : fromAccountId // ignore: cast_nullable_to_non_nullable
as int?,toAccountId: freezed == toAccountId ? _self.toAccountId : toAccountId // ignore: cast_nullable_to_non_nullable
as int?,
  ));
}


}

// dart format on
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\domain\models\transaction_entity.g.dart =====

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'transaction_entity.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_TransactionEntity _$TransactionEntityFromJson(Map<String, dynamic> json) =>
    _TransactionEntity(
      id: (json['id'] as num?)?.toInt(),
      serverId: (json['serverId'] as num?)?.toInt(),
      userId: (json['userId'] as num).toInt(),
      transactionType: $enumDecode(
        _$TransactionTypeEnumMap,
        json['transactionType'],
      ),
      transactionCategoryId: (json['transactionCategoryId'] as num?)?.toInt(),
      amount: (json['amount'] as num).toDouble(),
      accountId: (json['accountId'] as num?)?.toInt(),
      projectId: (json['projectId'] as num?)?.toInt(),
      description: json['description'] as String?,
      date: DateTime.parse(json['date'] as String),
      isActive: json['isActive'] as bool,
      fromAccountId: (json['fromAccountId'] as num?)?.toInt(),
      toAccountId: (json['toAccountId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TransactionEntityToJson(_TransactionEntity instance) =>
    <String, dynamic>{
      'id': instance.id,
      'serverId': instance.serverId,
      'userId': instance.userId,
      'transactionType': _$TransactionTypeEnumMap[instance.transactionType]!,
      'transactionCategoryId': instance.transactionCategoryId,
      'amount': instance.amount,
      'accountId': instance.accountId,
      'projectId': instance.projectId,
      'description': instance.description,
      'date': instance.date.toIso8601String(),
      'isActive': instance.isActive,
      'fromAccountId': instance.fromAccountId,
      'toAccountId': instance.toAccountId,
    };

const _$TransactionTypeEnumMap = {
  TransactionType.expense: 'expense',
  TransactionType.income: 'income',
  TransactionType.transfer: 'transfer',
};
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\providers\transaction_controller.dart =====

import 'package:flutter/material.dart'; // Р”Р»СЏ debugPrint
import 'package:flutter_app_1/features/transactions/presentation/providers/transaction_provider.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
// !!! РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РёРјРїРѕСЂС‚С‹ РјРѕРґРµР»РµР№ Рё СЂРµРїРѕР·РёС‚РѕСЂРёСЏ РїСЂР°РІРёР»СЊРЅС‹Рµ
import 'package:flutter_app_1/features/transactions/domain/models/transaction_entity.dart'; // РџСѓС‚СЊ Рє РІР°С€РµР№ РћР‘РќРћР’Р›Р•РќРќРћР™ РјРѕРґРµР»Рё
import 'package:flutter_app_1/features/transactions/data/repositories/transaction_repository.dart'; // РџСѓС‚СЊ Рє РІР°С€РµРјСѓ СЂРµРїРѕР·РёС‚РѕСЂРёСЋ
// !!! РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РёРјРїРѕСЂС‚ TransactionType РїСЂР°РІРёР»СЊРЅС‹Р№
import '../screens/transaction_create_screen.dart'; // РџСѓС‚СЊ Рє РІР°С€РµРјСѓ enum TransactionType


// --- РџСЂРѕРІР°Р№РґРµСЂ РґР»СЏ TransactionCreateController ---
// РЈРєР°Р·С‹РІР°РµРј РѕР±РЅРѕРІР»РµРЅРЅС‹Р№ С‚РёРї СЃРѕСЃС‚РѕСЏРЅРёСЏ: TransactionEntity
final transactionCreateControllerProvider =
StateNotifierProvider<TransactionCreateController, TransactionEntity>((ref) {
  final repository = ref.read(transactionRepositoryProvider);
  // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ TransactionType enum РґРѕСЃС‚СѓРїРµРЅ Р·РґРµСЃСЊ
  return TransactionCreateController(repository: repository);
});

// --- РљРѕРЅС‚СЂРѕР»Р»РµСЂ СѓРїСЂР°РІР»РµРЅРёСЏ СЃРѕСЃС‚РѕСЏРЅРёРµРј С‚СЂР°РЅР·Р°РєС†РёРё ---
// РЈРєР°Р·С‹РІР°РµРј РѕР±РЅРѕРІР»РµРЅРЅС‹Р№ С‚РёРї СЃРѕСЃС‚РѕСЏРЅРёСЏ: TransactionEntity
class TransactionCreateController extends StateNotifier<TransactionEntity> {
  final TransactionRepository repository;

  String rawAmount = '';

  // --- РљРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ ---
  TransactionCreateController({required this.repository})
  // РРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РЅР°С‡Р°Р»СЊРЅРѕРіРѕ СЃРѕСЃС‚РѕСЏРЅРёСЏ (РїСѓСЃС‚Р°СЏ С‚СЂР°РЅР·Р°РєС†РёСЏ)
      : super(TransactionEntity(
    id: null,
    serverId: null,
    userId: 1, // Р—Р°РјРµРЅРёС‚СЊ РЅР° СЂРµР°Р»СЊРЅС‹Р№ ID РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
    // !!! РР—РњР•РќР•РќРћ: РРЅРёС†РёР°Р»РёР·Р°С†РёСЏ С‚РёРїР° TransactionType enum
    transactionType: TransactionType.expense, // РўРёРї РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ (СЂР°СЃС…РѕРґ)
    transactionCategoryId: null,
    amount: 0,
    accountId: 1, // РЎС‡РµС‚ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР° (Р·Р°РјРµРЅРёС‚СЊ РЅР° СЂРµР°Р»СЊРЅС‹Р№ ID)
    projectId: 1, // РџСЂРѕРµРєС‚ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР° (Р·Р°РјРµРЅРёС‚СЊ РЅР° СЂРµР°Р»СЊРЅС‹Р№ ID)
    description: null,
    date: DateTime.now(),
    isActive: true,
    // !!! Р”РћР‘РђР’Р›Р•РќРћ: РРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРѕР»РµР№ РїРµСЂРµРІРѕРґР°
    fromAccountId: null, // РЎС‡РµС‚Р° РїРµСЂРµРІРѕРґР° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РЅРµ РІС‹Р±СЂР°РЅС‹
    toAccountId: null,
  ));

  // --- РњРµС‚РѕРґС‹ РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃРѕСЃС‚РѕСЏРЅРёСЏ ---

  /// РћР±РЅРѕРІР»СЏРµС‚ СЃС‚СЂРѕРєРѕРІРѕРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ СЃСѓРјРјС‹ (`rawAmount`) Рё
  /// РїР°СЂСЃРёС‚ РµРіРѕ РІ `double` РґР»СЏ РѕСЃРЅРѕРІРЅРѕРіРѕ СЃРѕСЃС‚РѕСЏРЅРёСЏ (`amount`).
  void updateRawAmount(String value) {
    rawAmount = value; // РЎРѕС…СЂР°РЅСЏРµРј СЃС‚СЂРѕРєСѓ РєР°Рє РµСЃС‚СЊ

    final parsed = double.tryParse(value.replaceAll(',', '.')) ?? 0;

    state = state.copyWith(amount: parsed);
    debugPrint('State updated - Amount: ${state.amount}, Raw: $rawAmount');
    // Р’РѕР·РјРѕР¶РЅРѕ, РїСЂРё РІРІРѕРґРµ СЃСѓРјРјС‹ РґР»СЏ РїРµСЂРµРІРѕРґР° С‚РѕР¶Рµ РЅСѓР¶РЅРѕ С‚СЂРёРіРіРµСЂРёС‚СЊ СЃРѕС…СЂР°РЅРµРЅРёРµ?
    // if (state.transactionType == TransactionType.transfer && state.amount > 0 && state.fromAccountId != null && state.toAccountId != null) {
    //   _createTransaction();
    // }
  }

  /// РЈРґР°Р»СЏРµС‚ РїРѕСЃР»РµРґРЅРёР№ СЃРёРјРІРѕР» РёР· `rawAmount`.
  void deleteLastDigit() {
    if (rawAmount.isNotEmpty) {
      updateRawAmount(rawAmount.substring(0, rawAmount.length - 1));
    }
  }

  /// РћР±РЅРѕРІР»СЏРµС‚ ID РєР°С‚РµРіРѕСЂРёРё С‚СЂР°РЅР·Р°РєС†РёРё. РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ Р Р°СЃС…РѕРґР°/Р”РѕС…РѕРґР°.
  void updateTransactionCategory(int categoryId) {
    // РЈР±РµРґРёРјСЃСЏ, С‡С‚Рѕ СЌС‚РѕС‚ РјРµС‚РѕРґ РІС‹Р·С‹РІР°РµС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ Р Р°СЃС…РѕРґР°/Р”РѕС…РѕРґР°
    if (state.transactionType == TransactionType.expense || state.transactionType == TransactionType.income) {
      state = state.copyWith(transactionCategoryId: categoryId);
      debugPrint('State updated - Category ID: ${state.transactionCategoryId}');
      // РџСЂРѕРІРµСЂСЏРµРј, РµСЃС‚СЊ Р»Рё СЃСѓРјРјР°, РїСЂРµР¶РґРµ С‡РµРј СЃРѕС…СЂР°РЅСЏС‚СЊ (Р»РѕРіРёРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ РјРѕР¶РµС‚ Р·Р°РІРёСЃРµС‚СЊ РѕС‚ С‚РёРїР°)
      if (state.amount > 0) {
        _createTransaction(); // Р’С‹Р·С‹РІР°РµРј РїСЂРёРІР°С‚РЅС‹Р№ РјРµС‚РѕРґ СЃРѕС…СЂР°РЅРµРЅРёСЏ
      } else {
        debugPrint('в›” РЈРєР°Р¶РёС‚Рµ СЃСѓРјРјСѓ РїРµСЂРµРґ РІС‹Р±РѕСЂРѕРј РєР°С‚РµРіРѕСЂРёРё');
      }
    } else {
      debugPrint('вљ пёЏ РџРѕРїС‹С‚РєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЊ РєР°С‚РµРіРѕСЂРёСЋ РґР»СЏ С‚РёРїР° ${state.transactionType}');
    }
  }

  /// РћР±РЅРѕРІР»СЏРµС‚ ID СЃС‡РµС‚Р°. РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ Р Р°СЃС…РѕРґР°/Р”РѕС…РѕРґР°.
  void updateAccount(int accountId) {
    // РЈР±РµРґРёРјСЃСЏ, С‡С‚Рѕ СЌС‚РѕС‚ РјРµС‚РѕРґ РІС‹Р·С‹РІР°РµС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ Р Р°СЃС…РѕРґР°/Р”РѕС…РѕРґР°
    if (state.transactionType == TransactionType.expense || state.transactionType == TransactionType.income) {
      state = state.copyWith(accountId: accountId);
      debugPrint('State updated - Account ID (Expense/Income): ${state.accountId}');
    } else {
      debugPrint('вљ пёЏ РџРѕРїС‹С‚РєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЊ accountId РґР»СЏ С‚РёРїР° ${state.transactionType}');
    }
  }

  /// РћР±РЅРѕРІР»СЏРµС‚ ID РїСЂРѕРµРєС‚Р°. РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ Р Р°СЃС…РѕРґР°/Р”РѕС…РѕРґР°.
  void updateProject(int projectId) {
    // РЈР±РµРґРёРјСЃСЏ, С‡С‚Рѕ СЌС‚РѕС‚ РјРµС‚РѕРґ РІС‹Р·С‹РІР°РµС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ Р Р°СЃС…РѕРґР°/Р”РѕС…РѕРґР°
    if (state.transactionType == TransactionType.expense || state.transactionType == TransactionType.income) {
      state = state.copyWith(projectId: projectId);
      debugPrint('State updated - Project ID: ${state.projectId}');
    } else {
      debugPrint('вљ пёЏ РџРѕРїС‹С‚РєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЊ projectId РґР»СЏ С‚РёРїР° ${state.transactionType}');
    }
  }


  /// РћР±РЅРѕРІР»СЏРµС‚ РґР°С‚Сѓ С‚СЂР°РЅР·Р°РєС†РёРё.
  void updateDate(DateTime date) {
    state = state.copyWith(date: date);
    debugPrint('State updated - Date: ${state.date}');
  }

  /// РћР±РЅРѕРІР»СЏРµС‚ РѕРїРёСЃР°РЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё.
  void updateDescription(String? description) {
    final newDescription = (description != null && description.trim().isEmpty) ? null : description;
    state = state.copyWith(description: newDescription);
    debugPrint('State updated - Description: ${state.description}');
  }

  /// РћР±РЅРѕРІР»СЏРµС‚ С‚РёРї С‚СЂР°РЅР·Р°РєС†РёРё (expense, income, transfer).
  /// !!! РР—РњР•РќР•РќРћ: РџСЂРёРЅРёРјР°РµС‚ TransactionType enum
  void updateTransactionType(TransactionType type) {
    // РќРµС‚ РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё РІ РІР°Р»РёРґР°С†РёРё, С‚.Рє. РїСЂРёС…РѕРґРёС‚ enum
    state = state.copyWith(transactionType: type);
    debugPrint('State updated - Type: ${state.transactionType}');
    // Р’С‹Р·РѕРІ resetFieldsForType РїСЂРѕРёСЃС…РѕРґРёС‚ РІ UI РїСЂРё СЃРјРµРЅРµ С‚РёРїР°
  }

  // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњРµС‚РѕРґ РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃС‡РµС‚Р° РћРўРљРЈР”Рђ (РґР»СЏ РџРµСЂРµРІРѕРґР°)
  void updateFromAccount(int accountId) {
    // РЈР±РµРґРёРјСЃСЏ, С‡С‚Рѕ СЌС‚РѕС‚ РјРµС‚РѕРґ РІС‹Р·С‹РІР°РµС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ РџРµСЂРµРІРѕРґР°
    if (state.transactionType == TransactionType.transfer) {
      state = state.copyWith(fromAccountId: accountId);
      debugPrint('State updated - From Account ID: ${state.fromAccountId}');
      // РџСЂРѕРІРµСЂСЏРµРј, РјРѕР¶РЅРѕ Р»Рё СЃРѕР·РґР°С‚СЊ РїРµСЂРµРІРѕРґ РїРѕСЃР»Рµ РІС‹Р±РѕСЂР° СЃС‡РµС‚Р° РћРўРљРЈР”Рђ
      if (state.amount > 0 && state.toAccountId != null && state.fromAccountId != state.toAccountId) {
        _createTransaction(); // РўСЂРёРіРіРµСЂ СЃРѕС…СЂР°РЅРµРЅРёСЏ РїРµСЂРµРІРѕРґР°
      }
    } else {
      debugPrint('вљ пёЏ РџРѕРїС‹С‚РєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЊ fromAccountId РґР»СЏ С‚РёРїР° ${state.transactionType}');
    }
  }

  // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњРµС‚РѕРґ РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃС‡РµС‚Р° РљРЈР”Рђ (РґР»СЏ РџРµСЂРµРІРѕРґР°)
  void updateToAccount(int accountId) {
    // РЈР±РµРґРёРјСЃСЏ, С‡С‚Рѕ СЌС‚РѕС‚ РјРµС‚РѕРґ РІС‹Р·С‹РІР°РµС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ РџРµСЂРµРІРѕРґР°
    if (state.transactionType == TransactionType.transfer) {
      state = state.copyWith(toAccountId: accountId);
      debugPrint('State updated - To Account ID: ${state.toAccountId}');
      // РџСЂРѕРІРµСЂСЏРµРј, РјРѕР¶РЅРѕ Р»Рё СЃРѕР·РґР°С‚СЊ РїРµСЂРµРІРѕРґ РїРѕСЃР»Рµ РІС‹Р±РѕСЂР° СЃС‡РµС‚Р° РљРЈР”Рђ
      if (state.amount > 0 && state.fromAccountId != null && state.fromAccountId != state.toAccountId) {
        _createTransaction(); // РўСЂРёРіРіРµСЂ СЃРѕС…СЂР°РЅРµРЅРёСЏ РїРµСЂРµРІРѕРґР°
      }
    } else {
      debugPrint('вљ пёЏ РџРѕРїС‹С‚РєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЊ toAccountId РґР»СЏ С‚РёРїР° ${state.transactionType}');
    }
  }


  // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњРµС‚РѕРґ РґР»СЏ СЃР±СЂРѕСЃР° РїРѕР»РµР№ РїСЂРё СЃРјРµРЅРµ С‚РёРїР° С‚СЂР°РЅР·Р°РєС†РёРё
  /// Resets fields based on the new transaction type.
  void resetFieldsForType(TransactionType newType) {
    // РџРѕР»СѓС‡Р°РµРј С‚РµРєСѓС‰РµРµ СЃРѕСЃС‚РѕСЏРЅРёРµ
    final currentState = state;

    // РћРїСЂРµРґРµР»СЏРµРј, РєР°РєРёРµ РїРѕР»СЏ РЅСѓР¶РЅРѕ СЃР±СЂРѕСЃРёС‚СЊ
    int? newCategoryId = currentState.transactionCategoryId;
    int? newAccountId = currentState.accountId; // Р”Р»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°
    int? newProjectId = currentState.projectId;
    int? newFromAccountId = currentState.fromAccountId; // Р”Р»СЏ РїРµСЂРµРІРѕРґР°
    int? newToAccountId = currentState.toAccountId; // Р”Р»СЏ РїРµСЂРµРІРѕРґР°

    if (newType == TransactionType.transfer) {
      // Р•СЃР»Рё РїРµСЂРµС…РѕРґРёРј РЅР° "РџРµСЂРµРІРѕРґ", СЃР±СЂР°СЃС‹РІР°РµРј РєР°С‚РµРіРѕСЂРёСЋ, СЃС‡РµС‚ (РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°) Рё РїСЂРѕРµРєС‚
      newCategoryId = null;
      newAccountId = null;
      newProjectId = null;

      // TODO: Р’ Р‘РЈР”РЈР©Р•Рњ - РїСЂРё РїРµСЂРІРѕРј РІС‹Р±РѕСЂРµ С‚РёРїР° РџРµСЂРµРІРѕРґ, СѓСЃС‚Р°РЅРѕРІРёС‚СЊ fromAccountId РЅР° СЃС‡РµС‚ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
      // Р­С‚РѕС‚ Р±Р»РѕРє РєРѕРґР° РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РїСЂРё *РєР°Р¶РґРѕР№* СЃРјРµРЅРµ С‚РёРїР° РЅР° РџРµСЂРµРІРѕРґ.
      // Р•СЃР»Рё РЅСѓР¶РЅРѕ СѓСЃС‚Р°РЅРѕРІРёС‚СЊ РґРµС„РѕР»С‚РЅС‹Р№ СЃС‡РµС‚ С‚РѕР»СЊРєРѕ РїСЂРё РџР•Р Р’РћРњ РїРµСЂРµС…РѕРґРµ РЅР° РџРµСЂРµРІРѕРґ,
      // РґРѕР±Р°РІСЊС‚Рµ С„Р»Р°Рі РІ СЃРѕСЃС‚РѕСЏРЅРёРµ РёР»Рё РёСЃРїРѕР»СЊР·СѓР№С‚Рµ РґСЂСѓРіСѓСЋ Р»РѕРіРёРєСѓ.
      // РџСЂРёРјРµСЂ СѓСЃС‚Р°РЅРѕРІРєРё СЃС‡РµС‚Р° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ (Р·Р°РјРµРЅРёС‚Рµ 1 РЅР° СЂРµР°Р»СЊРЅС‹Р№ ID)
      if (currentState.transactionType != TransactionType.transfer) { // Р•СЃР»Рё РїСЂРµРґС‹РґСѓС‰РёР№ С‚РёРї РЅРµ Р±С‹Р» РїРµСЂРµРІРѕРґРѕРј
        // Р—РґРµСЃСЊ РјРѕР¶РµС‚ Р±С‹С‚СЊ Р»РѕРіРёРєР° РїРѕР»СѓС‡РµРЅРёСЏ ID СЃС‡РµС‚Р° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ
        // final int defaultAccountId = ...;
        // newFromAccountId = defaultAccountId; // РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј РґРµС„РѕР»С‚РЅС‹Р№ "РѕС‚РєСѓРґР°"
        // newToAccountId = null; // РћС‡РёС‰Р°РµРј "РєСѓРґР°" РїСЂРё СЃРјРµРЅРµ С‚РёРїР°
      }


    } else { // Р•СЃР»Рё РїРµСЂРµС…РѕРґРёРј РЅР° "Р Р°СЃС…РѕРґ" РёР»Рё "Р”РѕС…РѕРґ"
      // РЎР±СЂР°СЃС‹РІР°РµРј СЃС‡РµС‚Р° РїРµСЂРµРІРѕРґР°
      newFromAccountId = null;
      newToAccountId = null;
      // РћСЃС‚Р°РІР»СЏРµРј РєР°С‚РµРіРѕСЂРёСЋ, СЃС‡РµС‚ (РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°) Рё РїСЂРѕРµРєС‚, РµСЃР»Рё РѕРЅРё СѓР¶Рµ Р±С‹Р»Рё СѓСЃС‚Р°РЅРѕРІР»РµРЅС‹
    }

    // РћР±РЅРѕРІР»СЏРµРј СЃРѕСЃС‚РѕСЏРЅРёРµ СЃ СѓС‡РµС‚РѕРј СЃР±СЂРѕС€РµРЅРЅС‹С…/СЃРѕС…СЂР°РЅРµРЅРЅС‹С… РїРѕР»РµР№ Рё РЅРѕРІРѕРіРѕ С‚РёРїР°
    state = currentState.copyWith(
      transactionType: newType, // РћР±РЅРѕРІР»СЏРµРј С‚РёРї
      transactionCategoryId: newCategoryId,
      accountId: newAccountId, // РџРѕР»Рµ accountId РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ С‚РѕР»СЊРєРѕ РґР»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°
      projectId: newProjectId,
      fromAccountId: newFromAccountId,
      toAccountId: newToAccountId,
      // РЎСѓРјРјР°, РґР°С‚Р°, РѕРїРёСЃР°РЅРёРµ Рё С„Р»Р°Рі Р°РєС‚РёРІРЅРѕСЃС‚Рё РѕР±С‹С‡РЅРѕ РѕСЃС‚Р°СЋС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№
    );
    debugPrint('рџ”„ РџРѕР»СЏ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° СЃР±СЂРѕС€РµРЅС‹ РґР»СЏ С‚РёРїР°: $newType');
  }


  // --- РџСЂРёРІР°С‚РЅС‹Рµ РјРµС‚РѕРґС‹ ---

  /// РђСЃРёРЅС…СЂРѕРЅРЅРѕ СЃРѕР·РґР°РµС‚ (СЃРѕС…СЂР°РЅСЏРµС‚) С‚СЂР°РЅР·Р°РєС†РёСЋ С‡РµСЂРµР· СЂРµРїРѕР·РёС‚РѕСЂРёР№.
  /// РџРѕСЃР»Рµ СѓСЃРїРµС€РЅРѕРіРѕ СЃРѕС…СЂР°РЅРµРЅРёСЏ СЃР±СЂР°СЃС‹РІР°РµС‚ СЃРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР°.
  Future<void> _createTransaction() async {
    // !!! Р›РћР“РРљРђ РЎРћРҐР РђРќР•РќРРЇ Р—РђР’РРЎРРў РћРў РўРРџРђ РўР РђРќР—РђРљР¦РР !!!
    // Р’Р°Рј РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ СЂРµР°Р»РёР·РѕРІР°С‚СЊ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰СѓСЋ Р»РѕРіРёРєСѓ РІ СЂРµРїРѕР·РёС‚РѕСЂРёРё
    // РёР»Рё РїРѕРґРіРѕС‚РѕРІРёС‚СЊ TransactionEntity РїРѕ-СЂР°Р·РЅРѕРјСѓ РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ state.transactionType

    bool canCreate = false;
    String? reason;

    if (state.transactionType == TransactionType.expense || state.transactionType == TransactionType.income) {
      // Р”Р»СЏ СЂР°СЃС…РѕРґР°/РґРѕС…РѕРґР°: РЅСѓР¶РЅР° СЃСѓРјРјР° Рё РєР°С‚РµРіРѕСЂРёСЏ
      if (state.amount > 0 && state.transactionCategoryId != null) {
        canCreate = true;
      } else {
        reason = state.amount <= 0 ? 'РЎСѓРјРјР° > 0' : 'РљР°С‚РµРіРѕСЂРёСЏ РІС‹Р±СЂР°РЅР°';
      }
    } else if (state.transactionType == TransactionType.transfer) {
      // Р”Р»СЏ РїРµСЂРµРІРѕРґР°: РЅСѓР¶РЅР° СЃСѓРјРјР°, СЃС‡РµС‚ РѕС‚РєСѓРґР° Рё СЃС‡РµС‚ РєСѓРґР°, Рё РѕРЅРё РЅРµ РґРѕР»Р¶РЅС‹ СЃРѕРІРїР°РґР°С‚СЊ
      if (state.amount > 0 && state.fromAccountId != null && state.toAccountId != null && state.fromAccountId != state.toAccountId) {
        canCreate = true;
      } else {
        reason = state.amount <= 0 ? 'РЎСѓРјРјР° > 0' : (state.fromAccountId == null ? 'РЎС‡РµС‚ "РћС‚РєСѓРґР°" РІС‹Р±СЂР°РЅ' : (state.toAccountId == null ? 'РЎС‡РµС‚ "РљСѓРґР°" РІС‹Р±СЂР°РЅ' : 'РЎС‡РµС‚Р° РЅРµ СЃРѕРІРїР°РґР°СЋС‚'));
      }
    }

    if (!canCreate) {
      debugPrint('в›” РќРµ РІСЃРµ СѓСЃР»РѕРІРёСЏ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ С‚СЂР°РЅР·Р°РєС†РёРё (${state.transactionType}) РІС‹РїРѕР»РЅРµРЅС‹. РўСЂРµР±РѕРІР°РЅРёРµ: $reason');
      // Р’РѕР·РјРѕР¶РЅРѕ, СЃС‚РѕРёС‚ РїРѕРєР°Р·Р°С‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»СЋ СЃРѕРѕР±С‰РµРЅРёРµ, С‡РµРіРѕ РЅРµ С…РІР°С‚Р°РµС‚
      return;
    }

    try {
      debugPrint('рџ’ѕ РџРѕРїС‹С‚РєР° СЃРѕР·РґР°РЅРёСЏ С‚СЂР°РЅР·Р°РєС†РёРё С‚РёРїР° ${state.transactionType}: ${state.toString()}');
      // Р’С‹Р·С‹РІР°РµРј РјРµС‚РѕРґ СЂРµРїРѕР·РёС‚РѕСЂРёСЏ РґР»СЏ СЃРѕС…СЂР°РЅРµРЅРёСЏ С‚РµРєСѓС‰РµРіРѕ СЃРѕСЃС‚РѕСЏРЅРёСЏ
      // Р РµРїРѕР·РёС‚РѕСЂРёР№ РґРѕР»Р¶РµРЅ РїСЂР°РІРёР»СЊРЅРѕ РѕР±СЂР°Р±РѕС‚Р°С‚СЊ TransactionEntity РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ state.transactionType
      await repository.create(state); // Р’Р°Рј РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ СѓР±РµРґРёС‚СЊСЃСЏ, С‡С‚Рѕ repository.create РјРѕР¶РµС‚ РїСЂРёРЅРёРјР°С‚СЊ TransactionEntity СЃ Р·Р°РїРѕР»РЅРµРЅРЅС‹РјРё РїРѕР»СЏРјРё transfer
      debugPrint('вњ… РўСЂР°РЅР·Р°РєС†РёСЏ С‚РёРїР° ${state.transactionType} СѓСЃРїРµС€РЅРѕ СЃРѕР·РґР°РЅР°');
      // РЎР±СЂР°СЃС‹РІР°РµРј СЃРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° Рє РЅР°С‡Р°Р»СЊРЅРѕРјСѓ РїРѕСЃР»Рµ СЃРѕС…СЂР°РЅРµРЅРёСЏ
      reset(); // РџРѕР»РЅС‹Р№ СЃР±СЂРѕСЃ СЃРѕСЃС‚РѕСЏРЅРёСЏ
    } catch (e) {
      debugPrint('вќЊ РћС€РёР±РєР° РїСЂРё СЃРѕР·РґР°РЅРёРё С‚СЂР°РЅР·Р°РєС†РёРё С‚РёРїР° ${state.transactionType}: $e');
      // РћР±СЂР°Р±РѕС‚РєР° РѕС€РёР±РѕРє
    }
  }

  // --- РџСѓР±Р»РёС‡РЅС‹Рµ РјРµС‚РѕРґС‹ СѓРїСЂР°РІР»РµРЅРёСЏ ---

  /// РЎР±СЂР°СЃС‹РІР°РµС‚ СЃРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° Рє РЅР°С‡Р°Р»СЊРЅС‹Рј Р·РЅР°С‡РµРЅРёСЏРј.
  /// РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РїРѕСЃР»Рµ СѓСЃРїРµС€РЅРѕРіРѕ СЃРѕС…СЂР°РЅРµРЅРёСЏ С‚СЂР°РЅР·Р°РєС†РёРё РёР»Рё РїСЂРё РѕС‚РјРµРЅРµ.
  void reset() {
    rawAmount = ''; // РћС‡РёС‰Р°РµРј РІСЂРµРјРµРЅРЅРѕРµ С…СЂР°РЅРёР»РёС‰Рµ СЃСѓРјРјС‹
    // РЎРѕР·РґР°РµРј РЅРѕРІС‹Р№ РѕР±СЉРµРєС‚ TransactionEntity СЃ РґРµС„РѕР»С‚РЅС‹РјРё Р·РЅР°С‡РµРЅРёСЏРјРё
    state = TransactionEntity(
      id: null,
      serverId: null,
      userId: 1, // Р’РѕСЃСЃС‚Р°РЅР°РІР»РёРІР°РµРј ID РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ (Р·Р°РјРµРЅРёС‚СЊ РЅР° СЂРµР°Р»СЊРЅС‹Р№)
      transactionType: TransactionType.expense, // РЎР±СЂР°СЃС‹РІР°РµРј С‚РёРї РЅР° РґРµС„РѕР»С‚РЅС‹Р№ СЂР°СЃС…РѕРґ
      transactionCategoryId: null, // РљР°С‚РµРіРѕСЂРёСЏ РЅРµ РІС‹Р±СЂР°РЅР°
      amount: 0, // РЎСѓРјРјР° 0
      accountId: 1, // РЎС‡РµС‚ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ (Р·Р°РјРµРЅРёС‚СЊ РЅР° СЂРµР°Р»СЊРЅС‹Р№ ID)
      projectId: 1, // РџСЂРѕРµРєС‚ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ (Р·Р°РјРµРЅРёС‚СЊ РЅР° СЂРµР°Р»СЊРЅС‹Р№ ID)
      description: null,
      date: DateTime.now(), // РўРµРєСѓС‰Р°СЏ РґР°С‚Р°
      isActive: true,
      fromAccountId: null, // РЎС‡РµС‚Р° РїРµСЂРµРІРѕРґР° СЃР±СЂРѕС€РµРЅС‹
      toAccountId: null,
    );
    debugPrint('рџ”„ РЎРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° РїРѕР»РЅРѕСЃС‚СЊСЋ СЃР±СЂРѕС€РµРЅРѕ');
    // РџСЂРё РїРѕР»РЅРѕРј СЃР±СЂРѕСЃРµ, РІРѕР·РјРѕР¶РЅРѕ, РЅСѓР¶РЅРѕ С‚Р°РєР¶Рµ РѕР±РЅРѕРІРёС‚СЊ TransactionTypeProvider РІ UI
    // ref.read(transactionTypeProvider.notifier).state = TransactionType.expense; // Р­С‚Рѕ РґРµР»Р°РµС‚СЃСЏ РІ UI
  }

// TODO: Р’ Р‘РЈР”РЈР©Р•Рњ - Р’РѕР·РјРѕР¶РЅРѕ, РїРѕРЅР°РґРѕР±РёС‚СЃСЏ РјРµС‚РѕРґ РґР»СЏ Р·Р°РіСЂСѓР·РєРё СЃСѓС‰РµСЃС‚РІСѓСЋС‰РµР№ С‚СЂР°РЅР·Р°РєС†РёРё РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ
// Future<void> loadTransaction(int id) async { ... }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\providers\transaction_provider.dart =====

import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_app_1/features/transactions/data/repositories/transaction_repository.dart';
import 'package:flutter_app_1/features/transactions/data/data_sources/transaction_local_data_source.dart';
import 'package:flutter_app_1/features/transactions/data/data_sources/transaction_remote_data_source.dart';
import 'package:flutter_app_1/core/services/offline_sync_service.dart';
import 'package:flutter_app_1/features/transactions/domain/models/transaction_entity.dart';
import 'package:flutter_app_1/core/api/dio_provider.dart';
import 'package:flutter_app_1/core/db/app_database.dart';
import 'package:flutter_app_1/core/network/network_status_notifier.dart';

/// РџСЂРѕРІР°Р№РґРµСЂ Р±Р°Р·С‹ РґР°РЅРЅС‹С…
final appDatabaseProvider = Provider<AppDatabase>((ref) => AppDatabase());

/// Р’СЂРµРјРµРЅРЅС‹Р№ userId (РґРѕ Р°РІС‚РѕСЂРёР·Р°С†РёРё)
final userIdProvider = Provider<int>((ref) => 1);

/// РџСЂРѕРІР°Р№РґРµСЂ Р»РѕРєР°Р»СЊРЅРѕРіРѕ РёСЃС‚РѕС‡РЅРёРєР° РґР°РЅРЅС‹С…
final transactionLocalDataSourceProvider = Provider<TransactionLocalDataSource>((ref) {
  final db = ref.watch(appDatabaseProvider);
  final userId = ref.watch(userIdProvider);
  return TransactionLocalDataSource(db: db, userId: userId);
});

/// РџСЂРѕРІР°Р№РґРµСЂ СѓРґР°Р»С‘РЅРЅРѕРіРѕ РёСЃС‚РѕС‡РЅРёРєР° РґР°РЅРЅС‹С…
final transactionRemoteDataSourceProvider = Provider<TransactionRemoteDataSource>((ref) {
  final dio = ref.watch(dioProvider);
  return TransactionRemoteDataSource(dio: dio);
});

/// РџСЂРѕРІР°Р№РґРµСЂ OfflineSyncService
final offlineSyncServiceProvider = Provider<OfflineSyncService>((ref) {
  final dio = ref.watch(dioProvider);
  final db = ref.watch(appDatabaseProvider);
  final networkStatus = ref.watch(networkStatusProvider);
  return OfflineSyncService(dio: dio, db: db, networkStatusProvider: networkStatus);
});

/// РџСЂРѕРІР°Р№РґРµСЂ СЂРµРїРѕР·РёС‚РѕСЂРёСЏ
final transactionRepositoryProvider = Provider<TransactionRepository>((ref) {
  final remote = ref.watch(transactionRemoteDataSourceProvider);
  final local = ref.watch(transactionLocalDataSourceProvider);
  final sync = ref.watch(offlineSyncServiceProvider);
  final userId = ref.watch(userIdProvider);
  final db = ref.watch(appDatabaseProvider);

  return TransactionRepository(
    remote: remote,
    local: local,
    syncService: sync,
    userId: userId,
    db: db,
  );
});

/// Stream РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№ (Р»РѕРєР°Р»СЊРЅС‹Р№ Drift)
final transactionStreamProvider = StreamProvider<List<TransactionEntity>>((ref) {
  final repository = ref.watch(transactionRepositoryProvider);
  return repository.watchAll();
});

/// РљРѕРјР°РЅРґР° РЅР° РѕР±РЅРѕРІР»РµРЅРёРµ РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№ РёР· API
final transactionFetchProvider = Provider<Future<List<TransactionEntity>>>((ref) async {
  debugPrint('вћЎпёЏ Р’С‹РїРѕР»РЅСЏРµС‚СЃСЏ transactionFetchProvider');
  final repository = ref.watch(transactionRepositoryProvider);
  return repository.fetch();
});
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\screens\transaction_create_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/features/transactions/presentation/widgets/transaction_create_screen/sum_view_widget.dart';
import 'package:flutter_app_1/features/transactions/presentation/widgets/transaction_create_screen/transaction_type_selector_widget.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../generated/locale_keys.g.dart';
import '../../../../main.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ СЌС‚РѕС‚ РёРјРїРѕСЂС‚ РїСЂР°РІРёР»СЊРЅС‹Р№ РґР»СЏ transactionTypeProvider
import '../../../accounts/domain/models/account.dart';
import '../providers/transaction_controller.dart';
import '../widgets/transaction_create_screen/additional_fields_widget.dart';
import '../widgets/transaction_create_screen/category_picker_widget.dart';
import '../widgets/transaction_create_screen/numeric_keypad_widget.dart';
import '../widgets/transaction_create_screen/transfer_accounts_selector_widget.dart'; // РРјРїРѕСЂС‚РёСЂСѓРµРј РЅРѕРІС‹Р№ РІРёРґР¶РµС‚

enum TransactionType { expense, income, transfer}

// РџСЂРёРјРµСЂ СЃРїРёСЃРєР° СЃС‡РµС‚РѕРІ. Р’ СЂРµР°Р»СЊРЅРѕРј РїСЂРёР»РѕР¶РµРЅРёРё СЌС‚Рё РґР°РЅРЅС‹Рµ РґРѕР»Р¶РЅС‹ РїСЂРёС…РѕРґРёС‚СЊ РёР· РІР°С€РµРіРѕ СЃР»РѕСЏ РґР°РЅРЅС‹С….
final List<Account> availableAccounts = [
  Account(id: 1, name: 'РќР°Р»РёС‡РЅС‹Рµ'),
  Account(id: 2, name: 'РЎС‡РµС‚ Р‘Р°РЅРєР° Рђ'),
  Account(id: 3, name: 'РЎС‡РµС‚ Р‘Р°РЅРєР° Р‘'),
  Account(id: 10, name: 'Р”РµРїРѕР·РёС‚'),
];


class TransactionCreateScreen extends ConsumerWidget {
  const TransactionCreateScreen ({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final TransactionType selectedSegment = ref.watch(transactionTypeProvider);

    return Scaffold(
      body: Column(
        children: [
          TransactionTypeSelectorWidget(
            selectedSegment: selectedSegment,
            onValueChanged: (TransactionType value) {
              ref.read(transactionTypeProvider.notifier).state = value;
              // РџСЂРё СЃРјРµРЅРµ С‚РёРїР° С‚СЂР°РЅР·Р°РєС†РёРё, РІРѕР·РјРѕР¶РЅРѕ, РЅСѓР¶РЅРѕ СЃР±СЂРѕСЃРёС‚СЊ РЅРµРєРѕС‚РѕСЂС‹Рµ РїРѕР»СЏ РІ РєРѕРЅС‚СЂРѕР»Р»РµСЂРµ
              ref.read(transactionCreateControllerProvider.notifier).resetFieldsForType(value);
            },
          ),
          AnimatedSwitcher(
            duration: const Duration(milliseconds: 300),
            child: selectedSegment == TransactionType.transfer
                ?
            TransferAccountsSelectorWidget(
              key: const ValueKey('transfer_selector'),
              accounts: availableAccounts, // РСЃРїРѕР»СЊР·СѓРµРј Р·Р°РіР»СѓС€РєСѓ СЃРїРёСЃРєР° СЃС‡РµС‚РѕРІ
            )
                :
            Column(
              key: const ValueKey('category_fields'),
              children: [
                CategoryPickerWidget(transactionType: selectedSegment),
                AdditionalFieldsWidget(accounts: availableAccounts), // РСЃРїРѕР»СЊР·СѓРµРј Р·Р°РіР»СѓС€РєСѓ СЃРїРёСЃРєР° СЃС‡РµС‚РѕРІ
              ],
            ),
          ),
          const SumViewWidget(),
          const NumericKeypadWidget(),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\screens\transaction_detail_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_picker_fields/custom_primary_picker_field.dart';
import 'package:flutter_app_1/common/widgets/custom_buttons/custom_primary_button.dart';
import 'package:flutter_app_1/common/widgets/custom_text_form_field.dart';
import 'package:flutter_app_1/common/widgets/custom_picker_fields/picker_item.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє С‚РµРјР°Рј РїСЂР°РІРёР»СЊРЅС‹Рµ
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import '../../../../generated/locale_keys.g.dart';
import '../../../accounts/presentation/account_screen.dart';
import '../../../../common/widgets/custom_show_modal_bottom_sheet.dart';
import '../widgets/transaction_list_widget.dart';

// !!! РРњРџРћР РўРР РЈР•Рњ РћР‘Р©РЈР® РњРћР”Р•Р›Р¬ РўР РђРќР—РђРљР¦РР (Р—РђР“Р›РЈРЁРљРђ), РєРѕС‚РѕСЂСѓСЋ РјС‹ СЃРѕР·РґР°Р»Рё СЂР°РЅРµРµ
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ РїСЂР°РІРёР»СЊРЅС‹Р№.



// !!! РЈРґР°Р»СЏРµРј Р»РѕРєР°Р»СЊРЅС‹Рµ Р·Р°РіР»СѓС€РєРё РјРѕРґРµР»РµР№ С‚СЂР°РЅР·Р°РєС†РёР№ РёР· СЌС‚РѕРіРѕ С„Р°Р№Р»Р°
// class _DummyAccountTransaction { ... }
// final Map<String, List<_DummyAccountTransaction>> _currentAccountTransactions = { ... }


// Р­РєСЂР°РЅ РґРµС‚Р°Р»РµР№ С‚СЂР°РЅР·Р°РєС†РёРё (РЎ Р Р•Р”РђРљРўРР РЈР•РњР«РњР РџРћР›РЇРњР - Р—РђР“Р›РЈРЁРљРђ UI)
// !!! РџСЂРµРІСЂР°С‰Р°РµРј РёР· StatelessWidget РІ StatefulWidget
class TransactionDetailScreen extends StatefulWidget {
  // РџСЂРёРЅРёРјР°РµС‚ РѕР±СЉРµРєС‚ С‚СЂР°РЅР·Р°РєС†РёРё (С‚РёРїР° DummyTransaction)
  final DummyAccountTransaction transaction;

  const TransactionDetailScreen({super.key, required this.transaction});

  @override
  State<TransactionDetailScreen> createState() => _TransactionDetailScreenState();
}

class _TransactionDetailScreenState extends State<TransactionDetailScreen> {
  // !!! РџРµСЂРµРјРµРЅРЅС‹Рµ СЃРѕСЃС‚РѕСЏРЅРёСЏ РґР»СЏ С…СЂР°РЅРµРЅРёСЏ СЂРµРґР°РєС‚РёСЂСѓРµРјС‹С… Р·РЅР°С‡РµРЅРёР№ РїРѕР»РµР№
  // РСЃРїРѕР»СЊР·СѓРµРј TextEditingController РґР»СЏ РїРѕР»РµР№ РІРІРѕРґР° С‚РµРєСЃС‚Р° (Amount, Comment)
  late TextEditingController _amountController;
  late TextEditingController _commentController;

  // Р”Р»СЏ РїРѕР»РµР№, РєРѕС‚РѕСЂС‹Рµ РІС‹Р±РёСЂР°СЋС‚СЃСЏ (РљР°С‚РµРіРѕСЂРёСЏ, РЎС‡РµС‚, Р”Р°С‚Р°), С…СЂР°РЅРёРј РІС‹Р±СЂР°РЅРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ
  late String _selectedCategoryName; // РџРѕРєР° С…СЂР°РЅРёРј С‚РѕР»СЊРєРѕ РёРјСЏ РєР°С‚РµРіРѕСЂРёРё
  late String _selectedAccountName; // РџРѕРєР° С…СЂР°РЅРёРј С‚РѕР»СЊРєРѕ РёРјСЏ СЃС‡РµС‚Р°
  late String _selectedProjectName; // РџРѕРєР° С…СЂР°РЅРёРј С‚РѕР»СЊРєРѕ РёРјСЏ РїСЂРѕРµРєС‚Р°
  late DateTime _selectedDate; // РҐСЂР°РЅРёРј РІС‹Р±СЂР°РЅРЅСѓСЋ РґР°С‚Сѓ

  @override
  void initState() {
    super.initState();
    // !!! РРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РїРµСЂРµРјРµРЅРЅС‹С… СЃРѕСЃС‚РѕСЏРЅРёСЏ Рё РєРѕРЅС‚СЂРѕР»Р»РµСЂРѕРІ
    // Р‘РµСЂРµРј РЅР°С‡Р°Р»СЊРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ РёР· РѕР±СЉРµРєС‚Р° transaction, РїРµСЂРµРґР°РЅРЅРѕРіРѕ РІ РІРёРґР¶РµС‚
    _amountController = TextEditingController(text: widget.transaction.amount.toStringAsFixed(0)); // РРЅРёС†РёР°Р»РёР·РёСЂСѓРµРј СЃ С‚РµРєСѓС‰РµР№ СЃСѓРјРјРѕР№
    // TODO: Р•СЃР»Рё РІ DummyTransaction РїРѕСЏРІРёС‚СЃСЏ РїРѕР»Рµ comment, РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°С‚СЊ РѕС‚С‚СѓРґР°
    _commentController = TextEditingController(text: ''); // РџРѕРєР° Р·Р°РіР»СѓС€РєР° РєРѕРјРјРµРЅС‚Р°СЂРёСЏ

    _selectedCategoryName = widget.transaction.categoryName; // РРЅРёС†РёР°Р»РёР·РёСЂСѓРµРј СЃ С‚РµРєСѓС‰РµР№ РєР°С‚РµРіРѕСЂРёРµР№
    // TODO: РСЃРїРѕР»СЊР·РѕРІР°С‚СЊ СЂРµР°Р»СЊРЅРѕРµ РЅР°Р·РІР°РЅРёРµ СЃС‡РµС‚Р° РёР»Рё РѕР±СЉРµРєС‚ Account, РµСЃР»Рё Р±СѓРґРµС‚ РґРѕСЃС‚СѓРїРµРЅ
    _selectedAccountName = 'РЎС‡РµС‚ Kaspi bank'; // РџРѕРєР° Р·Р°РіР»СѓС€РєР°

    // TODO: РСЃРїРѕР»СЊР·РѕРІР°С‚СЊ СЂРµР°Р»СЊРЅСѓСЋ РґР°С‚Сѓ С‚СЂР°РЅР·Р°РєС†РёРё, РµСЃР»Рё РѕРЅР° РїРѕСЏРІРёС‚СЃСЏ РІ DummyTransaction
    _selectedDate = DateTime.now(); // РџРѕРєР° Р·Р°РіР»СѓС€РєР° С‚РµРєСѓС‰РµР№ РґР°С‚С‹
  }

  @override
  void dispose() {
    // !!! Р’Р°Р¶РЅРѕ: РћСЃРІРѕР±РѕР¶РґР°РµРј РєРѕРЅС‚СЂРѕР»Р»РµСЂС‹, РєРѕРіРґР° РІРёРґР¶РµС‚ СѓРґР°Р»СЏРµС‚СЃСЏ, С‡С‚РѕР±С‹ РёР·Р±РµР¶Р°С‚СЊ СѓС‚РµС‡РµРє РїР°РјСЏС‚Рё
    _amountController.dispose();
    _commentController.dispose();
    super.dispose();
  }


  // Р¤СѓРЅРєС†РёСЏ РїРѕРєР°Р·Р° РїРёРєРµСЂР° РґР°С‚С‹ РїСЂРё РЅР°Р¶Р°С‚РёРё РЅР° РїРѕР»Рµ "Р”Р°С‚Р°"
  Future<void> _selectDate(BuildContext context) async {
    // РџРѕРєР°Р·С‹РІР°РµРј СЃС‚Р°РЅРґР°СЂС‚РЅС‹Р№ РїРёРєРµСЂ РґР°С‚С‹
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate, // РР·РЅР°С‡Р°Р»СЊРЅРѕ РІС‹Р±СЂР°РЅРЅР°СЏ РґР°С‚Р°
      firstDate: DateTime(2000), // РЎР°РјР°СЏ СЂР°РЅРЅСЏСЏ РґРѕСЃС‚СѓРїРЅР°СЏ РґР°С‚Р°
      lastDate: DateTime(2101), // РЎР°РјР°СЏ РїРѕР·РґРЅСЏСЏ РґРѕСЃС‚СѓРїРЅР°СЏ РґР°С‚Р°
    );
    // Р•СЃР»Рё РґР°С‚Р° РІС‹Р±СЂР°РЅР° (picked РЅРµ null) Рё РѕРЅР° РѕС‚Р»РёС‡Р°РµС‚СЃСЏ РѕС‚ С‚РµРєСѓС‰РµР№ РІС‹Р±СЂР°РЅРЅРѕР№ РґР°С‚С‹
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked; // РћР±РЅРѕРІР»СЏРµРј РІС‹Р±СЂР°РЅРЅСѓСЋ РґР°С‚Сѓ Рё РїРµСЂРµСЃС‚СЂР°РёРІР°РµРј РІРёРґР¶РµС‚
      });
    }
  }

  // TODO: Р РµР°Р»РёР·РѕРІР°С‚СЊ С„СѓРЅРєС†РёСЋ СЃРѕС…СЂР°РЅРµРЅРёСЏ РёР·РјРµРЅРµРЅРёР№ РїСЂРё РЅР°Р¶Р°С‚РёРё РєРЅРѕРїРєРё "Save"
  void _saveTransaction() {
    // !!! РЎРѕР±РёСЂР°РµРј С‚РµРєСѓС‰РёРµ Р·РЅР°С‡РµРЅРёСЏ РёР· РєРѕРЅС‚СЂРѕР»Р»РµСЂРѕРІ Рё РїРµСЂРµРјРµРЅРЅС‹С… СЃРѕСЃС‚РѕСЏРЅРёСЏ
    final editedAmount = num.tryParse(_amountController.text) ?? widget.transaction.amount; // РџР°СЂСЃРёРј СЃСѓРјРјСѓ, РёСЃРїРѕР»СЊР·СѓРµРј СЃС‚Р°СЂСѓСЋ, РµСЃР»Рё РЅРµ СѓРґР°Р»РѕСЃСЊ
    final editedComment = _commentController.text;
    final editedCategory = _selectedCategoryName;
    final editedAccount = _selectedAccountName; // TODO: РСЃРїРѕР»СЊР·РѕРІР°С‚СЊ СЂРµР°Р»СЊРЅС‹Р№ ID/РѕР±СЉРµРєС‚ СЃС‡РµС‚Р°
    final editedDate = _selectedDate;

    print('РЎРѕС…СЂР°РЅРµРЅРёРµ С‚СЂР°РЅР·Р°РєС†РёРё ID: ${widget.transaction.id}');
    print('РћС‚СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРЅР°СЏ РЎСѓРјРјР°: $editedAmount');
    print('РћС‚СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРЅР°СЏ РљР°С‚РµРіРѕСЂРёСЏ: $editedCategory');
    print('РћС‚СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРЅС‹Р№ РЎС‡РµС‚: $editedAccount');
    print('РћС‚СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРЅР°СЏ Р”Р°С‚Р°: $editedDate');
    print('РћС‚СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРЅС‹Р№ РљРѕРјРјРµРЅС‚Р°СЂРёР№: $editedComment');

    // TODO: Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р»РѕРіРёРєР° РІС‹Р·РѕРІР° СЃРµСЂРІРёСЃР°/СЂРµРїРѕР·РёС‚РѕСЂРёСЏ/РїСЂРѕРІР°Р№РґРµСЂР° РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ С‚СЂР°РЅР·Р°РєС†РёРё РІ Р±Р°Р·Рµ РґР°РЅРЅС‹С….
    // РџРµСЂРµРґР°Р№С‚Рµ СЃРѕР±СЂР°РЅРЅС‹Рµ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРЅС‹Рµ РґР°РЅРЅС‹Рµ.

    // Navigator.pop(context); // РћР±С‹С‡РЅРѕ РїРѕСЃР»Рµ СѓСЃРїРµС€РЅРѕРіРѕ СЃРѕС…СЂР°РЅРµРЅРёСЏ РІРѕР·РІСЂР°С‰Р°СЋС‚СЃСЏ РЅР°Р·Р°Рґ
  }

  @override
  Widget build(BuildContext context) {
    // !!! Р¤РѕСЂРјР°С‚РёСЂСѓРµРј РІС‹Р±СЂР°РЅРЅСѓСЋ РґР°С‚Сѓ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ РІ РїРѕР»Рµ "Р”Р°С‚Р°"
    final formattedDate = '${_selectedDate.day.toString().padLeft(2, '0')}.${_selectedDate.month.toString().padLeft(2, '0')}.${_selectedDate.year}';
    final List<PickerItem<num>> transactionCategories = [
      PickerItem(id: 1, displayValue: 'Category 1'),
      PickerItem(id: 2, displayValue: 'Category 2'),
      PickerItem(id: 3, displayValue: 'Category 3'),
    ];

    final List<PickerItem<int>> accountPickerItems = [
      PickerItem(id: 1, displayValue: 'Account 1'),
      PickerItem(id: 2, displayValue: 'Account 2'),
      PickerItem(id: 3, displayValue: 'Account 3'),
    ]; // Р—Р°РіР»СѓС€РєР° РґР»СЏ СЃРїРёСЃРєР° СЃС‡РµС‚РѕРІ
    return Scaffold(
      appBar: AppBar(
        // РљРЅРѕРїРєР° "РЅР°Р·Р°Рґ" Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё РґРѕР±Р°РІР»СЏРµС‚СЃСЏ
        title: Text(
          LocaleKeys.transaction.tr(), // Р—Р°РіРѕР»РѕРІРѕРє РєР°Рє РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ
          style: CustomTextStyles.normalMedium.copyWith(
            fontWeight: FontWeight.bold,
            color: CustomColors.onPrimary,
          ),
        ),
        actions: [
          // РРєРѕРЅРєР° РєРѕСЂР·РёРЅС‹ РґР»СЏ СѓРґР°Р»РµРЅРёСЏ
          IconButton(
            icon: const Icon(Icons.delete_outline, color: CustomColors.onPrimary),
            onPressed: () {
              // TODO: Р РµР°Р»РёР·РѕРІР°С‚СЊ РґРµР№СЃС‚РІРёРµ СѓРґР°Р»РµРЅРёСЏ С‚СЂР°РЅР·Р°РєС†РёРё
              print('РЈРґР°Р»РёС‚СЊ С‚СЂР°РЅР·Р°РєС†РёСЋ ID: ${widget.transaction.id}');
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0), // РћР±С‰РёРµ РѕС‚СЃС‚СѓРїС‹ РґР»СЏ СЃРѕРґРµСЂР¶РёРјРѕРіРѕ body
        child: ListView( // РСЃРїРѕР»СЊР·СѓРµРј ListView, С‡С‚РѕР±С‹ С„РѕСЂРјР° Р±С‹Р»Р° РїСЂРѕРєСЂСѓС‡РёРІР°РµРјРѕР№, РµСЃР»Рё РЅРµ РїРѕРјРµС‰Р°РµС‚СЃСЏ РЅР° СЌРєСЂР°РЅРµ
          children: [
            // !!! РџРѕР»Рµ РґР»СЏ РЎСѓРјРјС‹ (TextFormField)
            CustomTextFormField(
              labelText: LocaleKeys.amount.tr(),
              controller: _amountController, // РџСЂРёРІСЏР·С‹РІР°РµРј РєРѕРЅС‚СЂРѕР»Р»РµСЂ
              keyboardType: const TextInputType.numberWithOptions(decimal: true), // РљР»Р°РІРёР°С‚СѓСЂР° РґР»СЏ С‡РёСЃРµР» СЃ РґРµСЃСЏС‚РёС‡РЅРѕР№ С‚РѕС‡РєРѕР№
              suffixText: '\$', // РЎРёРјРІРѕР» РІР°Р»СЋС‚С‹ РєР°Рє СЃСѓС„С„РёРєСЃ (РїСЂРёРјРµСЂ)
            ),
            const SizedBox(height: 16), // РћС‚СЃС‚СѓРї РјРµР¶РґСѓ РїРѕР»СЏРјРё

            CustomPrimaryPickerField(
              icon: Icons.category, // РРєРѕРЅРєР° РґР»СЏ РїРѕР»СЏ "РљР°С‚РµРіРѕСЂРёСЏ"
              currentValueDisplay: _selectedCategoryName, // РћС‚РѕР±СЂР°Р¶Р°РµРј РІС‹Р±СЂР°РЅРЅСѓСЋ РєР°С‚РµРіРѕСЂРёСЋ
              onTap: () async {
                // Р’С‹Р·С‹РІР°РµРј С„СѓРЅРєС†РёСЋ РІС‹Р±РѕСЂР° РєР°С‚РµРіРѕСЂРёРё
                final selected = await customShowModalBottomSheet(
                    context: context,
                    title: LocaleKeys.selectCategory.tr(),
                    items: transactionCategories,
                    type: 'icon'
                );
                if (selected != null) {
                  setState(() {
                    _selectedCategoryName = selected.displayValue; // РћР±РЅРѕРІР»СЏРµРј РІС‹Р±СЂР°РЅРЅСѓСЋ РєР°С‚РµРіРѕСЂРёСЋ
                  });
                }
              },
              context: context,
            ),
            const SizedBox(height: 16),
            CustomPrimaryPickerField(
              icon: Icons.wallet, // РРєРѕРЅРєР° РґР»СЏ РїРѕР»СЏ "РЎС‡РµС‚"
              currentValueDisplay: _selectedAccountName, // РћС‚РѕР±СЂР°Р¶Р°РµРј РІС‹Р±СЂР°РЅРЅС‹Р№ СЃС‡РµС‚
              onTap: () async {
                final selected = await customShowModalBottomSheet(
                  context: context,
                  title: LocaleKeys.selectAccount.tr(),
                  items: accountPickerItems,
                  type: 'line',
                );
                if (selected != null) {
                  setState(() {
                    _selectedAccountName = selected.displayValue; // РћР±РЅРѕРІР»СЏРµРј РІС‹Р±СЂР°РЅРЅС‹Р№ СЃС‡РµС‚
                  });
                }
              },
              context: context,
            ),
            const SizedBox(height: 16),
            CustomPrimaryPickerField(
              icon: Icons.calendar_today, // РРєРѕРЅРєР° РґР»СЏ РїРѕР»СЏ "Р”Р°С‚Р°"
              currentValueDisplay: '${LocaleKeys.today.tr()} ($formattedDate)',
              onTap: () => _selectDate(context),
              context: context,
            ),
            // _TappableFormRow(
            //   label: 'Date',
            //   value: 'Today ($formattedDate)', // РћС‚РѕР±СЂР°Р¶Р°РµРј РІС‹Р±СЂР°РЅРЅСѓСЋ РґР°С‚Сѓ
            //   onTap: () => _selectDate(context), // РџСЂРё РЅР°Р¶Р°С‚РёРё РІС‹Р·С‹РІР°РµРј РїРёРєРµСЂ РґР°С‚С‹
            // ),
            // Р Р°Р·РґРµР»РёС‚РµР»СЏ РїРѕСЃР»Рµ РґР°С‚С‹ РЅР° СЃРєСЂРёРЅС€РѕС‚Рµ РЅРµС‚

            // !!! РџРѕР»Рµ РґР»СЏ РљРѕРјРјРµРЅС‚Р°СЂРёСЏ (TextFormField)
            const SizedBox(height: 16),
            TextFormField(
              controller: _commentController, // РџСЂРёРІСЏР·С‹РІР°РµРј РєРѕРЅС‚СЂРѕР»Р»РµСЂ
              maxLines: 3, // РџРѕР·РІРѕР»СЏРµРј РІРІРѕРґРёС‚СЊ РЅРµСЃРєРѕР»СЊРєРѕ СЃС‚СЂРѕРє
              decoration: InputDecoration(
                labelText: LocaleKeys.addComment.tr(), // РњРµС‚РєР° РїРѕР»СЏ
                fillColor: CustomColors.mainLightGrey, filled: true, // РџСЂРёРјРµСЂ РґРµРєРѕСЂР°С†РёРё
                border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide.none // РЈР±РёСЂР°РµРј РіСЂР°РЅРёС†Сѓ
                ), // РџСЂРёРјРµСЂ РіСЂР°РЅРёС†С‹
                contentPadding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 12.0), // РџСЂРёРјРµСЂ padding
              ),
              // style: AppTextStyles.normalMedium, // РЎС‚РёР»СЊ С‚РµРєСЃС‚Р° РІРІРѕРґР°
              // TODO: Р’РѕР·РјРѕР¶РЅРѕ, РґРѕР±Р°РІРёС‚СЊ onChanged, РµСЃР»Рё РЅСѓР¶РЅРѕ СЃСЂР°Р·Сѓ СЂРµР°РіРёСЂРѕРІР°С‚СЊ РЅР° РІРІРѕРґ
            ),

            // TODO: Р”РѕР±Р°РІРёС‚СЊ СЃРµРєС†РёСЋ "Add Photo"

            const SizedBox(height: 32), // РћС‚СЃС‚СѓРї РїРµСЂРµРґ РєРЅРѕРїРєРѕР№ СЃРѕС…СЂР°РЅРµРЅРёСЏ

            // !!! РљРЅРѕРїРєР° "Save"
            Center( // Р¦РµРЅС‚СЂРёСЂСѓРµРј РєРЅРѕРїРєСѓ
              child: CustomPrimaryButton(
                onPressed: _saveTransaction, // РџСЂРё РЅР°Р¶Р°С‚РёРё РІС‹Р·С‹РІР°РµРј С„СѓРЅРєС†РёСЋ СЃРѕС…СЂР°РЅРµРЅРёСЏ
                text: LocaleKeys.save.tr(),
              ),
            ),
            const SizedBox(height: 32), // РћС‚СЃС‚СѓРї РІРЅРёР·Сѓ

          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_list_widget.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';

import '../../../../common/widgets/custom_amount_text.dart';
import '../../../../common/widgets/custom_divider.dart';
import '../../../../core/theme/custom_colors.dart';
import '../../../../core/theme/custom_text_styles.dart';
import '../../../../generated/locale_keys.g.dart';
import '../screens/transaction_detail_screen.dart';


// !!! Р—РђР“Р›РЈРЁРљРђ: РњРѕРґРµР»СЊ РґР°РЅРЅС‹С… РґР»СЏ С‚СЂР°РЅР·Р°РєС†РёРё РІРЅСѓС‚СЂРё РїСЂРµРґСЃС‚Р°РІР»РµРЅРёСЏ СЃС‡РµС‚Р° (РѕСЃС‚Р°РµС‚СЃСЏ РїСЂРёРІР°С‚РЅРѕР№ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ)
// Р”РѕР±Р°РІРёРј id Рє С‚СЂР°РЅР·Р°РєС†РёРё Р·Р°РіР»СѓС€РєРё, С‡С‚РѕР±С‹ РјРѕР¶РЅРѕ Р±С‹Р»Рѕ РµРµ РёРґРµРЅС‚РёС„РёС†РёСЂРѕРІР°С‚СЊ РїСЂРё РїРµСЂРµС…РѕРґРµ.
class DummyAccountTransaction {
  final int id; // Р”РѕР±Р°РІР»СЏРµРј ID РґР»СЏ РёРґРµРЅС‚РёС„РёРєР°С†РёРё С‚СЂР°РЅР·Р°РєС†РёРё
  final String categoryName; // РќР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё
  final String time; // Р’СЂРµРјСЏ (РЅР°РїСЂРёРјРµСЂ, "15:02")
  final double amount; // РЎСѓРјРјР° С‚СЂР°РЅР·Р°РєС†РёРё
  // TODO: Р’РѕР·РјРѕР¶РЅРѕ, РґРѕР±Р°РІРёС‚СЊ РґСЂСѓРіРёРµ РїРѕР»СЏ, РєРѕС‚РѕСЂС‹Рµ РјРѕРіСѓС‚ РїРѕРЅР°РґРѕР±РёС‚СЊСЃСЏ РґР»СЏ РґРµС‚Р°Р»РµР№ С‚СЂР°РЅР·Р°РєС†РёРё (РЅР°РїСЂРёРјРµСЂ, accountId, date, comment)
  DummyAccountTransaction({required this.id, required this.categoryName, required this.time, required this.amount});
}

// !!! Р—РђР“Р›РЈРЁРљРђ: Р”Р°РЅРЅС‹Рµ С‚СЂР°РЅР·Р°РєС†РёР№ РґР»СЏ РґРµРјРѕРЅСЃС‚СЂР°С†РёРё РЅР° СЌС‚РѕРј СЌРєСЂР°РЅРµ (РѕСЃС‚Р°РµС‚СЃСЏ РїСЂРёРІР°С‚РЅРѕР№ РІ СЌС‚РѕРј С„Р°Р№Р»Рµ)
final Map<String, List<DummyAccountTransaction>> _currentAccountTransactions = {
  '20 april': [ // Р”Р°С‚Р° РєР°Рє РєР»СЋС‡ РіСЂСѓРїРїС‹
    DummyAccountTransaction(id: 101, categoryName: 'Category 1', time: '15:02', amount: -5000),
    DummyAccountTransaction(id: 102, categoryName: 'Category 2', time: '14:02', amount: -20),
    DummyAccountTransaction(id: 103, categoryName: 'Category 3', time: '11:41', amount: 10000), // РџСЂРёРјРµСЂ РґРѕС…РѕРґР°
  ],
  '19 april': [
    DummyAccountTransaction(id: 104, categoryName: 'Category 2', time: '14:02', amount: -20),
    DummyAccountTransaction(id: 105, categoryName: 'Category 2', time: '14:02', amount: -20),
  ],
  // TODO: Р”РѕР±Р°РІСЊС‚Рµ Р±РѕР»СЊС€Рµ Р·Р°РіР»СѓС€РµРє РґР°РЅРЅС‹С… РїРѕ РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё
};

class TransactionListWidget extends StatelessWidget {
  const TransactionListWidget({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final List<String> dates = _currentAccountTransactions.keys.toList();
    return ListView.builder(
      // РСЃРїРѕР»СЊР·СѓРµРј ListView.builder РґР»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РіСЂСѓРїРї С‚СЂР°РЅР·Р°РєС†РёР№ РїРѕ РґР°С‚Р°Рј
      itemCount: dates.length, // РљРѕР»РёС‡РµСЃС‚РІРѕ РіСЂСѓРїРї (РґР°С‚)
      itemBuilder: (context, index) {
        final date = dates[index];
        final transactions = _currentAccountTransactions[date]!; // РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє С‚СЂР°РЅР·Р°РєС†РёР№ РґР»СЏ СЌС‚РѕР№ РґР°С‚С‹ РёР· РїСЂРёРІР°С‚РЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ Р·Р°РіР»СѓС€РµРє

        // Р’С‹С‡РёСЃР»СЏРµРј РѕР±С‰СѓСЋ СЃСѓРјРјСѓ С‚СЂР°РЅР·Р°РєС†РёР№ Р·Р° РґРµРЅСЊ РґР»СЏ Р·Р°РіРѕР»РѕРІРєР° РіСЂСѓРїРїС‹ (Р—РђР“Р›РЈРЁРљРђ)
        final dailyTotal = transactions.map((tx) => tx.amount).fold(0.0, (sum, amount) => sum + amount);
        final dailyTotalString = dailyTotal.toStringAsFixed(0); // Р¤РѕСЂРјР°С‚РёСЂСѓРµРј СЃСѓРјРјСѓ
        // Р¤РѕСЂРјР°С‚ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ СЃСѓРјРјС‹ Р·Р° РґРµРЅСЊ (РЅР°РїСЂРёРјРµСЂ: +5000 С‚Рі РёР»Рё -5000 С‚Рі)
        final dailyTotalDisplay = '${dailyTotal > 0 ? '+' : ''}${dailyTotalString} в‚ё';


        return Column( // РСЃРїРѕР»СЊР·СѓРµРј Column РґР»СЏ РєР°Р¶РґРѕР№ РіСЂСѓРїРїС‹ РїРѕ РґР°С‚Рµ
          crossAxisAlignment: CrossAxisAlignment.start, // Р’С‹СЂР°РІРЅРёРІР°РЅРёРµ СЃРѕРґРµСЂР¶РёРјРѕРіРѕ РіСЂСѓРїРїС‹ РїРѕ Р»РµРІРѕРјСѓ РєСЂР°СЋ
          children: [
            // Р—Р°РіРѕР»РѕРІРѕРє РіСЂСѓРїРїС‹ РїРѕ РґР°С‚Рµ
            Padding(
              // РћС‚СЃС‚СѓРїС‹ РІРѕРєСЂСѓРі Р·Р°РіРѕР»РѕРІРєР° РґР°С‚С‹
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Text(
                // !!! Р—Р°РіРѕР»РѕРІРѕРє РґР°С‚С‹ СЃ СЃСѓРјРјРѕР№ Р·Р° РґРµРЅСЊ
                '$date ($dailyTotalDisplay)', // РќР°РїСЂРёРјРµСЂ: "20 april (+5000 С‚Рі)"
                style: CustomTextStyles.normalSmall.copyWith(fontWeight: FontWeight.bold, color: CustomColors.mainGrey), // РџСЂРёРјРµСЂ СЃС‚РёР»СЏ
              ),
            ),
            // РЎРїРёСЃРѕРє С‚СЂР°РЅР·Р°РєС†РёР№ РІРЅСѓС‚СЂРё СЌС‚РѕР№ РіСЂСѓРїРїС‹ РїРѕ РґР°С‚Рµ
            Column(
              children: transactions.map((tx) {
                // !!! РћР‘Р•Р РќРЈРўР¬ РљРђР–Р”Р«Р™ Р­Р›Р•РњР•РќРў РўР РђРќР—РђРљР¦РР Р’ InkWell Р”Р›РЇ РќРђР–РђРўРРЇ
                return InkWell(
                  onTap: () {
                    // !!! РќРђР’РР“РђР¦РРЇ РќРђ Р­РљР РђРќ Р”Р•РўРђР›Р•Р™ РўР РђРќР—РђРљР¦РР
                    print('РќР°Р¶Р°С‚Р° С‚СЂР°РЅР·Р°РєС†РёСЏ: ${tx.categoryName} ${tx.amount}');

                    // !!! РџР•Р Р•Р”РђР•Рњ РћР‘РЄР•РљРў РўР РђРќР—РђРљР¦РР (tx) РќРђРџР РЇРњРЈР® Р’ TransactionDetailScreen
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        // РџРµСЂРµРґР°РµРј РѕР±СЉРµРєС‚ tx (_DummyAccountTransaction) РІ РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ TransactionDetailScreen
                        builder: (context) => TransactionDetailScreen(transaction: tx),
                      ),
                    );
                  },
                  // !!! РўРµР»Рѕ СЌР»РµРјРµРЅС‚Р° С‚СЂР°РЅР·Р°РєС†РёРё (РІР°С€ С‚РµРєСѓС‰РёР№ Padding СЃ Row)
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                    child: Row(
                      // ... СЃРѕРґРµСЂР¶РёРјРѕРµ СЃС‚СЂРѕРєРё С‚СЂР°РЅР·Р°РєС†РёРё (РёРєРѕРЅРєР°, РєР°С‚РµРіРѕСЂРёСЏ/РІСЂРµРјСЏ, СЃСѓРјРјР°)
                      // Р—Р°РіР»СѓС€РєР° РґР»СЏ РёРєРѕРЅРєРё РєР°С‚РµРіРѕСЂРёРё (СЃРµСЂС‹Р№ РєСЂСѓР¶РѕРє)
                      children: [
                        Container(
                          width: 30,
                          height: 30,
                          decoration: const BoxDecoration(
                            shape: BoxShape.circle,
                            color: CustomColors.mainLightGrey, // РџСЂРёРјРµСЂ С†РІРµС‚Р° Р·Р°РіР»СѓС€РєРё
                          ),
                          // TODO: Р”РѕР±Р°РІРёС‚СЊ СЂРµР°Р»СЊРЅСѓСЋ РёРєРѕРЅРєСѓ РєР°С‚РµРіРѕСЂРёРё
                        ),
                        const SizedBox(width: 8),

                        // РќР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё Рё РІСЂРµРјСЏ
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                tx.categoryName.tr(),
                                style: CustomTextStyles.normalMedium,
                              ),
                              Text(
                                tx.time,
                                style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(width: 8),

                        // РЎСѓРјРјР° С‚СЂР°РЅР·Р°РєС†РёРё
                        CustomAmountText(
                          amount: tx.amount,
                          currencySymbol: 'в‚ё', // РџРµСЂРµРґР°РµРј СЃРёРјРІРѕР» РІР°Р»СЋС‚С‹
                        ),
                      ],
                    ),
                  ),
                );
              }).toList(), // РџСЂРµРѕР±СЂР°Р·СѓРµРј СЂРµР·СѓР»СЊС‚Р°С‚ map РІ List<Widget>
            ),
            const CustomDivider(),
          ],
        );
      },
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_create_screen\additional_fields_widget.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/common/widgets/custom_picker_fields/custom_secondary_picker_field.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../../../../accounts/domain/models/account.dart';
import '../../../../../common/widgets/custom_picker_fields/picker_item.dart';
import '../../../../../common/widgets/custom_show_modal_bottom_sheet.dart';
import '../../../../../generated/locale_keys.g.dart';
import '../../providers/transaction_controller.dart';

class AdditionalFieldsWidget extends ConsumerWidget {
  // РџСЂРёРЅРёРјР°РµРј СЃРїРёСЃРѕРє СЃС‡РµС‚РѕРІ
  final List<Account> accounts;

  const AdditionalFieldsWidget({super.key, required this.accounts}); // Р”РѕР±Р°РІР»СЏРµРј accounts РІ РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ

  // РСЃС…РѕРґРЅС‹Рµ РґР°РЅРЅС‹Рµ РґР»СЏ РїСЂРѕРµРєС‚РѕРІ (РѕСЃС‚Р°СЋС‚СЃСЏ Р·РґРµСЃСЊ, С‚Р°Рє РєР°Рє РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ С‚РѕР»СЊРєРѕ РІ СЌС‚РѕРј РІРёРґР¶РµС‚Рµ)
  static final Map<int, String> _projectOptions = {
    1: 'Р›РёС‡РЅС‹Рµ СЂР°СЃС…РѕРґС‹',
    5: 'РџСЂРѕРµРєС‚ \"Р РµРјРѕРЅС‚\"',
    10: 'РџСЂРѕРµРєС‚ \"РћС‚РїСѓСЃРє\"',
    12: 'Р Р°Р±РѕС‚Р°',
    15: 'РџСЂРѕРµРєС‚ \"РљСѓСЂСЃС‹\"',
    20: 'РџСЂРѕРµРєС‚ \"РџСѓС‚РµС€РµСЃС‚РІРёРµ\"',
    25: 'РџСЂРѕРµРєС‚ \"РџРѕРєСѓРїРєР°\"',
    30: 'РџСЂРѕРµРєС‚ \"РЈС‡РµР±Р°\"',
    35: 'РџСЂРѕРµРєС‚ \"РЎРїРѕСЂС‚\"',
    40: 'РџСЂРѕРµРєС‚ \"РҐРѕР±Р±Рё\"',
    50: 'РџСЂРѕРµРєС‚ \"Р—РґРѕСЂРѕРІСЊРµ\"',
    60: 'РџСЂРѕРµРєС‚ \"РљРЅРёРіРё\"',
    70: 'РџСЂРѕРµРєС‚ \"РўРµС…РЅРёРєР°\"',
    80: 'РџСЂРѕРµРєС‚ \"РђРІС‚Рѕ\"',
    90: 'РџСЂРѕРµРєС‚ \"РќРµРґРІРёР¶РёРјРѕСЃС‚СЊ\"',
    100: 'РџСЂРѕРµРєС‚ \"Р”РѕР»РіРё\"',
  };

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final transactionState = ref.watch(transactionCreateControllerProvider);
    final transactionCreateController = ref.read(transactionCreateControllerProvider.notifier);

    // --- РџРѕРґРіРѕС‚РѕРІРєР° РґР°РЅРЅС‹С… РґР»СЏ РїРёРєРµСЂРѕРІ ---

    // РџРѕРґРіРѕС‚РѕРІРєР° РґР°РЅРЅС‹С… РґР»СЏ РїРёРєРµСЂР° РЎС‡РµС‚РѕРІ РёР· РїРµСЂРµРґР°РЅРЅРѕРіРѕ СЃРїРёСЃРєР° accounts
    final List<PickerItem<int>> accountPickerItems = accounts
        .map((account) => PickerItem<int>(id: account.id, displayValue: account.name))
        .toList();
    // РС‰РµРј С‚РµРєСѓС‰РµРµ РЅР°Р·РІР°РЅРёРµ СЃС‡РµС‚Р° РІ РїРµСЂРµРґР°РЅРЅРѕРј СЃРїРёСЃРєРµ accounts
    final String currentAccountDisplay = accounts
        .firstWhere(
          (account) => account.id == transactionState.accountId,
      orElse: () => Account(id: -1, name: LocaleKeys.notSelected.tr()), // Р—Р°РјРµРЅРёС‚Рµ РЅР° РІР°С€ РєР»Р°СЃСЃ Account
    ).name;


    // РџРѕРґРіРѕС‚РѕРІРєР° РґР°РЅРЅС‹С… РґР»СЏ РїРёРєРµСЂР° РџСЂРѕРµРєС‚РѕРІ
    final List<PickerItem<int>> projectPickerItems = _projectOptions.entries
        .map((entry) => PickerItem<int>(id: entry.key, displayValue: entry.value))
        .toList();
    final String currentProjectDisplay = _projectOptions[transactionState.projectId] ?? LocaleKeys.notSelected.tr();

    // РџРѕРґРіРѕС‚РѕРІРєР° РґР°РЅРЅС‹С… РґР»СЏ РїРёРєРµСЂР° Р”Р°С‚С‹ (РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№)
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final yesterday = today.subtract(const Duration(days: 1));
    final dayBeforeYesterday = today.subtract(const Duration(days: 2));

    final List<PickerItem<DateTime>> datePickerItems = [
      PickerItem(id: today, displayValue: LocaleKeys.today.tr()),
      PickerItem(id: yesterday, displayValue: LocaleKeys.yesterday.tr()),
      PickerItem(id: dayBeforeYesterday, displayValue: LocaleKeys.theDayBeforeYesterday.tr()),
    ];

    final currentSimpleDate = DateTime(transactionState.date.year, transactionState.date.month, transactionState.date.day);
    String currentDateDisplay;
    if (currentSimpleDate == today) {
      currentDateDisplay = LocaleKeys.today.tr();
    } else if (currentSimpleDate == yesterday) {
      currentDateDisplay = LocaleKeys.yesterday.tr();
    } else if (currentSimpleDate == dayBeforeYesterday) {
      currentDateDisplay = LocaleKeys.theDayBeforeYesterday.tr();
    } else {
      currentDateDisplay = DateFormat('dd.MM.yyyy').format(transactionState.date);
    }

    // --- РџРѕСЃС‚СЂРѕРµРЅРёРµ UI ---
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Wrap(
        spacing: 8.0,
        runSpacing: 8.0,
        children: [
          // РџРѕР»Рµ РІС‹Р±РѕСЂР° РЎС‡РµС‚Р°
          CustomSecondaryPickerField(
            context: context,
            icon: Icons.account_balance_wallet, // РњРµС‚РєР° РґР»СЏ РїРѕР»СЏ "РЎС‡РµС‚"
            currentValueDisplay: currentAccountDisplay,
            width: (MediaQuery.of(context).size.width / 3) - 16,
            onTap: () async {
              final selected = await customShowModalBottomSheet<int>(
                  context: context,
                  title: LocaleKeys.selectAccount.tr(),
                  items: accountPickerItems,
                  type: 'line'
              );
              if (selected != null) {
                transactionCreateController.updateAccount(selected.id);
              }
            },
          ),

          // РџРѕР»Рµ РІС‹Р±РѕСЂР° РџСЂРѕРµРєС‚Р°
          CustomSecondaryPickerField(
            context: context,
            icon: Icons.work_outline,
            currentValueDisplay: currentProjectDisplay,
            width: (MediaQuery.of(context).size.width / 3) - 16,
            onTap: () async {
              final selected = await customShowModalBottomSheet<int>(
                  context: context,
                  title: LocaleKeys.selectProject.tr(),
                  items: projectPickerItems,
                  type: 'line'
              );
              if (selected != null) {
                transactionCreateController.updateProject(selected.id);
              }
            },
          ),

          // РџРѕР»Рµ РІС‹Р±РѕСЂР° Р”Р°С‚С‹
          CustomSecondaryPickerField(
            context: context,
            icon: Icons.date_range,
            currentValueDisplay: currentDateDisplay,
            width: (MediaQuery.of(context).size.width / 3) - 16,
            onTap: () async {
              final selectedDate = await showDatePicker(
                context: context,
                initialDate: transactionState.date,
                firstDate: DateTime(2000),
                lastDate: DateTime(2100),
              );
              if (selectedDate != null) {
                final currentTime = TimeOfDay.fromDateTime(transactionState.date);
                final newDateTime = DateTime(
                  selectedDate.year,
                  selectedDate.month,
                  selectedDate.day,
                  currentTime.hour,
                  currentTime.minute,
                );
                transactionCreateController.updateDate(newDateTime);
              }
            },
          ),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_create_screen\category_picker_widget.dart =====

import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';
import 'package:flutter_app_1/core/theme/custom_text_styles.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';
import '../../providers/transaction_controller.dart';
import '../../screens/transaction_create_screen.dart';

// 1. Р”РѕР±Р°РІР»СЏРµРј ID РІ CategoryItem
class TransactionCategoryItem {
  final int id; // ID РєР°С‚РµРіРѕСЂРёРё (РґРѕР»Р¶РµРЅ СЃРѕРІРїР°РґР°С‚СЊ СЃ ID РІ Р±Р°Р·Рµ РґР°РЅРЅС‹С…)
  final String name;
  final IconData icon;
  TransactionCategoryItem({required this.id, required this.name, required this.icon});
}

// 2. РџСЂРµРѕР±СЂР°Р·СѓРµРј РІ ConsumerWidget
class CategoryPickerWidget extends ConsumerWidget {
  // РџСЂРёРЅРёРјР°РµРј С‚РёРї С‚СЂР°РЅР·Р°РєС†РёРё
  final TransactionType transactionType;

  // Р”РѕР±Р°РІР»СЏРµРј РїСЂРёРјРµСЂРЅС‹Рµ ID Рє РєР°С‚РµРіРѕСЂРёСЏРј (Р’РђР–РќРћ: Р·Р°РјРµРЅРё РЅР° СЂРµР°Р»СЊРЅС‹Рµ ID РёР· Р±Р°Р·С‹!)
  // РўР°РєР¶Рµ СѓР±СЂР°Р» РґСѓР±Р»РёРєР°С‚С‹ РґР»СЏ СЏСЃРЅРѕСЃС‚Рё
  final List<TransactionCategoryItem> expenseTransactionCategories = [
    TransactionCategoryItem(id: 1, name: "РџРёС‚Р°РЅРёРµ РІРЅРµ РґРѕРјР°", icon: Icons.wine_bar),
    TransactionCategoryItem(id: 2, name: "РџСЂРѕРґСѓРєС‚С‹", icon: Icons.shopping_bag),
    TransactionCategoryItem(id: 3, name: "РћРґРµР¶РґР°", icon: Icons.checkroom),
    TransactionCategoryItem(id: 4, name: "Р РµРјРѕРЅС‚", icon: Icons.format_paint),
    TransactionCategoryItem(id: 5, name: "Р Р°Р·РІР»РµС‡РµРЅРёСЏ", icon: Icons.headset),
    TransactionCategoryItem(id: 6, name: "РЎРїРѕСЂС‚", icon: Icons.fitness_center),
    TransactionCategoryItem(id: 7, name: "РђРІС‚Рѕ", icon: Icons.directions_car),
    TransactionCategoryItem(id: 8, name: "РљРѕРјРјСѓРЅР°Р»РєР°", icon: Icons.water_drop),
    TransactionCategoryItem(id: 9, name: "Р”РµС‚Рё", icon: Icons.baby_changing_station),
    TransactionCategoryItem(id: 10, name: "РЎРµРјСЊСЏ", icon: Icons.home),
    TransactionCategoryItem(id: 11, name: "Р Р°Р·РЅРѕРµ", icon: Icons.movie),
    TransactionCategoryItem(id: 12, name: "Р‘РёР·РЅРµСЃ", icon: Icons.business),
    TransactionCategoryItem(id: 13, name: "Р‘Р»Р°РіРѕС‚РІРѕСЂРёС‚РµР»СЊРЅРѕСЃС‚СЊ", icon: Icons.volunteer_activism),
    TransactionCategoryItem(id: 14, name: "Р–РµРЅР°", icon: Icons.woman), // :)
    TransactionCategoryItem(id: 15, name: "РџРѕРґР°СЂРєРё", icon: Icons.card_giftcard),
    TransactionCategoryItem(id: 16, name: "Р Р°Р±РѕС‚Р°", icon: Icons.laptop),
    TransactionCategoryItem(id: 17, name: "РџСѓС‚РµС€РµСЃС‚РІРёСЏ", icon: Icons.flight),
    TransactionCategoryItem(id: 18, name: "Р—РґРѕСЂРѕРІСЊРµ", icon: Icons.local_hospital),
    TransactionCategoryItem(id: 19, name: "РћР±СЂР°Р·РѕРІР°РЅРёРµ", icon: Icons.school),
    TransactionCategoryItem(id: 20, name: "РљСѓР»СЊС‚СѓСЂР°", icon: Icons.theater_comedy),
    // Р”РѕР±Р°РІСЊ Р±РѕР»СЊС€Рµ РєР°С‚РµРіРѕСЂРёР№ РїРѕ РјРµСЂРµ РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё
  ];
  final List<TransactionCategoryItem> incomeTransactionCategories = [TransactionCategoryItem(id: 21, name: "Р—Р°СЂРїР»Р°С‚Р°", icon: Icons.work),
    TransactionCategoryItem(id: 22, name: "РђСЂРµРЅРґР°", icon: Icons.home),
    TransactionCategoryItem(id: 23, name: "Р”РёРІРёРґРµРЅРґС‹", icon: Icons.account_balance),
    TransactionCategoryItem(id: 24, name: "РџСЂРѕС‡РµРµ", icon: Icons.account_balance_wallet),
  ];

  CategoryPickerWidget({super.key, required this.transactionType}); // Р”РѕР±Р°РІР»СЏРµРј РєРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ СЃ С‚РёРїРѕРј С‚СЂР°РЅР·Р°РєС†РёРё

  @override
  // Р”РѕР±Р°РІР»СЏРµРј WidgetRef ref
  Widget build(BuildContext context, WidgetRef ref) {
    // Р’С‹Р±РёСЂР°РµРј СЃРїРёСЃРѕРє РєР°С‚РµРіРѕСЂРёР№ РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ С‚РёРїР° С‚СЂР°РЅР·Р°РєС†РёРё
    final List<TransactionCategoryItem> categoriesToShow =
    transactionType == TransactionType.expense
        ? expenseTransactionCategories
        : incomeTransactionCategories; // Р•СЃР»Рё РЅРµ СЂР°СЃС…РѕРґ, Р·РЅР°С‡РёС‚ РґРѕС…РѕРґ (РґР»СЏ СЌС‚РѕРіРѕ РІРёРґР¶РµС‚Р°)

    int itemsPerPage = 16; // 4 СЂСЏРґР° РїРѕ 4 РёРєРѕРЅРєРё (РѕСЃС‚Р°РІР»СЏРµРј 16, РєР°Рє РјС‹ РЅР°СЃС‚СЂРѕРёР»Рё СЂР°РЅРµРµ)
    int pageCount = (categoriesToShow.length / itemsPerPage).ceil();
    final PageController pageController = PageController();

    return Column(
      children: [
        SizedBox(
          height: 300, // РЈРјРµРЅСЊС€РёР» РІС‹СЃРѕС‚Сѓ, С‡С‚РѕР±С‹ СѓРјРµС‰Р°Р»РѕСЃСЊ 3 СЂСЏРґР°
          child: PageView.builder(
            controller: pageController,
            itemCount: pageCount,
            itemBuilder: (context, pageIndex) {
              int start = pageIndex * itemsPerPage;
              int end = (start + itemsPerPage).clamp(0, categoriesToShow.length);
              List<TransactionCategoryItem> pageCategories = categoriesToShow.sublist(start, end);

              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 4.0, vertical: 0),
                child: GridView.count(
                  physics: const NeverScrollableScrollPhysics(),
                  crossAxisCount: 4, // 4 РєРѕР»РѕРЅРєРё
                  childAspectRatio: 1, // РЎРѕРѕС‚РЅРѕС€РµРЅРёРµ СЃС‚РѕСЂРѕРЅ РґР»СЏ РїР»РёС‚РєРё
                  mainAxisSpacing: 4, // Р’РµСЂС‚РёРєР°Р»СЊРЅС‹Р№ РѕС‚СЃС‚СѓРї
                  crossAxisSpacing: 4, // Р“РѕСЂРёР·РѕРЅС‚Р°Р»СЊРЅС‹Р№ РѕС‚СЃС‚СѓРї
                  children: pageCategories.map((transactionCategory) {
                    // 4. РЎРѕР·РґР°РµРј CategoryTile СЃ РѕР±СЂР°Р±РѕС‚С‡РёРєРѕРј РЅР°Р¶Р°С‚РёСЏ
                    return TransactionCategoryTile(
                      transactionCategory: transactionCategory,
                      onTap: () {
                        // РџРѕР»СѓС‡Р°РµРј notifier РєРѕРЅС‚СЂРѕР»Р»РµСЂР°
                        final controller = ref.read(transactionCreateControllerProvider.notifier);
                        // Р’С‹Р·С‹РІР°РµРј РјРµС‚РѕРґ РѕР±РЅРѕРІР»РµРЅРёСЏ РєР°С‚РµРіРѕСЂРёРё
                        controller.updateTransactionCategory(transactionCategory.id);
                        // РџСЂРё РІС‹Р±РѕСЂРµ РєР°С‚РµРіРѕСЂРёРё, РІРѕР·РјРѕР¶РЅРѕ, РЅСѓР¶РЅРѕ Р·Р°РєСЂС‹С‚СЊ РєР»Р°РІРёР°С‚СѓСЂСѓ РёР»Рё СЃРґРµР»Р°С‚СЊ С‡С‚Рѕ-С‚Рѕ РµС‰Рµ
                        // Navigator.of(context).pop(); // РР»Рё РґСЂСѓРіРѕРµ РґРµР№СЃС‚РІРёРµ
                        debugPrint('Category tapped: ${transactionCategory.name} (ID: ${transactionCategory.id})');
                      },
                    );
                  }).toList(),
                ),
              );
            },
          ),
        ),
        if (pageCount > 1) ...[ // РџРѕРєР°Р·С‹РІР°РµРј РёРЅРґРёРєР°С‚РѕСЂ, С‚РѕР»СЊРєРѕ РµСЃР»Рё СЃС‚СЂР°РЅРёС† Р±РѕР»СЊС€Рµ РѕРґРЅРѕР№
          const SizedBox(height: 6),
          SmoothPageIndicator(
            controller: pageController,
            count: pageCount,
            effect: const ExpandingDotsEffect(
              dotHeight: 6,
              dotWidth: 6,
              activeDotColor: CustomColors.primary, // РСЃРїРѕР»СЊР·СѓР№ СЃРІРѕР№ РѕСЃРЅРѕРІРЅРѕР№ С†РІРµС‚
              dotColor: CustomColors.mainLightGrey,
            ),
          ),
          const SizedBox(height: 6),
        ] else ... [
          const SizedBox(height: 20) // Р”РѕР±Р°РІР»СЏРµРј РѕС‚СЃС‚СѓРї СЃРЅРёР·Сѓ, РµСЃР»Рё РёРЅРґРёРєР°С‚РѕСЂР° РЅРµС‚
        ]
      ],
    );
  }
}


// TransactionCategoryTile РѕСЃС‚Р°РµС‚СЃСЏ Р±РµР· РёР·РјРµРЅРµРЅРёР№ РІ СЌС‚РѕР№ Р·Р°РґР°С‡Рµ
class TransactionCategoryTile extends StatelessWidget {
  final TransactionCategoryItem transactionCategory;
  final VoidCallback onTap;

  const TransactionCategoryTile({
    super.key,
    required this.transactionCategory,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
      child: Container(
        padding: const EdgeInsets.all(4.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(transactionCategory.icon, size: 36, color: CustomColors.primary),
            const SizedBox(height: 6),
            Text(
              transactionCategory.name,
              textAlign: TextAlign.center,
              style: CustomTextStyles.normalSmall,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_create_screen\numeric_keypad_widget.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';
import 'package:flutter_app_1/core/theme/custom_text_styles.dart'; // РЈР±РµРґРёСЃСЊ, С‡С‚Рѕ СЌС‚РѕС‚ РёРјРїРѕСЂС‚ РїСЂР°РІРёР»СЊРЅС‹Р№
import 'package:flutter_app_1/features/transactions/presentation/providers/transaction_controller.dart'; // РЈР±РµРґРёСЃСЊ, С‡С‚Рѕ СЌС‚РѕС‚ РёРјРїРѕСЂС‚ РїСЂР°РІРёР»СЊРЅС‹Р№
import 'package:flutter_app_1/generated/locale_keys.g.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:vibration/vibration.dart';

class NumericKeypadWidget extends ConsumerWidget {
  const NumericKeypadWidget({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // РћРїСЂРµРґРµР»СЏРµРј РєР»Р°РІРёС€Рё РґР»СЏ РЅР°С€РµР№ РєР»Р°РІРёР°С‚СѓСЂС‹
    final keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '0', 'comment_icon'];

    // РСЃРїРѕР»СЊР·СѓРµРј GridView РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ РєР»Р°РІРёС€ СЃРµС‚РєРѕР№
    return Expanded(
      child: Column(
        children: [
          const Spacer(),
          GridView.builder(
            shrinkWrap: true, // Р—Р°РїСЂРµС‰Р°РµРј GridView Р·Р°РЅРёРјР°С‚СЊ Р±РµСЃРєРѕРЅРµС‡РЅРѕРµ РїСЂРѕСЃС‚СЂР°РЅСЃС‚РІРѕ
            physics: const NeverScrollableScrollPhysics(), // РћС‚РєР»СЋС‡Р°РµРј РїСЂРѕРєСЂСѓС‚РєСѓ РґР»СЏ GridView
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 3, // 3 РєРѕР»РѕРЅРєРё РІ СЃРµС‚РєРµ
              childAspectRatio: 2.5, // РЎРѕРѕС‚РЅРѕС€РµРЅРёРµ СЃС‚РѕСЂРѕРЅ РєРЅРѕРїРѕРє
            ),
            itemCount: keys.length, // РљРѕР»РёС‡РµСЃС‚РІРѕ СЌР»РµРјРµРЅС‚РѕРІ РІ СЃРµС‚РєРµ СЂР°РІРЅРѕ РєРѕР»РёС‡РµСЃС‚РІСѓ РєР»Р°РІРёС€
            itemBuilder: (context, index) {
              final key = keys[index]; // РџРѕР»СѓС‡Р°РµРј СЃРёРјРІРѕР» С‚РµРєСѓС‰РµР№ РєР»Р°РІРёС€Рё

              // Р•СЃР»Рё РєР»Р°РІРёС€Р° - РёРєРѕРЅРєР° РєРѕРјРјРµРЅС‚Р°СЂРёСЏ
              if (key == 'comment_icon') {
                return ElevatedButton.icon(
                  onPressed: () async {
                    // Р’РёР±СЂР°С†РёСЏ РїСЂРё РЅР°Р¶Р°С‚РёРё, РµСЃР»Рё РїРѕРґРґРµСЂР¶РёРІР°РµС‚СЃСЏ
                    if (await Vibration.hasVibrator() ?? false) {
                      Vibration.vibrate(duration: 30);
                    }
                    // TODO: Р”РѕР±Р°РІРёС‚СЊ Р»РѕРіРёРєСѓ РѕР±СЂР°Р±РѕС‚РєРё РЅР°Р¶Р°С‚РёСЏ РЅР° РёРєРѕРЅРєСѓ РєРѕРјРјРµРЅС‚Р°СЂРёСЏ
                    print("Comment button pressed"); // РџСЂРёРјРµСЂ: РІС‹РІРѕРґРёРј СЃРѕРѕР±С‰РµРЅРёРµ РІ РєРѕРЅСЃРѕР»СЊ
                  },
                  icon: const Icon(Icons.comment), // РРєРѕРЅРєР° РєРѕРјРјРµРЅС‚Р°СЂРёСЏ
                  label: const Text(''), // РўРµРєСЃС‚ РєРЅРѕРїРєРё РїСѓСЃС‚РѕР№
                  style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.zero), // РЈР±РёСЂР°РµРј СЃРєСЂСѓРіР»РµРЅРёРµ СѓРіР»РѕРІ
                    backgroundColor: CustomColors.mainLightGrey, // Р¦РІРµС‚ РєРЅРѕРїРєРё
                  ),
                );
              } else { // Р•СЃР»Рё РєР»Р°РІРёС€Р° - С†РёС„СЂР° РёР»Рё Р·Р°РїСЏС‚Р°СЏ
                return ElevatedButton(
                  onPressed: () async {
                    // Р’РёР±СЂР°С†РёСЏ РїСЂРё РЅР°Р¶Р°С‚РёРё, РµСЃР»Рё РїРѕРґРґРµСЂР¶РёРІР°РµС‚СЃСЏ
                    if (await Vibration.hasVibrator() ?? false) {
                      Vibration.vibrate(duration: 30);
                    }
                    // РџРѕР»СѓС‡Р°РµРј РґРѕСЃС‚СѓРї Рє РєРѕРЅС‚СЂРѕР»Р»РµСЂСѓ С‚СЂР°РЅР·Р°РєС†РёР№
                    final controller = ref.read(transactionCreateControllerProvider.notifier);
                    String raw = controller.rawAmount; // РџРѕР»СѓС‡Р°РµРј С‚РµРєСѓС‰РµРµ РІРІРµРґРµРЅРЅРѕРµ Р·РЅР°С‡РµРЅРёРµ
                    String newRaw = raw;

                    if (key == ',') { // Р•СЃР»Рё РЅР°Р¶Р°С‚Р° Р·Р°РїСЏС‚Р°СЏ
                      // Р—Р°РїСЂРµС‰Р°РµРј РґРѕР±Р°РІР»СЏС‚СЊ РІС‚РѕСЂСѓСЋ Р·Р°РїСЏС‚СѓСЋ
                      if (raw.contains(',')) return;
                      // Р•СЃР»Рё СЃС‚СЂРѕРєР° РїСѓСЃС‚Р°СЏ, РЅР°С‡РёРЅР°РµРј СЃ "0,", РёРЅР°С‡Рµ РґРѕР±Р°РІР»СЏРµРј Р·Р°РїСЏС‚СѓСЋ РІ РєРѕРЅРµС†
                      newRaw = raw.isEmpty ? '0,' : '$raw,';
                    } else { // Р•СЃР»Рё РЅР°Р¶Р°С‚Р° С†РёС„СЂР°
                      newRaw += key;
                      // ---- РќР°С‡Р°Р»Рѕ РґРѕР±Р°РІР»РµРЅРЅРѕР№ Р»РѕРіРёРєРё РѕРіСЂР°РЅРёС‡РµРЅРёСЏ С†РµР»РѕР№ С‡Р°СЃС‚Рё ----
                      final integerPart = newRaw.split(',')[0];
                      if (integerPart.length > 12) {
                        return; // РџСЂРµРєСЂР°С‰Р°РµРј РІС‹РїРѕР»РЅРµРЅРёРµ РѕР±СЂР°Р±РѕС‚С‡РёРєР°, РµСЃР»Рё С†РµР»Р°СЏ С‡Р°СЃС‚СЊ СЃР»РёС€РєРѕРј РґР»РёРЅРЅР°СЏ
                      }
                      // ---- РљРѕРЅРµС† РґРѕР±Р°РІР»РµРЅРЅРѕР№ Р»РѕРіРёРєРё РѕРіСЂР°РЅРёС‡РµРЅРёСЏ С†РµР»РѕР№ С‡Р°СЃС‚Рё ----

                      // ---- РќР°С‡Р°Р»Рѕ РґРѕР±Р°РІР»РµРЅРЅРѕР№ Р»РѕРіРёРєРё РѕРіСЂР°РЅРёС‡РµРЅРёСЏ РґСЂРѕР±РЅРѕР№ С‡Р°СЃС‚Рё ----
                      if (newRaw.contains(',')) {
                        final commaIndex = newRaw.indexOf(',');
                        final decimalDigits = newRaw.substring(commaIndex + 1);
                        if (decimalDigits.length > 2) {
                          return; // РџСЂРµРєСЂР°С‰Р°РµРј РІС‹РїРѕР»РЅРµРЅРёРµ РѕР±СЂР°Р±РѕС‚С‡РёРєР°, РµСЃР»Рё РґСЂРѕР±РЅР°СЏ С‡Р°СЃС‚СЊ СЃР»РёС€РєРѕРј РґР»РёРЅРЅР°СЏ
                        }
                      }
                      // ---- РљРѕРЅРµС† РґРѕР±Р°РІР»РµРЅРЅРѕР№ Р»РѕРіРёРєРё РѕРіСЂР°РЅРёС‡РµРЅРёСЏ РґСЂРѕР±РЅРѕР№ С‡Р°СЃС‚Рё ----
                    }
                    // РћР±РЅРѕРІР»СЏРµРј Р·РЅР°С‡РµРЅРёРµ РІ РєРѕРЅС‚СЂРѕР»Р»РµСЂРµ
                    controller.updateRawAmount(newRaw);
                  }, // РЈР±РµРґРёСЃСЊ, С‡С‚Рѕ СЃС‚РёР»СЊ С‚РµРєСЃС‚Р° РѕРїСЂРµРґРµР»РµРЅ
                  style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.zero), // РЈР±РёСЂР°РµРј СЃРєСЂСѓРіР»РµРЅРёРµ СѓРіР»РѕРІ
                    backgroundColor: CustomColors.mainLightGrey, // Р¦РІРµС‚ РєРЅРѕРїРєРё
                  ),
                  // РћС‚РѕР±СЂР°Р¶Р°РµРј СЃРёРјРІРѕР» РєР»Р°РІРёС€Рё РЅР° РєРЅРѕРїРєРµ
                  child: Text(key == ',' ? ',' : key, style: CustomTextStyles.normalLarge),
                );
              }
            },
          ),
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_create_screen\sum_view_widget.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_app_1/core/theme/custom_text_styles.dart';
import 'package:flutter_app_1/features/transactions/presentation/providers/transaction_controller.dart';

// final selectedCurrencyProvider = StateProvider((ref) => 'в‚ё РўРµРЅРіРµ (KZT)');
final selectedCurrencySymbol = 'в‚ё';
// TODO: РґРѕР±Р°РІРёС‚СЊ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРёР№ РІС‹Р±РѕСЂ РІР°Р»СЋС‚С‹ РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ СЃС‡РµС‚Р°. РџСЂРё СЌС‚РѕРј РІР°Р»СЋС‚Р° РґР»СЏ РЅР°Р»РёС‡РЅС‹С…, РЅР°РїСЂРёРјРµСЂ "РќР°Р»РёС‡РЅС‹Рµ USD", РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё СЃРѕР·РґР°РЅР° РЅР° РѕСЃРЅРѕРІРµ РЅР°СЃС‚СЂРѕРµРє. Р”Р»СЏ СЌС‚РѕРіРѕ РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ СЃРѕР·РґР°С‚СЊ РѕС‚РґРµР»СЊРЅС‹Р№ РїСЂРѕРІР°Р№РґРµСЂ, РєРѕС‚РѕСЂС‹Р№ Р±СѓРґРµС‚ РІРѕР·РІСЂР°С‰Р°С‚СЊ РІР°Р»СЋС‚Сѓ РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ РІС‹Р±СЂР°РЅРЅРѕРіРѕ СЃС‡РµС‚Р°. РўР°РєР¶Рµ РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РґРѕР±Р°РІРёС‚СЊ Р»РѕРіРёРєСѓ РІ РєРѕРЅС‚СЂРѕР»Р»РµСЂ С‚СЂР°РЅР·Р°РєС†РёР№, С‡С‚РѕР±С‹ РѕРЅ РјРѕРі РѕР±СЂР°Р±Р°С‚С‹РІР°С‚СЊ СЂР°Р·РЅС‹Рµ РІР°Р»СЋС‚С‹.

class SumViewWidget extends ConsumerWidget {
  const SumViewWidget({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final transaction = ref.watch(transactionCreateControllerProvider);
    final raw = ref.read(transactionCreateControllerProvider.notifier).rawAmount;
    final formatted = _formatCurrency(context, raw);
    // final selectedCurrency = ref.watch(selectedCurrencyProvider);
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        const Expanded(flex: 1, child: SizedBox()),
        Expanded(
          flex: 2,
          child: Center(
            child: Text(formatted, style: CustomTextStyles.normalLarge),
          ),
        ),
        Expanded(
          flex: 1,
          child: IconButton(
            onPressed: () {
              ref.read(transactionCreateControllerProvider.notifier).deleteLastDigit();
            },
            icon: const Icon(Icons.backspace),
          ),
        ),
      ],
    );
  }

  String _formatCurrency(BuildContext context, String raw) {
    if (raw.isEmpty) return '0 $selectedCurrencySymbol';
    final clean = raw.replaceAll(',', '.');
    final value = double.tryParse(clean) ?? 0.0;

    final formatter = NumberFormat.currency(
      locale: context.locale.languageCode == 'ru' ? 'ru_RU' : 'en_US',
      symbol: selectedCurrencySymbol,
      decimalDigits: raw.contains(',') ? 2 : 0,
    );
    return formatter.format(value);
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_create_screen\transaction_type_selector_widget.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';
import 'package:flutter_app_1/core/theme/custom_text_styles.dart';
import 'package:flutter_app_1/generated/locale_keys.g.dart';
import '../../screens/transaction_create_screen.dart';

class TransactionTypeSelectorWidget extends StatelessWidget {
  final TransactionType selectedSegment;
  final ValueChanged<TransactionType> onValueChanged;

  const TransactionTypeSelectorWidget({
    super.key,
    required this.selectedSegment,
    required this.onValueChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(10.0),
      child: CupertinoSlidingSegmentedControl<TransactionType>(
        backgroundColor: CustomColors.mainLightGrey,
        thumbColor: CustomColors.mainWhite,
        groupValue: selectedSegment,
        onValueChanged: (TransactionType? value) {
          if (value != null) {
            onValueChanged(value);
          }
        },
        children: <TransactionType, Widget>{
          TransactionType.expense: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Text(LocaleKeys.expense.tr(), style: CustomTextStyles.normalMedium),
          ),
          TransactionType.income: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Text(LocaleKeys.income.tr(), style: CustomTextStyles.normalMedium),
          ),
          TransactionType.transfer: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Text(LocaleKeys.transfer.tr(), style: CustomTextStyles.normalMedium),
          ),
        },
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\presentation\widgets\transaction_create_screen\transfer_accounts_selector_widget.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_app_1/core/theme/custom_colors.dart';
import 'package:flutter_app_1/core/theme/custom_text_styles.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../accounts/domain/models/account.dart';
import '../../../../../common/widgets/custom_picker_fields/picker_item.dart'; // РРјРїРѕСЂС‚РёСЂСѓРµРј PickerItem
import '../../../../../common/widgets/custom_show_modal_bottom_sheet.dart'; // РРјРїРѕСЂС‚РёСЂСѓРµРј showItemPickerBottomSheet
import '../../../../../generated/locale_keys.g.dart';
import '../../providers/transaction_controller.dart'; // РРјРїРѕСЂС‚РёСЂСѓРµРј РєРѕРЅС‚СЂРѕР»Р»РµСЂ С‚СЂР°РЅР·Р°РєС†РёР№

// РџСЂРµРґРїРѕР»Р°РіР°РµРјР°СЏ РјРѕРґРµР»СЊ СЃС‡РµС‚Р°. Р—Р°РјРµРЅРёС‚Рµ РЅР° РІР°С€Сѓ СЂРµР°Р»СЊРЅСѓСЋ РјРѕРґРµР»СЊ!
// class Account {
//   final int id;
//   final String name;
//   Account({required this.id, required this.name});
// }


class TransferAccountsSelectorWidget extends ConsumerWidget {
  // РџСЂРёРЅРёРјР°РµРј СЃРїРёСЃРѕРє СЃС‡РµС‚РѕРІ Рё С„СѓРЅРєС†РёСЋ РґР»СЏ РїРѕРєР°Р·Р° bottom sheet'Р°
  final List<Account> accounts;
  // final Future<PickerItem<int>?> Function({ // РџСЂРёРјРµСЂ, РµСЃР»Рё РїРµСЂРµРґР°РІР°С‚СЊ С„СѓРЅРєС†РёСЋ
  //   required BuildContext context,
  //   required String title,
  //   required List<PickerItem<int>> items,
  // }) showItemPicker;


  const TransferAccountsSelectorWidget({
    super.key,
    required this.accounts,
    // required this.showItemPicker,
  });

  // РҐРµР»РїРµСЂ РґР»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ РїРѕР»СЏ РІС‹Р±РѕСЂР° СЃС‡РµС‚Р°
  Widget _buildAccountField({
    required BuildContext context,
    required WidgetRef ref,
    required String label,
    required int? currentAccountId,
    required List<Account> availableAccounts, // РЎС‡РµС‚Р° РґР»СЏ РІС‹Р±РѕСЂР°
    required Function(int) onAccountSelected, // РћР±СЂР°Р±РѕС‚С‡РёРє РІС‹Р±РѕСЂР° СЃС‡РµС‚Р°
  }) {
    // РС‰РµРј С‚РµРєСѓС‰РµРµ РЅР°Р·РІР°РЅРёРµ СЃС‡РµС‚Р° РїРѕ ID
    final String currentAccountName =
        availableAccounts.firstWhere(
              (account) => account.id == currentAccountId,
          orElse: () => Account(id: -1, name: LocaleKeys.selectAccount.tr()), // Р—Р°РјРµРЅРёС‚Рµ РЅР° РІР°С€ РєР»Р°СЃСЃ Account
        ).name;


    return InkWell(
      onTap: () async {
        // РџСЂРµРѕР±СЂР°Р·СѓРµРј СЃРїРёСЃРѕРє СЃС‡РµС‚РѕРІ РІ PickerItem РґР»СЏ bottom sheet'Р°
        final List<PickerItem<int>> pickerItems = availableAccounts
            .map((account) => PickerItem<int>(id: account.id, displayValue: account.name))
            .toList();

        final selected = await customShowModalBottomSheet<int>(
          context: context,
          title: label, // РСЃРїРѕР»СЊР·СѓРµРј РјРµС‚РєСѓ РїРѕР»СЏ РєР°Рє Р·Р°РіРѕР»РѕРІРѕРє bottom sheet'Р°
          items: pickerItems,
          type: 'line',
        );

        if (selected != null) {
          onAccountSelected(selected.id); // Р’С‹Р·С‹РІР°РµРј РїРµСЂРµРґР°РЅРЅС‹Р№ РєРѕР»Р±СЌРє СЃ ID РІС‹Р±СЂР°РЅРЅРѕРіРѕ СЃС‡РµС‚Р°
        }
      },
      child: Container(
        constraints: const BoxConstraints(minHeight: 48),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: CustomColors.mainLightGrey,
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              label, // РњРµС‚РєР° РїРѕР»СЏ ("РЎ РєР°РєРѕРіРѕ СЃС‡РµС‚Р°", "РќР° РєР°РєРѕР№ СЃС‡РµС‚")
              style: CustomTextStyles.normalSmall.copyWith(color: CustomColors.mainGrey), // РњРµС‚РєР° С‡СѓС‚СЊ РјРµРЅСЊС€Рµ Рё СЃРµСЂРµРµ
            ),
            const SizedBox(height: 2),
            Text(
              currentAccountName, // РћС‚РѕР±СЂР°Р¶Р°РµРј РІС‹Р±СЂР°РЅРЅРѕРµ РЅР°Р·РІР°РЅРёРµ СЃС‡РµС‚Р°
              style: CustomTextStyles.normalMedium,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }


  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // РџРѕР»СѓС‡Р°РµРј С‚РµРєСѓС‰РµРµ СЃРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° С‚СЂР°РЅР·Р°РєС†РёР№
    final transactionState = ref.watch(transactionCreateControllerProvider);
    // РџРѕР»СѓС‡Р°РµРј notifier РєРѕРЅС‚СЂРѕР»Р»РµСЂР° РґР»СЏ РІС‹Р·РѕРІР° РјРµС‚РѕРґРѕРІ РѕР±РЅРѕРІР»РµРЅРёСЏ
    final transactionCreateController = ref.read(transactionCreateControllerProvider.notifier);

    // РџРѕР»СѓС‡Р°РµРј РІС‹Р±СЂР°РЅРЅС‹Рµ СЃС‡РµС‚Р° РґР»СЏ "РѕС‚РєСѓРґР°" Рё "РєСѓРґР°" РёР· СЃРѕСЃС‚РѕСЏРЅРёСЏ РєРѕРЅС‚СЂРѕР»Р»РµСЂР°
    final int? fromAccountId = transactionState.fromAccountId; // Р’Р°Рј РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РґРѕР±Р°РІРёС‚СЊ СЌС‚Рё РїРѕР»СЏ РІ СЃРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР°
    final int? toAccountId = transactionState.toAccountId; // Р’Р°Рј РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РґРѕР±Р°РІРёС‚СЊ СЌС‚Рё РїРѕР»СЏ РІ СЃРѕСЃС‚РѕСЏРЅРёРµ РєРѕРЅС‚СЂРѕР»Р»РµСЂР°

    // TODO: Р’ Р‘РЈР”РЈР©Р•Рњ - СЂРµР°Р»РёР·РѕРІР°С‚СЊ Р»РѕРіРёРєСѓ СѓСЃС‚Р°РЅРѕРІРєРё СЃС‡РµС‚Р° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РґР»СЏ fromAccountId
    // РќР°РїСЂРёРјРµСЂ, РїСЂРё РёРЅРёС†РёР°Р»РёР·Р°С†РёРё TransferTransactionsState РјРѕР¶РЅРѕ СѓСЃС‚Р°РЅРѕРІРёС‚СЊ fromAccountId = ID СЃС‡РµС‚Р° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0), // Р”РѕР±Р°РІР»СЏРµРј РіРѕСЂРёР·РѕРЅС‚Р°Р»СЊРЅС‹Р№ РѕС‚СЃС‚СѓРї
      child: Column( // РСЃРїРѕР»СЊР·СѓРµРј Column РґР»СЏ РІРµСЂС‚РёРєР°Р»СЊРЅРѕРіРѕ СЂР°СЃРїРѕР»РѕР¶РµРЅРёСЏ РїРѕР»РµР№
        children: [
          // РџРѕР»Рµ "РЎ РєР°РєРѕРіРѕ СЃС‡РµС‚Р°"
          _buildAccountField(
            context: context,
            ref: ref,
            label: LocaleKeys.fromAccount.tr(),
            currentAccountId: fromAccountId,
            availableAccounts: accounts, // РџРµСЂРµРґР°РµРј СЃРїРёСЃРѕРє СЃС‡РµС‚РѕРІ
            onAccountSelected: (accountId) {
              // Р’С‹Р·С‹РІР°РµРј РјРµС‚РѕРґ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃС‡РµС‚Р° "РѕС‚РєСѓРґР°"
              transactionCreateController.updateFromAccount(accountId); // Р’Р°Рј РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РґРѕР±Р°РІРёС‚СЊ СЌС‚РѕС‚ РјРµС‚РѕРґ РІ РєРѕРЅС‚СЂРѕР»Р»РµСЂ
            },
          ),
          const SizedBox(height: 16), // РћС‚СЃС‚СѓРї РјРµР¶РґСѓ РїРѕР»СЏРјРё
          // РРєРѕРЅРєР° РёР»Рё С‚РµРєСЃС‚ "->"
          const Icon(Icons.arrow_downward), // РР»Рё Icons.arrow_forward РµСЃР»Рё UI РіРѕСЂРёР·РѕРЅС‚Р°Р»СЊРЅС‹Р№
          const SizedBox(height: 16),
          // РџРѕР»Рµ "РќР° РєР°РєРѕР№ СЃС‡РµС‚"
          _buildAccountField(
            context: context,
            ref: ref,
            label: LocaleKeys.toAccount.tr(),
            currentAccountId: toAccountId,
            availableAccounts: accounts, // РџРµСЂРµРґР°РµРј СЃРїРёСЃРѕРє СЃС‡РµС‚РѕРІ
            onAccountSelected: (accountId) {
              // Р’С‹Р·С‹РІР°РµРј РјРµС‚РѕРґ РєРѕРЅС‚СЂРѕР»Р»РµСЂР° РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃС‡РµС‚Р° "РєСѓРґР°"
              transactionCreateController.updateToAccount(accountId); // Р’Р°Рј РЅСѓР¶РЅРѕ Р±СѓРґРµС‚ РґРѕР±Р°РІРёС‚СЊ СЌС‚РѕС‚ РјРµС‚РѕРґ РІ РєРѕРЅС‚СЂРѕР»Р»РµСЂ
            },
          ),
          const SizedBox(height: 100),
          // TODO: Р’ Р‘РЈР”РЈР©Р•Рњ - РґРѕР±Р°РІРёС‚СЊ РІР°Р»РёРґР°С†РёСЋ, С‡С‚РѕР±С‹ СЃС‡РµС‚Р° From Рё To РЅРµ СЃРѕРІРїР°РґР°Р»Рё
        ],
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transactions\utils\transaction_mapper.dart =====

import 'package:flutter/material.dart'; // Р”Р»СЏ debugPrint
import 'package:drift/drift.dart';
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚Рё Рє СЌС‚РёРј С„Р°Р№Р»Р°Рј РїСЂР°РІРёР»СЊРЅС‹Рµ РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ TransactionMapper
import 'package:flutter_app_1/core/db/app_database.dart'; // Р”Р»СЏ TransactionsTableData Рё TransactionsTableCompanion
import 'package:flutter_app_1/features/transactions/domain/models/transaction_dto.dart'; // РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РІ СЌС‚РѕРј DTO РµСЃС‚СЊ РїРѕР»СЏ fromAccountId Рё toAccountId С‚РёРїР° int? Рё transactionType С‚РёРїР° String
import '../domain/models/transaction_entity.dart'; // РџСѓС‚СЊ Рє РІР°С€РµР№ РћР‘РќРћР’Р›Р•РќРќРћР™ TransactionEntity
// РЈР±РµРґРёС‚РµСЃСЊ, С‡С‚Рѕ РїСѓС‚СЊ Рє TransactionType РїСЂР°РІРёР»СЊРЅС‹Р№
import '../presentation/screens/transaction_create_screen.dart'; // РџСѓС‚СЊ Рє РІР°С€РµРјСѓ enum TransactionType


class TransactionMapper {

  // Helper to convert enum to string (matching the enum value name)
  static String _enumToString(TransactionType type) {
    // РњС‹ Р±РµСЂРµРј С‡Р°СЃС‚СЊ РїРѕСЃР»Рµ С‚РѕС‡РєРё, РєРѕС‚РѕСЂР°СЏ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓРµС‚ РёРјРµРЅРё Р·РЅР°С‡РµРЅРёСЏ enum
    return type.toString().split('.').last; // РќР°РїСЂРёРјРµСЂ: 'expense', 'income', 'transfer'
  }

  // Helper to convert string to enum
  static TransactionType _stringToEnum(String typeString) {
    switch (typeString) {
      case 'expense':
        return TransactionType.expense;
      case 'income':
        return TransactionType.income;
      case 'transfer':
        return TransactionType.transfer;
      default:
      // РћР±СЂР°Р±РѕС‚РєР° РЅРµРѕР¶РёРґР°РЅРЅС‹С… СЃС‚СЂРѕРє. Р—Р°Р»РѕРіРёСЂРѕРІР°С‚СЊ РѕС€РёР±РєСѓ Рё РІРµСЂРЅСѓС‚СЊ Р·РЅР°С‡РµРЅРёРµ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РёР»Рё РІС‹Р±СЂРѕСЃРёС‚СЊ РёСЃРєР»СЋС‡РµРЅРёРµ.
        debugPrint('Warning: Unknown transaction type string received: $typeString. Defaulting to Expense.'); // РСЃРїРѕР»СЊР·СѓРµРј debugPrint РґР»СЏ Р»РѕРіРёСЂРѕРІР°РЅРёСЏ
        return TransactionType.expense; // РР»Рё РІС‹Р±СЂРѕСЃРёС‚СЊ РѕС€РёР±РєСѓ, РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ Р¶РµР»Р°РµРјРѕРіРѕ РїРѕРІРµРґРµРЅРёСЏ
    }
  }


  /// DTO в†’ Entity
  static TransactionEntity fromDto(TransactionDto dto) => TransactionEntity(
    id: dto.id,
    serverId: dto.serverId,
    userId: dto.userId,
    // !!! РР—РњР•РќР•РќРћ: РџСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ String РёР· DTO РІ TransactionType enum
    transactionType: _stringToEnum(dto.transactionType),
    transactionCategoryId: dto.transactionCategoryId,
    amount: dto.amount,
    accountId: dto.accountId,
    projectId: dto.projectId,
    description: dto.description,
    date: dto.date,
    isActive: dto.isActive,
    // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњР°РїРїРёРЅРі РїРѕР»РµР№ РїРµСЂРµРІРѕРґР° РёР· DTO РІ Entity
    fromAccountId: dto.fromAccountId,
    toAccountId: dto.toAccountId,
  );

  /// Entity в†’ DTO (userId РјРѕР¶РЅРѕ РїРµСЂРµРѕРїСЂРµРґРµР»РёС‚СЊ)
  static TransactionDto toDto(TransactionEntity entity, {required int userId}) => TransactionDto(
    id: entity.id ?? 0, // API С‚СЂРµР±СѓРµС‚ id, РґР°Р¶Рµ РµСЃР»Рё РІСЂРµРјРµРЅРЅС‹Р№
    serverId: entity.serverId,
    userId: userId,
    // !!! РР—РњР•РќР•РќРћ: РџСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ TransactionType enum РІ String РґР»СЏ DTO
    transactionType: _enumToString(entity.transactionType),
    transactionCategoryId: entity.transactionCategoryId,
    amount: entity.amount,
    accountId: entity.accountId,
    projectId: entity.projectId,
    description: entity.description,
    date: entity.date,
    isActive: entity.isActive,
    // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњР°РїРїРёРЅРі РїРѕР»РµР№ РїРµСЂРµРІРѕРґР° РёР· Entity РІ DTO
    fromAccountId: entity.fromAccountId,
    toAccountId: entity.toAccountId,
  );

  /// DB row в†’ Entity
  static TransactionEntity fromDb(TransactionsTableData row) => TransactionEntity(
    id: row.id,
    serverId: row.serverId,
    userId: row.userId,
    // !!! РР—РњР•РќР•РќРћ: РџСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ String РёР· DB row РІ TransactionType enum
    transactionType: _stringToEnum(row.transactionType),
    transactionCategoryId: row.transactionCategoryId,
    amount: row.amount,
    accountId: row.accountId,
    projectId: row.projectId,
    description: row.description,
    date: row.date,
    isActive: row.isActive,
    // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњР°РїРїРёРЅРі РїРѕР»РµР№ РїРµСЂРµРІРѕРґР° РёР· DB row РІ Entity
    fromAccountId: row.fromAccountId,
    toAccountId: row.toAccountId,
  );

  /// Entity в†’ Drift Companion (РґР»СЏ insert)
  static TransactionsTableCompanion toDb(TransactionEntity entity, {required int userId}) {
    return TransactionsTableCompanion(
      id: entity.id != null ? Value(entity.id!) : const Value.absent(),
      serverId: entity.serverId != null ? Value(entity.serverId!) : const Value.absent(),
      userId: Value(userId),
      // !!! РР—РњР•РќР•РќРћ: РџСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ TransactionType enum РІ Value<String> РґР»СЏ Companion
      transactionType: Value(_enumToString(entity.transactionType)),
      transactionCategoryId: entity.transactionCategoryId != null
          ? Value(entity.transactionCategoryId!)
          : const Value.absent(),
      amount: Value(entity.amount),
      accountId: entity.accountId != null ? Value(entity.accountId!) : const Value.absent(),
      projectId: entity.projectId != null ? Value(entity.projectId!) : const Value.absent(),
      description: entity.description != null ? Value(entity.description!) : const Value.absent(),
      date: Value(entity.date),
      isActive: Value(entity.isActive),
      // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњР°РїРїРёРЅРі РїРѕР»РµР№ РїРµСЂРµРІРѕРґР° РёР· Entity РІ Value РґР»СЏ Companion
      fromAccountId: entity.fromAccountId != null ? Value(entity.fromAccountId!) : const Value.absent(),
      toAccountId: entity.toAccountId != null ? Value(entity.toAccountId!) : const Value.absent(),
    );
  }

  /// Entity в†’ Drift Data Model (РґР»СЏ update)
  static TransactionsTableData toFullDriftModel(TransactionEntity entity, {required int userId}) {
    // Р­С‚РѕС‚ РјР°РїРїРёРЅРі С‚СЂРµР±СѓРµС‚, С‡С‚РѕР±С‹ entity.id РЅРµ Р±С‹Р» null, С‚Р°Рє РєР°Рє РѕРЅ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ
    assert(entity.id != null, 'Entity must have an id for toFullDriftModel mapping');
    return TransactionsTableData(
      id: entity.id!, // РўСЂРµР±СѓРµС‚СЃСЏ РЅРµ-null id
      serverId: entity.serverId,
      userId: userId,
      // !!! РР—РњР•РќР•РќРћ: РџСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ TransactionType enum РІ String РґР»СЏ Drift Data Model
      transactionType: _enumToString(entity.transactionType),
      transactionCategoryId: entity.transactionCategoryId,
      amount: entity.amount,
      accountId: entity.accountId,
      projectId: entity.projectId,
      description: entity.description,
      date: entity.date,
      isActive: entity.isActive,
      // !!! Р”РћР‘РђР’Р›Р•РќРћ: РњР°РїРїРёРЅРі РїРѕР»РµР№ РїРµСЂРµРІРѕРґР° РёР· Entity РІ Drift Data Model
      fromAccountId: entity.fromAccountId,
      toAccountId: entity.toAccountId,
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transaction_categories\data\transaction_category_provider.dart =====

import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/api/api_service.dart';

final transactionCategoriesProvider = StateNotifierProvider<TransactionCategoriesNotifier, List<String>>(
      (ref) => TransactionCategoriesNotifier(ref.watch(apiServiceProvider)),
);

class TransactionCategoriesNotifier extends StateNotifier<List<String>> {
  TransactionCategoriesNotifier(this.apiService) : super([]);

  final ApiService apiService;

  Future<void> fetchTransactionCategories() async {
    final response = await apiService.get('/transaction_categories');

    if (response.statusCode == 200) {
      final List<dynamic> jsonData = jsonDecode(response.data);
      state = List<String>.from(jsonData.map((item) => item['name']));
    } else {
      throw Exception('РћС€РёР±РєР° Р·Р°РіСЂСѓР·РєРё РєР°С‚РµРіРѕСЂРёР№');
    }
  }

  Future<void> addTransactionCategory(String name) async {
    final response = await apiService.post('/transaction_categories', {'name': name});

    if (response.statusCode == 201) {
      fetchTransactionCategories();
    } else {
      throw Exception('РћС€РёР±РєР° РґРѕР±Р°РІР»РµРЅРёСЏ РєР°С‚РµРіРѕСЂРёРё');
    }
  }

  Future<void> deleteTransactionCategory(String name) async {
    final response = await apiService.delete('/transaction_categories/$name');

    if (response.statusCode == 200) {
      fetchTransactionCategories();
    } else {
      throw Exception('РћС€РёР±РєР° СѓРґР°Р»РµРЅРёСЏ РєР°С‚РµРіРѕСЂРёРё');
    }
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transaction_categories\presentation\transaction_categories_screen.dart =====

import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../generated/locale_keys.g.dart';
import '../data/transaction_category_provider.dart';

class TransactionCategoriesScreen extends ConsumerWidget {
  const TransactionCategoriesScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final transactionCategories = ref.watch(transactionCategoriesProvider);
    final categoriesNotifier = ref.read(transactionCategoriesProvider.notifier);

    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.categories.tr()),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () async {
              await categoriesNotifier.fetchTransactionCategories();
            },
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: transactionCategories.length,
        itemBuilder: (context, index) {
          final category = transactionCategories[index];
          return ListTile(
            title: Text(category),
            trailing: IconButton(
              icon: const Icon(Icons.delete),
              onPressed: () async {
                await categoriesNotifier.deleteTransactionCategory(category);
              },
            ),
          );
        },
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\transaction_categories\presentation\transaction_category_form_screen.dart =====

// import 'package:easy_localization/easy_localization.dart';
// import 'package:flutter/material.dart';
// import '../../../common/widgets/custom_buttons/custom_primary_button.dart';
// import '../../../common/widgets/custom_text_field.dart';
// import '../../../generated/locale_keys.g.dart';
//
// class CategoryFormScreen extends StatelessWidget {
//   CategoryFormScreen({super.key});
//
//   final TextEditingController nameController = TextEditingController();
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: Text(LocaleKeys.addCategory.tr())),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           children: [
//             CustomTextField(controller: nameController, hintText: LocaleKeys.categoryName.tr()),
//             const SizedBox(height: 24),
//             CustomPrimaryButton(
//               text: LocaleKeys.save.tr(),
//               onPressed: () {
//                 Navigator.pop(context);
//                 // TODO: Implement logic to save the category name
//                 final categoryName = nameController.text.trim();
//                 print('Category Name to save: $categoryName');
//               },
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\users\presentation\delete_account_screen.dart =====

// lib/features/settings/presentation/screens/delete_account_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../../generated/locale_keys.g.dart';

class DeleteAccountScreen extends ConsumerWidget {
  const DeleteAccountScreen({super.key});

  Future<void> _showConfirmationDialog(BuildContext context, WidgetRef ref) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: Text(LocaleKeys.confirmDeletion.tr()),
          content: Text(LocaleKeys.confirmDeleteAllDataConfirmation.tr()),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(dialogContext).pop(); // Р—Р°РєСЂС‹С‚СЊ РґРёР°Р»РѕРі
              },
              child: Text(LocaleKeys.cancel.tr()),
            ),
            TextButton(
              onPressed: () {
                print('Р—Р°РїСѓС‰РµРЅР° РїСЂРѕС†РµРґСѓСЂР° СѓРґР°Р»РµРЅРёСЏ СѓС‡РµС‚РЅРѕР№ Р·Р°РїРёСЃРё Рё РґР°РЅРЅС‹С…');
                // !!! Р—РђР“Р›РЈРЁРљРђ: Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ СЂРµР°Р»СЊРЅР°СЏ Р»РѕРіРёРєР° СѓРґР°Р»РµРЅРёСЏ РґР°РЅРЅС‹С… Рё Р°РєРєР°СѓРЅС‚Р°
                // РќР°РїСЂРёРјРµСЂ, РІС‹Р·РѕРІ РїСЂРѕРІР°Р№РґРµСЂР° РёР»Рё СЃРµСЂРІРёСЃР° РґР»СЏ СѓРґР°Р»РµРЅРёСЏ
                // ref.read(authProvider.notifier).deleteAccount(); // РџСЂРёРјРµСЂ РІС‹Р·РѕРІР° РїСЂРѕРІР°Р№РґРµСЂР°
                Navigator.of(dialogContext).pop(); // Р—Р°РєСЂС‹С‚СЊ РґРёР°Р»РѕРі
                // Р’РѕР·РјРѕР¶РЅРѕ, РїРµСЂРµРЅР°РїСЂР°РІРёС‚СЊ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РЅР° СЌРєСЂР°РЅ РІС‹С…РѕРґР° РёР»Рё Р°РІС‚РѕСЂРёР·Р°С†РёРё
                Navigator.of(context).pop(); // Р’РµСЂРЅСѓС‚СЊСЃСЏ РЅР° СЌРєСЂР°РЅ РЅР°СЃС‚СЂРѕРµРє (РёР»Рё РєСѓРґР° РЅРµРѕР±С…РѕРґРёРјРѕ)
              },
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: Text(LocaleKeys.deleteAllData.tr()),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.deleteProfileAndData.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Text(
              LocaleKeys.deleteProfileSubtitle.tr(),
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            Text(
              LocaleKeys.deleteAllDataSubtitle.tr(),
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 32),
            CustomPrimaryButton(
              text: LocaleKeys.deleteAllData.tr(),
              onPressed: () => _showConfirmationDialog(context, ref),
            ),
            const SizedBox(height: 16),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Р’РµСЂРЅСѓС‚СЊСЃСЏ РЅР° СЌРєСЂР°РЅ РЅР°СЃС‚СЂРѕРµРє
              },
              child: Text(LocaleKeys.cancel.tr()),
            ),
          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\features\users\presentation\user_details_screen.dart =====

// lib/features/teams/presentation/screens/user_details_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../common/widgets/custom_buttons/custom_primary_button.dart';
import '../../../common/widgets/custom_picker_fields/custom_primary_picker_field.dart';
import '../../../common/widgets/custom_show_modal_bottom_sheet.dart';
import '../../../common/widgets/custom_picker_fields/picker_item.dart';
import '../../../core/models/user.dart';
import '../../../../generated/locale_keys.g.dart';

class UserDetailsScreen extends ConsumerStatefulWidget {
  final User user;

  const UserDetailsScreen({super.key, required this.user});

  @override
  ConsumerState<UserDetailsScreen> createState() => _UserDetailsScreenState();
}

class _UserDetailsScreenState extends ConsumerState<UserDetailsScreen> {
  String? _selectedRole; // Р”Р»СЏ С…СЂР°РЅРµРЅРёСЏ РІС‹Р±СЂР°РЅРЅРѕР№ СЂРѕР»Рё

  // !!! Р—РђР“Р›РЈРЁРљРђ: Р—РґРµСЃСЊ РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ СЂРµР°Р»СЊРЅС‹Р№ СЃРїРёСЃРѕРє СЂРѕР»РµР№
  final List<String> _availableRoles = ['РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ', 'Р РµРґР°РєС‚РѕСЂ', 'РќР°Р±Р»СЋРґР°С‚РµР»СЊ'];

  Future<void> _showRolePicker(BuildContext context) async {
    final pickedRoleItem = await customShowModalBottomSheet<String>(
      context: context,
      title: LocaleKeys.selectRole.tr(),
      type: 'line',
      items: _availableRoles
          .map((role) => PickerItem<String>(id: role, displayValue: role.tr()))
          .toList(),
    );

    if (pickedRoleItem != null) {
      setState(() {
        _selectedRole = pickedRoleItem.id;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(LocaleKeys.userDetails.tr()),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('${LocaleKeys.name.tr()}:', style: Theme.of(context).textTheme.titleMedium),
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 8.0),
              child: Text(widget.user.name, style: Theme.of(context).textTheme.bodyLarge),
            ),
            const SizedBox(height: 16),
            Text('${LocaleKeys.email.tr()}:', style: Theme.of(context).textTheme.titleMedium),
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 8.0),
              child: Text(widget.user.email, style: Theme.of(context).textTheme.bodyLarge),
            ),
            const SizedBox(height: 24),
            Text('${LocaleKeys.role.tr()}:', style: Theme.of(context).textTheme.titleMedium),
            const SizedBox(height: 8),
            CustomPrimaryPickerField(
              context: context,
              icon: Icons.person_outline, // РР»Рё РґСЂСѓРіР°СЏ РїРѕРґС…РѕРґСЏС‰Р°СЏ РёРєРѕРЅРєР°
              currentValueDisplay: _selectedRole?.tr() ?? LocaleKeys.selectRole.tr(),
              onTap: () => _showRolePicker(context),
            ),
            const SizedBox(height: 32),
            CustomPrimaryButton(
              text: LocaleKeys.save.tr(),
              onPressed: () {
                // !!! Р—РђР“Р›РЈРЁРљРђ: Р—РґРµСЃСЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ Р»РѕРіРёРєР° СЃРѕС…СЂР°РЅРµРЅРёСЏ СЂРѕР»Рё (_selectedRole)
                print('РЎРѕС…СЂР°РЅРёС‚СЊ СЂРѕР»СЊ: $_selectedRole РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ ${widget.user.id}');
                // Р’РѕР·РјРѕР¶РЅРѕ, РІС‹Р·РІР°С‚СЊ РїСЂРѕРІР°Р№РґРµСЂ РёР»Рё СЃРµСЂРІРёСЃ РґР»СЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЂРѕР»Рё
              },
            ),
          ],
        ),
      ),
    );
  }
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\generated\codegen_loader.g.dart =====

// DO NOT EDIT. This is code generated via package:easy_localization/generate.dart

// ignore_for_file: prefer_single_quotes, avoid_renaming_method_parameters, constant_identifier_names

import 'dart:ui';

import 'package:easy_localization/easy_localization.dart' show AssetLoader;

class CodegenLoader extends AssetLoader{
  const CodegenLoader();

  @override
  Future<Map<String, dynamic>?> load(String path, Locale locale) {
    return Future.value(mapLocales[locale.toString()]);
  }

  static const Map<String,dynamic> _en_US = {
  "login": "Login",
  "team": "Team",
  "teams": "Teams",
  "language": "Language",
  "incomeCategories": "Income Categories",
  "expenseCategories": "Expense Categories",
  "selectCurrency": "Select Currency",
  "email": "Email",
  "password": "Password",
  "register": "Register",
  "transaction": "Transaction",
  "transactions": "Transactions",
  "categories": "Categories",
  "project": "Project",
  "projects": "Projects",
  "reports": "Reports",
  "plans": "Plans",
  "settings": "Settings",
  "logout": "Logout",
  "accounts": "Accounts",
  "budget": "Budget",
  "add": "Add",
  "balance": "Balance",
  "totalBudgetForAMonth": "Total Budget For A Month",
  "expense": "Expense",
  "expenses": "Expenses",
  "income": "Income",
  "incomes": "Incomes",
  "transfer": "Transfer",
  "reportByCategories": "Report By Categories",
  "reportByProjects": "Report By Projects",
  "defaultCurrency": "Default Currency",
  "deleteProfileAndData": "Delete Profile And Data",
  "tenge": "Tenge",
  "dollar": "Dollar",
  "name": "Name",
  "currency": "Currency",
  "save": "Save",
  "editAccount": "Edit Account",
  "tenge_short": "KZT",
  "balance_total": "Total Balance",
  "groceries": "Groceries",
  "transport": "Transport",
  "payments": "Payments",
  "cafes": "Cafes",
  "clothes": "Clothes",
  "entertainment": "Entertainment",
  "health": "Health",
  "gifts": "Gifts",
  "family": "Family",
  "limit": "Limit",
  "setLimitFor": "Set Limit For",
  "editProject": "Edit Project",
  "addProject": "Add Project",
  "projectName": "Project Name",
  "projectNameCannotBeEmpty": "Project Name Cannot Be Empty",
  "projectDescription": "Project Description",
  "noProjects": "No Projects",
  "totalExpenses": "Total Expenses",
  "totalIncome": "Total Income",
  "transactions_plural": "Transactions",
  "total": "Total",
  "category": "Category",
  "addNew": "Add New",
  "edit": "Edit",
  "categoryName": "Category Name",
  "categoryNameCannotBeEmpty": "Category Name Cannot Be Empty",
  "addCategory": "Add Category",
  "saveChanges": "Save Changes",
  "confirmProfileDeletionTitle": "Confirm Profile Deletion",
  "confirmProfileDeletionContent": "Are you sure you want to delete your profile? This action will result in the loss of all profile data except transactions.",
  "cancel": "Cancel",
  "deleteProfile": "Delete Profile",
  "confirmDeleteAllTransactionsTitle": "Confirm Delete All Transactions",
  "confirmDeleteAllTransactionsContent": "Are you sure you want to delete all your transactions? This action is irreversible.",
  "deleteAllTransactions": "Delete All Transactions",
  "deleteProfileSubtitle": "Deletion of basic profile information.",
  "deleteAllTransactionsSubtitle": "Deletion of all transaction history.",
  "confirmDeletion": "Confirm Deletion",
  "deleteAllDataConfirmation": "Are you sure you want to delete all data, including accounts, projects, etc.?",
  "deleteTransactionsConfirmation": "Are you sure you want to delete all transactions?",
  "confirm": "Confirm",
  "deleteAllData": "Delete All Data",
  "deleteAllDataSubtitle": "Delete all data, including accounts, projects, etc.",
  "deleteTransactions": "Delete Transactions",
  "deleteTransactionsOnlySubtitle": "Delete transactions only",
  "russian": "Russian",
  "english": "English",
  "euro": "Euro",
  "createTeam": "Create Team",
  "teamName": "Team Name",
  "teamNameCannotBeEmpty": "Team Name Cannot Be Empty",
  "create": "Create",
  "addTeam": "Add Team",
  "noUsersInTeam": "No users in team",
  "selectTeam": "Select Team",
  "userDetails": "User Details",
  "role": "Role",
  "administrator": "Administrator",
  "editor": "Editor",
  "viewer": "Viewer",
  "selectLanguage": "Select Language",
  "addComment": "Add Comment",
  "today": "Today",
  "selectAccount": "Select Account",
  "selectCategory": "Select Category",
  "selectProject": "Select Project",
  "date": "Date",
  "yesterday": "Yesterday",
  "theDayBeforeYesterday": "The Day Before Yesterday",
  "amount": "Amount",
  "fromAccount": "From Account",
  "toAccount": "To Account",
  "notSelected": "Not Selected",
  "selectRole": "Select Role",
  "confirmDeleteAllDataConfirmation": "Confirm Delete All Data"
};
static const Map<String,dynamic> _ru_RU = {
  "login": "Р’С…РѕРґ",
  "team": "РљРѕРјР°РЅРґР°",
  "teams": "РљРѕРјР°РЅРґС‹",
  "language": "РЇР·С‹Рє",
  "incomeCategories": "РљР°С‚РµРіРѕСЂРёРё РґРѕС…РѕРґРѕРІ",
  "expenseCategories": "РљР°С‚РµРіРѕСЂРёРё СЂР°СЃС…РѕРґРѕРІ",
  "selectCurrency": "Р’С‹Р±РµСЂРёС‚Рµ РІР°Р»СЋС‚Сѓ",
  "email": "Р­Р»РµРєС‚СЂРѕРЅРЅР°СЏ РїРѕС‡С‚Р°",
  "password": "РџР°СЂРѕР»СЊ",
  "register": "Р РµРіРёСЃС‚СЂР°С†РёСЏ",
  "transaction": "РўСЂР°РЅР·Р°РєС†РёСЏ",
  "transactions": "РўСЂР°РЅР·Р°РєС†РёРё",
  "categories": "РљР°С‚РµРіРѕСЂРёРё",
  "project": "РџСЂРѕРµРєС‚",
  "projects": "РџСЂРѕРµРєС‚С‹",
  "reports": "РћС‚С‡С‘С‚С‹",
  "plans": "РџР»Р°РЅС‹",
  "settings": "РќР°СЃС‚СЂРѕР№РєРё",
  "logout": "Р’С‹Р№С‚Рё",
  "accounts": "РЎС‡РµС‚Р°",
  "budget": "Р‘СЋРґР¶РµС‚",
  "add": "Р”РѕР±Р°РІРёС‚СЊ",
  "balance": "Р‘Р°Р»Р°РЅСЃ",
  "totalBudgetForAMonth": "РС‚РѕРіРѕРІС‹Р№ Р±СЋРґР¶РµС‚ РЅР° РјРµСЃСЏС†",
  "expense": "Р Р°СЃС…РѕРґ",
  "expenses": "Р Р°СЃС…РѕРґС‹",
  "income": "Р”РѕС…РѕРґ",
  "incomes": "Р”РѕС…РѕРґС‹",
  "transfer": "РџРµСЂРµРІРѕРґ",
  "reportByCategories": "РћС‚С‡РµС‚ РїРѕ РєР°С‚РµРіРѕСЂРёСЏРј",
  "reportByProjects": "РћС‚С‡РµС‚ РїРѕ РїСЂРѕРµРєС‚Р°Рј",
  "defaultCurrency": "Р’Р°Р»СЋС‚Р° РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ",
  "deleteProfileAndData": "РЈРґР°Р»РёС‚СЊ РїСЂРѕС„РёР»СЊ Рё РґР°РЅРЅС‹Рµ",
  "tenge": "РўРµРЅРіРµ",
  "dollar": "Р”РѕР»Р»Р°СЂ",
  "name": "РќР°Р·РІР°РЅРёРµ",
  "currency": "Р’Р°Р»СЋС‚Р°",
  "save": "РЎРѕС…СЂР°РЅРёС‚СЊ",
  "editAccount": "Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ СЃС‡РµС‚",
  "tenge_short": "С‚Рі",
  "balance_total": "РћР±С‰РёР№ Р±Р°Р»Р°РЅСЃ",
  "groceries": "РџСЂРѕРґСѓРєС‚С‹",
  "transport": "РўСЂР°РЅСЃРїРѕСЂС‚",
  "payments": "РџР»Р°С‚РµР¶Рё",
  "cafes": "РљР°С„Рµ",
  "clothes": "РћРґРµР¶РґР°",
  "entertainment": "Р Р°Р·РІР»РµС‡РµРЅРёСЏ",
  "health": "Р—РґРѕСЂРѕРІСЊРµ",
  "gifts": "РџРѕРґР°СЂРєРё",
  "family": "РЎРµРјСЊСЏ",
  "limit": "Р›РёРјРёС‚",
  "setLimitFor": "РЈСЃС‚Р°РЅРѕРІРёС‚СЊ Р»РёРјРёС‚ РґР»СЏ",
  "editProject": "Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ РїСЂРѕРµРєС‚",
  "addProject": "Р”РѕР±Р°РІРёС‚СЊ РїСЂРѕРµРєС‚",
  "projectName": "РќР°Р·РІР°РЅРёРµ РїСЂРѕРµРєС‚Р°",
  "projectNameCannotBeEmpty": "РќР°Р·РІР°РЅРёРµ РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РїСѓСЃС‚С‹Рј",
  "projectDescription": "РћРїРёСЃР°РЅРёРµ РїСЂРѕРµРєС‚Р°",
  "noProjects": "РќРµС‚ РїСЂРѕРµРєС‚РѕРІ",
  "totalExpenses": "Р’СЃРµРіРѕ СЂР°СЃС…РѕРґРѕРІ",
  "totalIncome": "Р’СЃРµРіРѕ РґРѕС…РѕРґРѕРІ",
  "transactions_plural": "РўСЂР°РЅР·Р°РєС†РёРё",
  "total": "Р’СЃРµРіРѕ",
  "category": "РљР°С‚РµРіРѕСЂРёСЏ",
  "addNew": "Р”РѕР±Р°РІРёС‚СЊ РЅРѕРІСѓСЋ",
  "edit": "Р РµРґР°РєС‚РёСЂРѕРІР°С‚СЊ",
  "categoryName": "РќР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё",
  "categoryNameCannotBeEmpty": "РќР°Р·РІР°РЅРёРµ РєР°С‚РµРіРѕСЂРёРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РїСѓСЃС‚С‹Рј",
  "addCategory": "Р”РѕР±Р°РІРёС‚СЊ РєР°С‚РµРіРѕСЂРёСЋ",
  "saveChanges": "РЎРѕС…СЂР°РЅРёС‚СЊ РёР·РјРµРЅРµРЅРёСЏ",
  "confirmProfileDeletionTitle": "РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ СѓРґР°Р»РµРЅРёСЏ РїСЂРѕС„РёР»СЏ",
  "confirmProfileDeletionContent": "Р’С‹ СѓРІРµСЂРµРЅС‹, С‡С‚Рѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ СЃРІРѕР№ РїСЂРѕС„РёР»СЊ? Р­С‚Р° РґРµР№СЃС‚РІРёРµ РїСЂРёРІРµРґРµС‚ Рє РїРѕС‚РµСЂРµ РІСЃРµС… РґР°РЅРЅС‹С… РїСЂРѕС„РёР»СЏ, РєСЂРѕРјРµ С‚СЂР°РЅР·Р°РєС†РёР№.",
  "cancel": "РћС‚РјРµРЅР°",
  "deleteProfile": "РЈРґР°Р»РёС‚СЊ РїСЂРѕС„РёР»СЊ",
  "confirmDeleteAllTransactionsTitle": "РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… С‚СЂР°РЅР·Р°РєС†РёР№",
  "confirmDeleteAllTransactionsContent": "Р’С‹ СѓРІРµСЂРµРЅС‹, С‡С‚Рѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ РІСЃРµ СЃРІРѕРё С‚СЂР°РЅР·Р°РєС†РёРё? Р­С‚Рѕ РґРµР№СЃС‚РІРёРµ РЅРµРѕР±СЂР°С‚РёРјРѕ.",
  "deleteAllTransactions": "РЈРґР°Р»РёС‚СЊ РІСЃРµ С‚СЂР°РЅР·Р°РєС†РёРё",
  "deleteProfileSubtitle": "РЈРґР°Р»РµРЅРёРµ РѕСЃРЅРѕРІРЅРѕР№ РёРЅС„РѕСЂРјР°С†РёРё РїСЂРѕС„РёР»СЏ.",
  "deleteAllTransactionsSubtitle": "РЈРґР°Р»РµРЅРёРµ РІСЃРµР№ РёСЃС‚РѕСЂРёРё С‚СЂР°РЅР·Р°РєС†РёР№.",
  "confirmDeletion": "РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ СѓРґР°Р»РµРЅРёСЏ",
  "deleteAllDataConfirmation": "Р’С‹ СѓРІРµСЂРµРЅС‹, С‡С‚Рѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ РІСЃРµ РґР°РЅРЅС‹Рµ, РІРєР»СЋС‡Р°СЏ СЃС‡РµС‚Р°, РїСЂРѕРµРєС‚С‹ Рё С‚.Рґ.?",
  "deleteTransactionsConfirmation": "Р’С‹ СѓРІРµСЂРµРЅС‹, С‡С‚Рѕ С…РѕС‚РёС‚Рµ СѓРґР°Р»РёС‚СЊ РІСЃРµ С‚СЂР°РЅР·Р°РєС†РёРё?",
  "confirm": "РџРѕРґС‚РІРµСЂРґРёС‚СЊ",
  "deleteAllData": "РЈРґР°Р»РёС‚СЊ РІСЃРµ РґР°РЅРЅС‹Рµ",
  "deleteAllDataSubtitle": "РЈРґР°Р»РёС‚СЊ РІСЃРµ РґР°РЅРЅС‹Рµ, РІРєР»СЋС‡Р°СЏ СЃС‡РµС‚Р°, РїСЂРѕРµРєС‚С‹ Рё С‚.Рґ.",
  "deleteTransactions": "РЈРґР°Р»РёС‚СЊ С‚СЂР°РЅР·Р°РєС†РёРё",
  "deleteTransactionsOnlySubtitle": "РЈРґР°Р»РёС‚СЊ С‚РѕР»СЊРєРѕ С‚СЂР°РЅР·Р°РєС†РёРё",
  "russian": "Р СѓСЃСЃРєРёР№",
  "english": "РђРЅРіР»РёР№СЃРєРёР№",
  "euro": "Р•РІСЂРѕ",
  "createTeam": "РЎРѕР·РґР°С‚СЊ РєРѕРјР°РЅРґСѓ",
  "teamName": "РќР°Р·РІР°РЅРёРµ РєРѕРјР°РЅРґС‹",
  "teamNameCannotBeEmpty": "РќР°Р·РІР°РЅРёРµ РєРѕРјР°РЅРґС‹ РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РїСѓСЃС‚С‹Рј",
  "create": "РЎРѕР·РґР°С‚СЊ",
  "addTeam": "Р”РѕР±Р°РІРёС‚СЊ РєРѕРјР°РЅРґСѓ",
  "noUsersInTeam": "Р’ РєРѕРјР°РЅРґРµ РЅРµС‚ РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№",
  "selectTeam": "Р’С‹Р±РµСЂРёС‚Рµ РєРѕРјР°РЅРґСѓ",
  "userDetails": "Р”РµС‚Р°Р»Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ",
  "role": "Р РѕР»СЊ",
  "administrator": "РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ",
  "editor": "Р РµРґР°РєС‚РѕСЂ",
  "viewer": "РќР°Р±Р»СЋРґР°С‚РµР»СЊ",
  "selectLanguage": "Р’С‹Р±РµСЂРёС‚Рµ СЏР·С‹Рє",
  "addComment": "Р”РѕР±Р°РІРёС‚СЊ РєРѕРјРјРµРЅС‚Р°СЂРёР№",
  "today": "РЎРµРіРѕРґРЅСЏ",
  "selectAccount": "Р’С‹Р±РµСЂРёС‚Рµ СЃС‡РµС‚",
  "selectCategory": "Р’С‹Р±РµСЂРёС‚Рµ РєР°С‚РµРіРѕСЂРёСЋ",
  "selectProject": "Р’С‹Р±РµСЂРёС‚Рµ РїСЂРѕРµРєС‚",
  "date": "Р”Р°С‚Р°",
  "yesterday": "Р’С‡РµСЂР°",
  "theDayBeforeYesterday": "РџРѕР·Р°РІС‡РµСЂР°",
  "amount": "РЎСѓРјРјР°",
  "fromAccount": "C СЃС‡С‘С‚Р°",
  "toAccount": "РќР° СЃС‡С‘С‚",
  "notSelected": "РќРµ РІС‹Р±СЂР°РЅ",
  "selectRole": "Р’С‹Р±РµСЂРёС‚Рµ СЂРѕР»СЊ",
  "confirmDeleteAllDataConfirmation": "РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ СѓРґР°Р»РµРЅРёСЏ РІСЃРµС… РґР°РЅРЅС‹С…"
};
static const Map<String, Map<String,dynamic>> mapLocales = {"en_US": _en_US, "ru_RU": _ru_RU};
}
===== C:\Users\d.kairov\projects\flutter_finance_app\lib\generated\locale_keys.g.dart =====

// DO NOT EDIT. This is code generated via package:easy_localization/generate.dart

// ignore_for_file: constant_identifier_names

abstract class  LocaleKeys {
  static const login = 'login';
  static const team = 'team';
  static const teams = 'teams';
  static const language = 'language';
  static const incomeCategories = 'incomeCategories';
  static const expenseCategories = 'expenseCategories';
  static const selectCurrency = 'selectCurrency';
  static const email = 'email';
  static const password = 'password';
  static const register = 'register';
  static const transaction = 'transaction';
  static const transactions = 'transactions';
  static const categories = 'categories';
  static const project = 'project';
  static const projects = 'projects';
  static const reports = 'reports';
  static const plans = 'plans';
  static const settings = 'settings';
  static const logout = 'logout';
  static const accounts = 'accounts';
  static const budget = 'budget';
  static const add = 'add';
  static const balance = 'balance';
  static const totalBudgetForAMonth = 'totalBudgetForAMonth';
  static const expense = 'expense';
  static const expenses = 'expenses';
  static const income = 'income';
  static const incomes = 'incomes';
  static const transfer = 'transfer';
  static const reportByCategories = 'reportByCategories';
  static const reportByProjects = 'reportByProjects';
  static const defaultCurrency = 'defaultCurrency';
  static const deleteProfileAndData = 'deleteProfileAndData';
  static const tenge = 'tenge';
  static const dollar = 'dollar';
  static const name = 'name';
  static const currency = 'currency';
  static const save = 'save';
  static const editAccount = 'editAccount';
  static const tenge_short = 'tenge_short';
  static const balance_total = 'balance_total';
  static const groceries = 'groceries';
  static const transport = 'transport';
  static const payments = 'payments';
  static const cafes = 'cafes';
  static const clothes = 'clothes';
  static const entertainment = 'entertainment';
  static const health = 'health';
  static const gifts = 'gifts';
  static const family = 'family';
  static const limit = 'limit';
  static const setLimitFor = 'setLimitFor';
  static const editProject = 'editProject';
  static const addProject = 'addProject';
  static const projectName = 'projectName';
  static const projectNameCannotBeEmpty = 'projectNameCannotBeEmpty';
  static const projectDescription = 'projectDescription';
  static const noProjects = 'noProjects';
  static const totalExpenses = 'totalExpenses';
  static const totalIncome = 'totalIncome';
  static const transactions_plural = 'transactions_plural';
  static const total = 'total';
  static const category = 'category';
  static const addNew = 'addNew';
  static const edit = 'edit';
  static const categoryName = 'categoryName';
  static const categoryNameCannotBeEmpty = 'categoryNameCannotBeEmpty';
  static const addCategory = 'addCategory';
  static const saveChanges = 'saveChanges';
  static const confirmProfileDeletionTitle = 'confirmProfileDeletionTitle';
  static const confirmProfileDeletionContent = 'confirmProfileDeletionContent';
  static const cancel = 'cancel';
  static const deleteProfile = 'deleteProfile';
  static const confirmDeleteAllTransactionsTitle = 'confirmDeleteAllTransactionsTitle';
  static const confirmDeleteAllTransactionsContent = 'confirmDeleteAllTransactionsContent';
  static const deleteAllTransactions = 'deleteAllTransactions';
  static const deleteProfileSubtitle = 'deleteProfileSubtitle';
  static const deleteAllTransactionsSubtitle = 'deleteAllTransactionsSubtitle';
  static const confirmDeletion = 'confirmDeletion';
  static const deleteAllDataConfirmation = 'deleteAllDataConfirmation';
  static const deleteTransactionsConfirmation = 'deleteTransactionsConfirmation';
  static const confirm = 'confirm';
  static const deleteAllData = 'deleteAllData';
  static const deleteAllDataSubtitle = 'deleteAllDataSubtitle';
  static const deleteTransactions = 'deleteTransactions';
  static const deleteTransactionsOnlySubtitle = 'deleteTransactionsOnlySubtitle';
  static const russian = 'russian';
  static const english = 'english';
  static const euro = 'euro';
  static const createTeam = 'createTeam';
  static const teamName = 'teamName';
  static const teamNameCannotBeEmpty = 'teamNameCannotBeEmpty';
  static const create = 'create';
  static const addTeam = 'addTeam';
  static const noUsersInTeam = 'noUsersInTeam';
  static const selectTeam = 'selectTeam';
  static const userDetails = 'userDetails';
  static const role = 'role';
  static const administrator = 'administrator';
  static const editor = 'editor';
  static const viewer = 'viewer';
  static const selectLanguage = 'selectLanguage';
  static const addComment = 'addComment';
  static const today = 'today';
  static const selectAccount = 'selectAccount';
  static const selectCategory = 'selectCategory';
  static const selectProject = 'selectProject';
  static const date = 'date';
  static const yesterday = 'yesterday';
  static const theDayBeforeYesterday = 'theDayBeforeYesterday';
  static const amount = 'amount';
  static const fromAccount = 'fromAccount';
  static const toAccount = 'toAccount';
  static const notSelected = 'notSelected';
  static const selectRole = 'selectRole';
  static const confirmDeleteAllDataConfirmation = 'confirmDeleteAllDataConfirmation';

}
