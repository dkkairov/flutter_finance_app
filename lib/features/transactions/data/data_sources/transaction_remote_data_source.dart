// lib/features/transactions/data/data_sources/transaction_remote_data_source.dart

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_app_1/features/transactions/domain/models/transaction_dto.dart';

class TransactionRemoteDataSource {
  final Dio dio;

  TransactionRemoteDataSource({required this.dio});

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  Future<List<TransactionDto>> fetchTransactions() async {
    debugPrint('‚û°Ô∏è TransactionRemoteDataSource.fetchTransactions() –≤—ã–∑–≤–∞–Ω');
    try {
      final response = await dio.get('/api/transactions');
      debugPrint('‚¨ÖÔ∏è –û—Ç–≤–µ—Ç –æ—Ç API (—Å—Ç–∞—Ç—É—Å ${response.statusCode}): ${response.data}');
      final data = response.data as List;
      return data
          .map((json) => TransactionDto.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ TransactionRemoteDataSource.fetchTransactions(): $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  Future<TransactionDto> createTransaction(TransactionDto dto) async {
    debugPrint('‚û°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${dto.toJson()}');
    final response = await dio.post('/api/transactions', data: dto.toJson());
    debugPrint('‚¨ÖÔ∏è –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}');
    return TransactionDto.fromJson(response.data);
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ serverId
  Future<TransactionDto> updateTransaction(int serverId, TransactionDto dto) async {
    debugPrint('‚û°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ serverId=$serverId: ${dto.toJson()}');
    final response = await dio.put('/api/transactions/$serverId', data: dto.toJson());
    debugPrint('‚¨ÖÔ∏è –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}');
    return TransactionDto.fromJson(response.data);
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ serverId
  Future<void> deleteTransaction(int serverId) async {
    debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ serverId=$serverId');
    await dio.delete('/api/transactions/$serverId');
  }
}
